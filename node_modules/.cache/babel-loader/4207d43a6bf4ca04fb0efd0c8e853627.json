{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\n\nvar Pagination =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Pagination, _mixin);\n\n  /**\n   * Pagination component.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element working as a pagination component.\n   * @param {Object} [options] The component options.\n   * @property {string} [selectorInit] The CSS selector to find pagination components.\n   * @property {string} [selectorItemsPerPageInput]\n   *   The CSS selector to find the input that determines the number of items per page.\n   * @property {string} [selectorPageNumberInput] The CSS selector to find the input that changes the page displayed.\n   * @property {string} [selectorPageBackward] The CSS selector to find the button that goes back a page.\n   * @property {string} [selectorPageForward] The CSS selector to find the button that goes forward a page.\n   * @property {string} [eventItemsPerPage]\n   *   The name of the custom event fired when a user changes the number of items per page.\n   *   event.detail.value contains the number of items a user wishes to see.\n   * @property {string} [eventPageNumber]\n   *   The name of the custom event fired when a user inputs a specific page number.\n   *   event.detail.value contains the value that the user input.\n   * @property {string} [eventPageChange]\n   *   The name of the custom event fired when a user goes forward or backward a page.\n   *   event.detail.direction contains the direction a user wishes to go.\n   */\n  function Pagination(element, options) {\n    var _this;\n\n    _classCallCheck(this, Pagination);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pagination).call(this, element, options));\n\n    _this._emitEvent = function (evtName, detail) {\n      var event = new CustomEvent(\"\".concat(evtName), {\n        bubbles: true,\n        cancelable: true,\n        detail: detail\n      });\n\n      _this.element.dispatchEvent(event);\n    };\n\n    _this.manage(on(_this.element, 'click', function (evt) {\n      if (evt.target.matches(_this.options.selectorPageBackward)) {\n        var detail = {\n          initialEvt: evt,\n          element: evt.target,\n          direction: 'backward'\n        };\n\n        _this._emitEvent(_this.options.eventPageChange, detail);\n      } else if (evt.target.matches(_this.options.selectorPageForward)) {\n        var _detail = {\n          initialEvt: evt,\n          element: evt.target,\n          direction: 'forward'\n        };\n\n        _this._emitEvent(_this.options.eventPageChange, _detail);\n      }\n    }));\n\n    _this.manage(on(_this.element, 'input', function (evt) {\n      if (evt.target.matches(_this.options.selectorItemsPerPageInput)) {\n        var detail = {\n          initialEvt: evt,\n          element: evt.target,\n          value: evt.target.value\n        };\n\n        _this._emitEvent(_this.options.eventItemsPerPage, detail);\n      } else if (evt.target.matches(_this.options.selectorPageNumberInput)) {\n        var _detail2 = {\n          initialEvt: evt,\n          element: evt.target,\n          value: evt.target.value\n        };\n\n        _this._emitEvent(_this.options.eventPageNumber, _detail2);\n      }\n    }));\n\n    return _this;\n  }\n  /**\n   * Dispatches a custom event\n   * @param {string} evtName name of the event to be dispatched.\n   * @param {Object} detail contains the original event and any other necessary details.\n   */\n\n\n  return Pagination;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nPagination.components = new WeakMap();\nPagination.options = {\n  selectorInit: '[data-pagination]',\n  selectorItemsPerPageInput: '[data-items-per-page]',\n  selectorPageNumberInput: '[data-page-number-input]',\n  selectorPageBackward: '[data-page-backward]',\n  selectorPageForward: '[data-page-forward]',\n  eventItemsPerPage: 'itemsPerPage',\n  eventPageNumber: 'pageNumber',\n  eventPageChange: 'pageChange'\n};\nexport default Pagination;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/pagination/pagination.js"],"names":["mixin","createComponent","initComponentBySearch","handles","on","Pagination","element","options","_emitEvent","evtName","detail","event","CustomEvent","bubbles","cancelable","dispatchEvent","manage","evt","target","matches","selectorPageBackward","initialEvt","direction","eventPageChange","selectorPageForward","selectorItemsPerPageInput","value","eventItemsPerPage","selectorPageNumberInput","eventPageNumber","components","WeakMap","selectorInit"],"mappings":"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","sourcesContent":["import mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\n\nclass Pagination extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Pagination component.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element working as a pagination component.\n   * @param {Object} [options] The component options.\n   * @property {string} [selectorInit] The CSS selector to find pagination components.\n   * @property {string} [selectorItemsPerPageInput]\n   *   The CSS selector to find the input that determines the number of items per page.\n   * @property {string} [selectorPageNumberInput] The CSS selector to find the input that changes the page displayed.\n   * @property {string} [selectorPageBackward] The CSS selector to find the button that goes back a page.\n   * @property {string} [selectorPageForward] The CSS selector to find the button that goes forward a page.\n   * @property {string} [eventItemsPerPage]\n   *   The name of the custom event fired when a user changes the number of items per page.\n   *   event.detail.value contains the number of items a user wishes to see.\n   * @property {string} [eventPageNumber]\n   *   The name of the custom event fired when a user inputs a specific page number.\n   *   event.detail.value contains the value that the user input.\n   * @property {string} [eventPageChange]\n   *   The name of the custom event fired when a user goes forward or backward a page.\n   *   event.detail.direction contains the direction a user wishes to go.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    this.manage(\n      on(this.element, 'click', evt => {\n        if (evt.target.matches(this.options.selectorPageBackward)) {\n          const detail = {\n            initialEvt: evt,\n            element: evt.target,\n            direction: 'backward',\n          };\n          this._emitEvent(this.options.eventPageChange, detail);\n        } else if (evt.target.matches(this.options.selectorPageForward)) {\n          const detail = {\n            initialEvt: evt,\n            element: evt.target,\n            direction: 'forward',\n          };\n          this._emitEvent(this.options.eventPageChange, detail);\n        }\n      })\n    );\n\n    this.manage(\n      on(this.element, 'input', evt => {\n        if (evt.target.matches(this.options.selectorItemsPerPageInput)) {\n          const detail = {\n            initialEvt: evt,\n            element: evt.target,\n            value: evt.target.value,\n          };\n          this._emitEvent(this.options.eventItemsPerPage, detail);\n        } else if (evt.target.matches(this.options.selectorPageNumberInput)) {\n          const detail = {\n            initialEvt: evt,\n            element: evt.target,\n            value: evt.target.value,\n          };\n          this._emitEvent(this.options.eventPageNumber, detail);\n        }\n      })\n    );\n  }\n\n  /**\n   * Dispatches a custom event\n   * @param {string} evtName name of the event to be dispatched.\n   * @param {Object} detail contains the original event and any other necessary details.\n   */\n  _emitEvent = (evtName, detail) => {\n    const event = new CustomEvent(`${evtName}`, {\n      bubbles: true,\n      cancelable: true,\n      detail,\n    });\n\n    this.element.dispatchEvent(event);\n  };\n\n  /**\n   * The map associating DOM element and pagination instance.\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor,\n   * {@linkcode Pagination.create .create()}, or {@linkcode Pagination.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode Pagination.init .init()} works.\n   * @property {string} [selectorInit] The CSS selector to find pagination components.\n   * @property {string} [selectorItemsPerPageInput] The CSS selector to find the input that determines\n   * the number of items per page.\n   * @property {string} [selectorPageNumberInput] The CSS selector to find the input that changes the page displayed.\n   * @property {string} [selectorPageBackward] The CSS selector to find the button that goes back a page.\n   * @property {string} [selectorPageForward] The CSS selector to find the button that goes forward a page.\n   * @property {string} [eventItemsPerPage]\n   *   The name of the custom event fired when a user changes the number of items per page.\n   *   event.detail.value contains the number of items a user wishes to see.\n   * @property {string} [eventPageNumber]\n   *   The name of the custom event fired when a user inputs a specific page number.\n   *   event.detail.value contains the value that the user input.\n   * @property {string} [eventPageChange]\n   *   The name of the custom event fired when a user goes forward or backward a page.\n   *   event.detail.direction contains the direction a user wishes to go.\n   */\n  static options = {\n    selectorInit: '[data-pagination]',\n    selectorItemsPerPageInput: '[data-items-per-page]',\n    selectorPageNumberInput: '[data-page-number-input]',\n    selectorPageBackward: '[data-page-backward]',\n    selectorPageForward: '[data-page-forward]',\n    eventItemsPerPage: 'itemsPerPage',\n    eventPageNumber: 'pageNumber',\n    eventPageChange: 'pageChange',\n  };\n}\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}