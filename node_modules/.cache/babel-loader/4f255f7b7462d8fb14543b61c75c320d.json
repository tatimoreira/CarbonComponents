{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nexport default function (ToMix) {\n  /**\n   * Mix-in class to manage events associated with states.\n   * @class EventedState\n   */\n  var EventedState =\n  /*#__PURE__*/\n  function (_ToMix) {\n    _inherits(EventedState, _ToMix);\n\n    function EventedState() {\n      _classCallCheck(this, EventedState);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(EventedState).apply(this, arguments));\n    }\n\n    _createClass(EventedState, [{\n      key: \"_changeState\",\n      // eslint-disable-next-line jsdoc/check-param-names\n\n      /**\n       * The internal implementation for {@link EventedState#changeState `.changeState()`}, performing actual change in state.\n       * @param {string} [state] The new state. Can be an omitted, which means toggling.\n       * @param {Object} [detail]\n       *   The object that should be put to event details that is fired before/after changing state.\n       *   Can have a `group` property, which specifies what state to be changed.\n       * @param {EventedState~changeStateCallback} callback The callback called once changing state is finished or is canceled.\n       * @private\n       */\n      value: function _changeState() {\n        throw new Error('_changeState() should be overriden to perform actual change in state.');\n      } // eslint-disable-next-line jsdoc/check-param-names\n\n      /**\n       * Changes the state of this component.\n       * @param {string} [state] The new state. Can be an omitted, which means toggling.\n       * @param {Object} [detail]\n       *   The object that should be put to event details that is fired before/after changing state.\n       *   Can have a `group` property, which specifies what state to be changed.\n       * @param {EventedState~changeStateCallback} [callback] The callback called once changing state is finished or is canceled.\n       */\n\n    }, {\n      key: \"changeState\",\n      value: function changeState() {\n        var _this = this;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var state = typeof args[0] === 'string' ? args.shift() : undefined;\n        var detail = Object(args[0]) === args[0] && typeof args[0] !== 'function' ? args.shift() : undefined;\n        var callback = typeof args[0] === 'function' ? args.shift() : undefined;\n\n        if (typeof this.shouldStateBeChanged === 'function' && !this.shouldStateBeChanged(state, detail)) {\n          if (callback) {\n            callback(null, true);\n          }\n\n          return;\n        }\n\n        var data = {\n          group: detail && detail.group,\n          state: state\n        };\n        var eventNameSuffix = [data.group, state].filter(Boolean).join('-').split('-') // Group or state may contain hyphen\n        .map(function (item) {\n          return item[0].toUpperCase() + item.substr(1);\n        }).join('');\n        var eventStart = new CustomEvent(this.options[\"eventBefore\".concat(eventNameSuffix)], {\n          bubbles: true,\n          cancelable: true,\n          detail: detail\n        });\n        var fireOnNode = detail && detail.delegatorNode || this.element;\n        var canceled = !fireOnNode.dispatchEvent(eventStart);\n\n        if (canceled) {\n          if (callback) {\n            var error = new Error(\"Changing state (\".concat(JSON.stringify(data), \") has been canceled.\"));\n            error.canceled = true;\n            callback(error);\n          }\n        } else {\n          var changeStateArgs = [state, detail].filter(Boolean);\n\n          this._changeState.apply(this, _toConsumableArray(changeStateArgs).concat([function () {\n            fireOnNode.dispatchEvent(new CustomEvent(_this.options[\"eventAfter\".concat(eventNameSuffix)], {\n              bubbles: true,\n              cancelable: true,\n              detail: detail\n            }));\n\n            if (callback) {\n              callback();\n            }\n          }]));\n        }\n      }\n      /**\n       * Tests if change in state should happen or not.\n       * Classes inheriting {@link EventedState `EventedState`} should override this function.\n       * @function EventedState#shouldStateBeChanged\n       * @param {string} [state] The new state. Can be an omitted, which means toggling.\n       * @param {Object} [detail]\n       *   The object that should be put to event details that is fired before/after changing state.\n       *   Can have a `group` property, which specifies what state to be changed.\n       * @returns {boolean}\n       *   `false` if change in state shouldn't happen, e.g. when the given new state is the same as the current one.\n       */\n\n    }]);\n\n    return EventedState;\n  }(ToMix);\n  /**\n   * The callback called once changing state is finished or is canceled.\n   * @callback EventedState~changeStateCallback\n   * @param {Error} error\n   *   An error object with `true` in its `canceled` property if changing state is canceled.\n   *   Cancellation happens if the handler of a custom event, that is fired before changing state happens,\n   *   calls `.preventDefault()` against the event.\n   * @param {boolean} keptState\n   *   `true` if the call to {@link EventedState#changeState `.changeState()`} didn't cause actual change in state.\n   */\n\n\n  return EventedState;\n}","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/globals/js/mixins/evented-state.js"],"names":["ToMix","EventedState","Error","args","state","shift","undefined","detail","Object","callback","shouldStateBeChanged","data","group","eventNameSuffix","filter","Boolean","join","split","map","item","toUpperCase","substr","eventStart","CustomEvent","options","bubbles","cancelable","fireOnNode","delegatorNode","element","canceled","dispatchEvent","error","JSON","stringify","changeStateArgs","_changeState"],"mappings":";;;;;;AAAA,eAAe,UAASA,KAAT,EAAgB;AAC7B;;;;AAD6B,MAKvBC,YALuB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAM3B;;AACA;;;;;;;;;AAP2B,qCAgBZ;AACb,cAAM,IAAIC,KAAJ,CAAU,uEAAV,CAAN;AACD,OAlB0B,CAoB3B;;AACA;;;;;;;;;AArB2B;AAAA;AAAA,oCA6BN;AAAA;;AAAA,0CAANC,IAAM;AAANA,UAAAA,IAAM;AAAA;;AACnB,YAAMC,KAAK,GAAG,OAAOD,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,GAA8BA,IAAI,CAACE,KAAL,EAA9B,GAA6CC,SAA3D;AACA,YAAMC,MAAM,GAAGC,MAAM,CAACL,IAAI,CAAC,CAAD,CAAL,CAAN,KAAoBA,IAAI,CAAC,CAAD,CAAxB,IAA+B,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAlD,GAA+DA,IAAI,CAACE,KAAL,EAA/D,GAA8EC,SAA7F;AACA,YAAMG,QAAQ,GAAG,OAAON,IAAI,CAAC,CAAD,CAAX,KAAmB,UAAnB,GAAgCA,IAAI,CAACE,KAAL,EAAhC,GAA+CC,SAAhE;;AAEA,YAAI,OAAO,KAAKI,oBAAZ,KAAqC,UAArC,IAAmD,CAAC,KAAKA,oBAAL,CAA0BN,KAA1B,EAAiCG,MAAjC,CAAxD,EAAkG;AAChG,cAAIE,QAAJ,EAAc;AACZA,YAAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACD;;AACD;AACD;;AAED,YAAME,IAAI,GAAG;AACXC,UAAAA,KAAK,EAAEL,MAAM,IAAIA,MAAM,CAACK,KADb;AAEXR,UAAAA,KAAK,EAALA;AAFW,SAAb;AAKA,YAAMS,eAAe,GAAG,CAACF,IAAI,CAACC,KAAN,EAAaR,KAAb,EACrBU,MADqB,CACdC,OADc,EAErBC,IAFqB,CAEhB,GAFgB,EAGrBC,KAHqB,CAGf,GAHe,EAGV;AAHU,SAIrBC,GAJqB,CAIjB,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQC,WAAR,KAAwBD,IAAI,CAACE,MAAL,CAAY,CAAZ,CAA5B;AAAA,SAJa,EAKrBL,IALqB,CAKhB,EALgB,CAAxB;AAOA,YAAMM,UAAU,GAAG,IAAIC,WAAJ,CAAgB,KAAKC,OAAL,sBAA2BX,eAA3B,EAAhB,EAA+D;AAChFY,UAAAA,OAAO,EAAE,IADuE;AAEhFC,UAAAA,UAAU,EAAE,IAFoE;AAGhFnB,UAAAA,MAAM,EAANA;AAHgF,SAA/D,CAAnB;AAMA,YAAMoB,UAAU,GAAIpB,MAAM,IAAIA,MAAM,CAACqB,aAAlB,IAAoC,KAAKC,OAA5D;AACA,YAAMC,QAAQ,GAAG,CAACH,UAAU,CAACI,aAAX,CAAyBT,UAAzB,CAAlB;;AAEA,YAAIQ,QAAJ,EAAc;AACZ,cAAIrB,QAAJ,EAAc;AACZ,gBAAMuB,KAAK,GAAG,IAAI9B,KAAJ,2BAA6B+B,IAAI,CAACC,SAAL,CAAevB,IAAf,CAA7B,0BAAd;AACAqB,YAAAA,KAAK,CAACF,QAAN,GAAiB,IAAjB;AACArB,YAAAA,QAAQ,CAACuB,KAAD,CAAR;AACD;AACF,SAND,MAMO;AACL,cAAMG,eAAe,GAAG,CAAC/B,KAAD,EAAQG,MAAR,EAAgBO,MAAhB,CAAuBC,OAAvB,CAAxB;;AACA,eAAKqB,YAAL,gCAAqBD,eAArB,UAAsC,YAAM;AAC1CR,YAAAA,UAAU,CAACI,aAAX,CACE,IAAIR,WAAJ,CAAgB,KAAI,CAACC,OAAL,qBAA0BX,eAA1B,EAAhB,EAA8D;AAC5DY,cAAAA,OAAO,EAAE,IADmD;AAE5DC,cAAAA,UAAU,EAAE,IAFgD;AAG5DnB,cAAAA,MAAM,EAANA;AAH4D,aAA9D,CADF;;AAOA,gBAAIE,QAAJ,EAAc;AACZA,cAAAA,QAAQ;AACT;AACF,WAXD;AAYD;AACF;AAED;;;;;;;;;;;;AArF2B;;AAAA;AAAA,IAKFT,KALE;AAkG7B;;;;;;;;;;;;AAWA,SAAOC,YAAP;AACD","sourcesContent":["export default function(ToMix) {\n  /**\n   * Mix-in class to manage events associated with states.\n   * @class EventedState\n   */\n  class EventedState extends ToMix {\n    // eslint-disable-next-line jsdoc/check-param-names\n    /**\n     * The internal implementation for {@link EventedState#changeState `.changeState()`}, performing actual change in state.\n     * @param {string} [state] The new state. Can be an omitted, which means toggling.\n     * @param {Object} [detail]\n     *   The object that should be put to event details that is fired before/after changing state.\n     *   Can have a `group` property, which specifies what state to be changed.\n     * @param {EventedState~changeStateCallback} callback The callback called once changing state is finished or is canceled.\n     * @private\n     */\n    _changeState() {\n      throw new Error('_changeState() should be overriden to perform actual change in state.');\n    }\n\n    // eslint-disable-next-line jsdoc/check-param-names\n    /**\n     * Changes the state of this component.\n     * @param {string} [state] The new state. Can be an omitted, which means toggling.\n     * @param {Object} [detail]\n     *   The object that should be put to event details that is fired before/after changing state.\n     *   Can have a `group` property, which specifies what state to be changed.\n     * @param {EventedState~changeStateCallback} [callback] The callback called once changing state is finished or is canceled.\n     */\n    changeState(...args) {\n      const state = typeof args[0] === 'string' ? args.shift() : undefined;\n      const detail = Object(args[0]) === args[0] && typeof args[0] !== 'function' ? args.shift() : undefined;\n      const callback = typeof args[0] === 'function' ? args.shift() : undefined;\n\n      if (typeof this.shouldStateBeChanged === 'function' && !this.shouldStateBeChanged(state, detail)) {\n        if (callback) {\n          callback(null, true);\n        }\n        return;\n      }\n\n      const data = {\n        group: detail && detail.group,\n        state,\n      };\n\n      const eventNameSuffix = [data.group, state]\n        .filter(Boolean)\n        .join('-')\n        .split('-') // Group or state may contain hyphen\n        .map(item => item[0].toUpperCase() + item.substr(1))\n        .join('');\n\n      const eventStart = new CustomEvent(this.options[`eventBefore${eventNameSuffix}`], {\n        bubbles: true,\n        cancelable: true,\n        detail,\n      });\n\n      const fireOnNode = (detail && detail.delegatorNode) || this.element;\n      const canceled = !fireOnNode.dispatchEvent(eventStart);\n\n      if (canceled) {\n        if (callback) {\n          const error = new Error(`Changing state (${JSON.stringify(data)}) has been canceled.`);\n          error.canceled = true;\n          callback(error);\n        }\n      } else {\n        const changeStateArgs = [state, detail].filter(Boolean);\n        this._changeState(...changeStateArgs, () => {\n          fireOnNode.dispatchEvent(\n            new CustomEvent(this.options[`eventAfter${eventNameSuffix}`], {\n              bubbles: true,\n              cancelable: true,\n              detail,\n            })\n          );\n          if (callback) {\n            callback();\n          }\n        });\n      }\n    }\n\n    /**\n     * Tests if change in state should happen or not.\n     * Classes inheriting {@link EventedState `EventedState`} should override this function.\n     * @function EventedState#shouldStateBeChanged\n     * @param {string} [state] The new state. Can be an omitted, which means toggling.\n     * @param {Object} [detail]\n     *   The object that should be put to event details that is fired before/after changing state.\n     *   Can have a `group` property, which specifies what state to be changed.\n     * @returns {boolean}\n     *   `false` if change in state shouldn't happen, e.g. when the given new state is the same as the current one.\n     */\n  }\n\n  /**\n   * The callback called once changing state is finished or is canceled.\n   * @callback EventedState~changeStateCallback\n   * @param {Error} error\n   *   An error object with `true` in its `canceled` property if changing state is canceled.\n   *   Cancellation happens if the handler of a custom event, that is fired before changing state happens,\n   *   calls `.preventDefault()` against the event.\n   * @param {boolean} keptState\n   *   `true` if the call to {@link EventedState#changeState `.changeState()`} didn't cause actual change in state.\n   */\n\n  return EventedState;\n}\n"]},"metadata":{},"sourceType":"module"}