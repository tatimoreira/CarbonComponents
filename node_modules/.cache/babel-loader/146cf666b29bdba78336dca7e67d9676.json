{"ast":null,"code":"import { Children } from 'react';\nimport createChainableTypeChecker from './tools/createChainableTypeChecker';\nimport getDisplayName from './tools/getDisplayName';\n/**\n * `childrenOfType` is used for asserting that children of a given React\n * component are only of a given type. Currently, this supports React elements,\n * Stateless Functional Components, and Class-based components.\n *\n * This prop validator also supports chaining through `isRequired`\n */\n\nvar childrenOfType = function childrenOfType(expectedChildType) {\n  var expectedDisplayName = getDisplayName( // Support both React elements and components by using `type` if it exists\n  expectedChildType.type || expectedChildType);\n\n  var validate = function validate(props, propName, componentName) {\n    Children.forEach(props[propName], function (child) {\n      var childDisplayName = getDisplayName(child.type);\n\n      if (child.type !== expectedChildType.type && child.type !== expectedChildType) {\n        throw new Error(\"Invalid prop `children` of type `\".concat(childDisplayName, \"` \") + \"supplied to `\".concat(componentName, \"`, expected each child to be a \") + \"`\".concat(expectedDisplayName, \"` component.\"));\n      }\n    });\n  };\n\n  return createChainableTypeChecker(validate);\n};\n\nexport default childrenOfType;","map":null,"metadata":{},"sourceType":"module"}