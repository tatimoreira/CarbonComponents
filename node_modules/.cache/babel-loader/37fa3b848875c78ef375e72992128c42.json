{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nexport default function (ToMix) {\n  /**\n   * Mix-in class to instantiate components by searching for their root elements.\n   * @class InitComponentBySearch\n   */\n  var InitComponentBySearch =\n  /*#__PURE__*/\n  function (_ToMix) {\n    _inherits(InitComponentBySearch, _ToMix);\n\n    function InitComponentBySearch() {\n      _classCallCheck(this, InitComponentBySearch);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(InitComponentBySearch).apply(this, arguments));\n    }\n\n    _createClass(InitComponentBySearch, null, [{\n      key: \"init\",\n\n      /**\n       * Instantiates component in the given node.\n       * If the given element indicates that it's an component of this class, instantiates it.\n       * Otherwise, instantiates components by searching for components in the given node.\n       * @param {Node} target The DOM node to instantiate components in. Should be a document or an element.\n       * @param {Object} [options] The component options.\n       * @param {boolean} [options.selectorInit] The CSS selector to find components.\n       */\n      value: function init() {\n        var _this = this;\n\n        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var effectiveOptions = Object.assign(Object.create(this.options), options);\n\n        if (!target || target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n          throw new TypeError('DOM document or DOM element should be given to search for and initialize this widget.');\n        }\n\n        if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n          this.create(target, options);\n        } else {\n          _toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit)).forEach(function (element) {\n            return _this.create(element, options);\n          });\n        }\n      }\n    }]);\n\n    return InitComponentBySearch;\n  }(ToMix);\n\n  return InitComponentBySearch;\n}","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/globals/js/mixins/init-component-by-search.js"],"names":["ToMix","InitComponentBySearch","target","document","options","effectiveOptions","Object","assign","create","nodeType","Node","ELEMENT_NODE","DOCUMENT_NODE","TypeError","matches","selectorInit","querySelectorAll","forEach","element"],"mappings":";;;;;;AAAA,eAAe,UAASA,KAAT,EAAgB;AAC7B;;;;AAD6B,MAKvBC,qBALuB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAM3B;;;;;;;;AAN2B,6BAckB;AAAA;;AAAA,YAAjCC,MAAiC,uEAAxBC,QAAwB;AAAA,YAAdC,OAAc,uEAAJ,EAAI;AAC3C,YAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAc,KAAKJ,OAAnB,CAAd,EAA2CA,OAA3C,CAAzB;;AACA,YAAI,CAACF,MAAD,IAAYA,MAAM,CAACO,QAAP,KAAoBC,IAAI,CAACC,YAAzB,IAAyCT,MAAM,CAACO,QAAP,KAAoBC,IAAI,CAACE,aAAlF,EAAkG;AAChG,gBAAM,IAAIC,SAAJ,CAAc,uFAAd,CAAN;AACD;;AACD,YAAIX,MAAM,CAACO,QAAP,KAAoBC,IAAI,CAACC,YAAzB,IAAyCT,MAAM,CAACY,OAAP,CAAeT,gBAAgB,CAACU,YAAhC,CAA7C,EAA4F;AAC1F,eAAKP,MAAL,CAAYN,MAAZ,EAAoBE,OAApB;AACD,SAFD,MAEO;AACL,6BAAIF,MAAM,CAACc,gBAAP,CAAwBX,gBAAgB,CAACU,YAAzC,CAAJ,EAA4DE,OAA5D,CAAoE,UAAAC,OAAO;AAAA,mBAAI,KAAI,CAACV,MAAL,CAAYU,OAAZ,EAAqBd,OAArB,CAAJ;AAAA,WAA3E;AACD;AACF;AAxB0B;;AAAA;AAAA,IAKOJ,KALP;;AA0B7B,SAAOC,qBAAP;AACD","sourcesContent":["export default function(ToMix) {\n  /**\n   * Mix-in class to instantiate components by searching for their root elements.\n   * @class InitComponentBySearch\n   */\n  class InitComponentBySearch extends ToMix {\n    /**\n     * Instantiates component in the given node.\n     * If the given element indicates that it's an component of this class, instantiates it.\n     * Otherwise, instantiates components by searching for components in the given node.\n     * @param {Node} target The DOM node to instantiate components in. Should be a document or an element.\n     * @param {Object} [options] The component options.\n     * @param {boolean} [options.selectorInit] The CSS selector to find components.\n     */\n    static init(target = document, options = {}) {\n      const effectiveOptions = Object.assign(Object.create(this.options), options);\n      if (!target || (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE)) {\n        throw new TypeError('DOM document or DOM element should be given to search for and initialize this widget.');\n      }\n      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n        this.create(target, options);\n      } else {\n        [...target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, options));\n      }\n    }\n  }\n  return InitComponentBySearch;\n}\n"]},"metadata":{},"sourceType":"module"}