{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport TableRow from '../TableRow';\n/**\n * Adds striping to TableRows if the `even` prop wasn’t explicitly set.\n * @param {Array} rows React elements that are children of the `<TableBody>`.\n * @returns {Array} The updated child elements.\n */\n\nvar handleRowStriping = function handleRowStriping(rows) {\n  var count = 0;\n  return rows.map(function (child) {\n    // Only make changes if it's a TableRow\n    if (child.type === TableRow) {\n      // manually increase the TableRow count\n      count++; // Don’t override user-set `even` prop\n\n      var even = 'even' in child.props ? child.props.even : count % 2 === 1; // Return a clone of the element with the `even` prop set.\n\n      return React.cloneElement(child, {\n        even: even\n      });\n    }\n\n    return child;\n  });\n};\n\nvar TableBody = function TableBody(props) {\n  var children = props.children,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"children\", \"className\"]);\n\n  var tableBodyClasses = classNames(className, 'bx--table-body');\n  var childArray = React.Children.toArray(children);\n  var childrenWithProps = handleRowStriping(childArray);\n  return React.createElement(\"tbody\", _extends({}, other, {\n    className: tableBodyClasses\n  }), childrenWithProps);\n};\n\nTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nexport default TableBody;","map":null,"metadata":{},"sourceType":"module"}