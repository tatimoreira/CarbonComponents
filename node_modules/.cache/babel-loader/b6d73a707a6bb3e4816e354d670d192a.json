{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar TextInput =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(TextInput, _mixin);\n\n  /**\n   * Text Input.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element - The element functioning as a text field.\n   */\n  function TextInput(_element, options) {\n    var _this;\n\n    _classCallCheck(this, TextInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextInput).call(this, _element, options));\n\n    _this._setIconVisibility = function (_ref) {\n      var iconVisibilityOn = _ref.iconVisibilityOn,\n          iconVisibilityOff = _ref.iconVisibilityOff,\n          passwordIsVisible = _ref.passwordIsVisible;\n\n      if (passwordIsVisible) {\n        iconVisibilityOn.setAttribute('hidden', true);\n        iconVisibilityOff.removeAttribute('hidden');\n        return;\n      }\n\n      iconVisibilityOn.removeAttribute('hidden');\n      iconVisibilityOff.setAttribute('hidden', true);\n    };\n\n    _this._toggle = function (_ref2) {\n      var element = _ref2.element,\n          button = _ref2.button;\n      // toggle action must come before querying the classList\n      element.classList.toggle(_this.options.passwordIsVisible);\n      var passwordIsVisible = element.classList.contains(_this.options.passwordIsVisible);\n      var iconVisibilityOn = button.querySelector(_this.options.svgIconVisibilityOn);\n      var iconVisibilityOff = button.querySelector(_this.options.svgIconVisibilityOff);\n      var input = element.querySelector(_this.options.selectorPasswordField);\n\n      _this._setIconVisibility({\n        iconVisibilityOn: iconVisibilityOn,\n        iconVisibilityOff: iconVisibilityOff,\n        passwordIsVisible: passwordIsVisible\n      });\n\n      input.type = passwordIsVisible ? 'text' : 'password';\n    };\n\n    _this.manage(on(_this.element, 'click', function (event) {\n      var toggleVisibilityButton = eventMatches(event, _this.options.selectorPasswordVisibilityButton);\n\n      if (toggleVisibilityButton) {\n        _this._toggle({\n          element: _element,\n          button: toggleVisibilityButton\n        });\n      }\n    }));\n\n    return _this;\n  }\n  /**\n   *\n   * @param {Object} obj - Object containing selectors and visibility status\n   * @param {HTMLElement} obj.iconVisibilityOn - The element functioning as\n   * the SVG icon for visibility on\n   * @param {HTMLElement} obj.iconVisibilityOff - The element functioning as\n   * the SVG icon for visibility off\n   * @param {boolean} obj.passwordIsVisible - The visibility of the password in the\n   * input field\n   */\n\n\n  _createClass(TextInput, null, [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     *\n     * If `options` is specified in the constructor,\n     * {@linkcode TextInput.create .create()},\n     * or {@linkcode TextInput.init .init()},\n     * properties in this object are overriden for the instance being\n     * created and how {@linkcode TextInput.init .init()} works.\n     * @property {string} selectorInit The CSS selector to find text input UIs.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-text-input]',\n        selectorPasswordField: \".\".concat(prefix, \"--text-input[data-toggle-password-visibility]\"),\n        selectorPasswordVisibilityButton: \".\".concat(prefix, \"--text-input--password__visibility\"),\n        passwordIsVisible: \"\".concat(prefix, \"--text-input--password-visible\"),\n        svgIconVisibilityOn: 'svg.icon--visibility-on',\n        svgIconVisibilityOff: 'svg.icon--visibility-off'\n      };\n    }\n    /**\n     * The map associating DOM element and text input UI instance.\n     * @type {WeakMap}\n     */\n\n  }]);\n\n  return TextInput;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nTextInput.components = new WeakMap();\nexport { TextInput as default };","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/text-input/text-input.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","eventMatches","on","TextInput","element","options","_setIconVisibility","iconVisibilityOn","iconVisibilityOff","passwordIsVisible","setAttribute","removeAttribute","_toggle","button","classList","toggle","contains","querySelector","svgIconVisibilityOn","svgIconVisibilityOff","input","selectorPasswordField","type","manage","event","toggleVisibilityButton","selectorPasswordVisibilityButton","prefix","selectorInit","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nexport default class TextInput extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Text Input.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element - The element functioning as a text field.\n   */\n  constructor(element, options) {\n    super(element, options);\n    this.manage(\n      on(this.element, 'click', event => {\n        const toggleVisibilityButton = eventMatches(event, this.options.selectorPasswordVisibilityButton);\n        if (toggleVisibilityButton) {\n          this._toggle({ element, button: toggleVisibilityButton });\n        }\n      })\n    );\n  }\n\n  /**\n   *\n   * @param {Object} obj - Object containing selectors and visibility status\n   * @param {HTMLElement} obj.iconVisibilityOn - The element functioning as\n   * the SVG icon for visibility on\n   * @param {HTMLElement} obj.iconVisibilityOff - The element functioning as\n   * the SVG icon for visibility off\n   * @param {boolean} obj.passwordIsVisible - The visibility of the password in the\n   * input field\n   */\n  _setIconVisibility = ({ iconVisibilityOn, iconVisibilityOff, passwordIsVisible }) => {\n    if (passwordIsVisible) {\n      iconVisibilityOn.setAttribute('hidden', true);\n      iconVisibilityOff.removeAttribute('hidden');\n      return;\n    }\n    iconVisibilityOn.removeAttribute('hidden');\n    iconVisibilityOff.setAttribute('hidden', true);\n  };\n\n  /**\n   * Toggles the visibility of the password in the input field and changes the\n   * SVG icon indicating password visibility\n   * @param {Object} obj - The elements that can change in the component\n   * @param {HTMLElement} obj.element - The element functioning as a text field\n   * @param {HTMLElement} obj.button - The button toggling password visibility\n   */\n  _toggle = ({ element, button }) => {\n    // toggle action must come before querying the classList\n    element.classList.toggle(this.options.passwordIsVisible);\n    const passwordIsVisible = element.classList.contains(this.options.passwordIsVisible);\n    const iconVisibilityOn = button.querySelector(this.options.svgIconVisibilityOn);\n    const iconVisibilityOff = button.querySelector(this.options.svgIconVisibilityOff);\n    const input = element.querySelector(this.options.selectorPasswordField);\n    this._setIconVisibility({\n      iconVisibilityOn,\n      iconVisibilityOff,\n      passwordIsVisible,\n    });\n    input.type = passwordIsVisible ? 'text' : 'password';\n  };\n\n  /**\n   * The component options.\n   *\n   * If `options` is specified in the constructor,\n   * {@linkcode TextInput.create .create()},\n   * or {@linkcode TextInput.init .init()},\n   * properties in this object are overriden for the instance being\n   * created and how {@linkcode TextInput.init .init()} works.\n   * @property {string} selectorInit The CSS selector to find text input UIs.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-text-input]',\n      selectorPasswordField: `.${prefix}--text-input[data-toggle-password-visibility]`,\n      selectorPasswordVisibilityButton: `.${prefix}--text-input--password__visibility`,\n      passwordIsVisible: `${prefix}--text-input--password-visible`,\n      svgIconVisibilityOn: 'svg.icon--visibility-on',\n      svgIconVisibilityOff: 'svg.icon--visibility-off',\n    };\n  }\n\n  /**\n   * The map associating DOM element and text input UI instance.\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n}\n"]},"metadata":{},"sourceType":"module"}