{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @param {Array} a An array.\n * @returns {Array} The flattened version of the given array.\n */\nfunction flatten(a) {\n  return a.reduce(function (result, item) {\n    if (Array.isArray(item)) {\n      result.push.apply(result, _toConsumableArray(flatten(item)));\n    } else {\n      result.push(item);\n    }\n\n    return result;\n  }, []);\n}\n/**\n * An interface for defining mix-in classes. Used with {@link mixin}.\n * @function mixinfn\n * @param {Class} ToMix The class to mix.\n * @returns {Class} The class mixed-in with the given ToMix class.\n */\n\n/**\n * @function mixin\n * @param {...mixinfn} mixinfns The functions generating mix-ins.\n * @returns {Class} The class generated with the given mix-ins.\n */\n\n\nexport default function mixin() {\n  for (var _len = arguments.length, mixinfns = new Array(_len), _key = 0; _key < _len; _key++) {\n    mixinfns[_key] = arguments[_key];\n  }\n\n  return flatten(mixinfns).reduce(function (Class, mixinfn) {\n    return mixinfn(Class);\n  },\n  /*#__PURE__*/\n  function () {\n    function _class() {\n      _classCallCheck(this, _class);\n    }\n\n    return _class;\n  }());\n}","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/globals/js/misc/mixin.js"],"names":["flatten","a","reduce","result","item","Array","isArray","push","mixin","mixinfns","Class","mixinfn"],"mappings":";;;AAAA;;;;AAIA,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,SAAOA,CAAC,CAACC,MAAF,CAAS,UAACC,MAAD,EAASC,IAAT,EAAkB;AAChC,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvBD,MAAAA,MAAM,CAACI,IAAP,OAAAJ,MAAM,qBAASH,OAAO,CAACI,IAAD,CAAhB,EAAN;AACD,KAFD,MAEO;AACLD,MAAAA,MAAM,CAACI,IAAP,CAAYH,IAAZ;AACD;;AACD,WAAOD,MAAP;AACD,GAPM,EAOJ,EAPI,CAAP;AAQD;AAED;;;;;;;AAOA;;;;;;;AAKA,eAAe,SAASK,KAAT,GAA4B;AAAA,oCAAVC,QAAU;AAAVA,IAAAA,QAAU;AAAA;;AACzC,SAAOT,OAAO,CAACS,QAAD,CAAP,CAAkBP,MAAlB,CAAyB,UAACQ,KAAD,EAAQC,OAAR;AAAA,WAAoBA,OAAO,CAACD,KAAD,CAA3B;AAAA,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,MAAP;AACD","sourcesContent":["/**\n * @param {Array} a An array.\n * @returns {Array} The flattened version of the given array.\n */\nfunction flatten(a) {\n  return a.reduce((result, item) => {\n    if (Array.isArray(item)) {\n      result.push(...flatten(item));\n    } else {\n      result.push(item);\n    }\n    return result;\n  }, []);\n}\n\n/**\n * An interface for defining mix-in classes. Used with {@link mixin}.\n * @function mixinfn\n * @param {Class} ToMix The class to mix.\n * @returns {Class} The class mixed-in with the given ToMix class.\n */\n\n/**\n * @function mixin\n * @param {...mixinfn} mixinfns The functions generating mix-ins.\n * @returns {Class} The class generated with the given mix-ins.\n */\nexport default function mixin(...mixinfns) {\n  return flatten(mixinfns).reduce((Class, mixinfn) => mixinfn(Class), class {});\n}\n"]},"metadata":{},"sourceType":"module"}