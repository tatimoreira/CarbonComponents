{"ast":null,"code":"import _typeof2 from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/typeof\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { iconChevronLeft, iconChevronRight } from 'carbon-icons';\nimport Icon from '../Icon';\nimport Select from '../Select';\nimport SelectItem from '../SelectItem';\nimport { equals } from '../../tools/array';\nvar instanceId = 0;\n\nvar PaginationV2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PaginationV2, _Component);\n\n  function PaginationV2(props) {\n    var _this;\n\n    _classCallCheck(this, PaginationV2);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaginationV2).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleSizeChange\", function (evt) {\n      var pageSize = Number(evt.target.value);\n\n      _this.setState({\n        pageSize: pageSize,\n        page: 1\n      });\n\n      _this.props.onChange({\n        page: 1,\n        pageSize: pageSize\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handlePageChange\", function (evt) {\n      _this.setState({\n        page: evt.target.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handlePageInputChange\", function (evt) {\n      var page = Number(evt.target.value);\n\n      if (page > 0 && page <= Math.max(Math.ceil(_this.props.totalItems / _this.state.pageSize), 1)) {\n        _this.setState({\n          page: page\n        });\n\n        _this.props.onChange({\n          page: page,\n          pageSize: _this.state.pageSize\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"incrementPage\", function () {\n      var page = _this.state.page + 1;\n\n      _this.setState({\n        page: page\n      });\n\n      _this.props.onChange({\n        page: page,\n        pageSize: _this.state.pageSize\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"decrementPage\", function () {\n      var page = _this.state.page - 1;\n\n      _this.setState({\n        page: page\n      });\n\n      _this.props.onChange({\n        page: page,\n        pageSize: _this.state.pageSize\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"renderSelectItems\", function (total) {\n      var counter = 1;\n      var itemArr = [];\n\n      while (counter <= total) {\n        itemArr.push(React.createElement(SelectItem, {\n          key: counter,\n          value: counter,\n          text: String(counter)\n        }));\n        counter++;\n      }\n\n      return itemArr;\n    });\n\n    var _this$props = _this.props,\n        pageSizes = _this$props.pageSizes,\n        _page = _this$props.page,\n        _pageSize = _this$props.pageSize;\n    _this.state = {\n      page: _page,\n      pageSize: _pageSize && pageSizes.includes(_pageSize) ? _pageSize : pageSizes[0],\n      prevPageSizes: pageSizes,\n      prevPage: _page,\n      prevPageSize: _pageSize\n    };\n    _this.uniqueId = ++instanceId;\n    return _this;\n  }\n\n  _createClass(PaginationV2, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          backwardText = _this$props2.backwardText,\n          className = _this$props2.className,\n          forwardText = _this$props2.forwardText,\n          id = _this$props2.id,\n          itemsPerPageText = _this$props2.itemsPerPageText,\n          itemsPerPageFollowsText = _this$props2.itemsPerPageFollowsText,\n          itemRangeText = _this$props2.itemRangeText,\n          pageRangeText = _this$props2.pageRangeText,\n          pageSize = _this$props2.pageSize,\n          pageSizes = _this$props2.pageSizes,\n          itemText = _this$props2.itemText,\n          pageText = _this$props2.pageText,\n          pageNumberText = _this$props2.pageNumberText,\n          pagesUnknown = _this$props2.pagesUnknown,\n          isLastPage = _this$props2.isLastPage,\n          pageInputDisabled = _this$props2.pageInputDisabled,\n          totalItems = _this$props2.totalItems,\n          onChange = _this$props2.onChange,\n          pageNumber = _this$props2.page,\n          other = _objectWithoutProperties(_this$props2, [\"backwardText\", \"className\", \"forwardText\", \"id\", \"itemsPerPageText\", \"itemsPerPageFollowsText\", \"itemRangeText\", \"pageRangeText\", \"pageSize\", \"pageSizes\", \"itemText\", \"pageText\", \"pageNumberText\", \"pagesUnknown\", \"isLastPage\", \"pageInputDisabled\", \"totalItems\", \"onChange\", \"page\"]);\n\n      var statePage = this.state.page;\n      var statePageSize = this.state.pageSize;\n      var classNames = classnames('bx--pagination', className);\n      var backButtonClasses = classnames('bx--pagination__button', 'bx--pagination__button--backward', {\n        'bx--pagination__button--no-index': pageInputDisabled\n      });\n      var inputId = id || this.uniqueId;\n      var totalPages = Math.max(Math.ceil(totalItems / statePageSize), 1);\n      var selectItems = this.renderSelectItems(totalPages);\n      return React.createElement(\"div\", _extends({\n        className: classNames\n      }, other), React.createElement(\"div\", {\n        className: \"bx--pagination__left\"\n      }, React.createElement(\"span\", {\n        className: \"bx--pagination__text\"\n      }, itemsPerPageFollowsText || itemsPerPageText), React.createElement(Select, {\n        id: \"bx-pagination-select-\".concat(inputId),\n        labelText: itemsPerPageText,\n        hideLabel: true,\n        inline: true,\n        onChange: this.handleSizeChange,\n        value: statePageSize\n      }, pageSizes.map(function (size) {\n        return React.createElement(SelectItem, {\n          key: size,\n          value: size,\n          text: String(size)\n        });\n      })), React.createElement(\"span\", {\n        className: \"bx--pagination__text\"\n      }, \"\\xA0|\\xA0\\xA0\", pagesUnknown ? itemText(statePageSize * (statePage - 1) + 1, statePage * statePageSize) : itemRangeText(Math.min(statePageSize * (statePage - 1) + 1, totalItems), Math.min(statePage * statePageSize, totalItems), totalItems))), React.createElement(\"div\", {\n        className: \"bx--pagination__right bx--pagination--inline\"\n      }, React.createElement(\"span\", {\n        className: \"bx--pagination__text\"\n      }, pagesUnknown ? pageText(statePage) : pageRangeText(statePage, totalPages)), React.createElement(\"button\", {\n        className: backButtonClasses,\n        onClick: this.decrementPage,\n        disabled: this.props.disabled || statePage === 1\n      }, React.createElement(Icon, {\n        className: \"bx--pagination__button-icon\",\n        icon: iconChevronLeft,\n        description: backwardText\n      })), pageInputDisabled ? null : React.createElement(Select, {\n        id: \"bx-pagination-select-\".concat(inputId + 2),\n        labelText: itemsPerPageText,\n        hideLabel: true,\n        inline: true,\n        onChange: this.handlePageInputChange,\n        value: statePage\n      }, selectItems), React.createElement(\"button\", {\n        className: \"bx--pagination__button bx--pagination__button--forward\",\n        onClick: this.incrementPage,\n        disabled: this.props.disabled || statePage === totalPages || isLastPage\n      }, React.createElement(Icon, {\n        className: \"bx--pagination__button-icon\",\n        icon: iconChevronRight,\n        description: forwardText\n      }))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(_ref, state) {\n      var pageSizes = _ref.pageSizes,\n          page = _ref.page,\n          pageSize = _ref.pageSize;\n      var prevPageSizes = state.prevPageSizes,\n          prevPage = state.prevPage,\n          prevPageSize = state.prevPageSize,\n          currentPage = state.page,\n          currentPageSize = state.pageSize;\n      var pageSizesChanged = !equals(pageSizes, prevPageSizes);\n      var pageChanged = page !== prevPage;\n      var pageSizeChanged = pageSize !== prevPageSize;\n      return !pageSizesChanged && !pageChanged && !pageSizeChanged ? null : {\n        page: pageSizesChanged ? 1 : pageChanged ? page : currentPage,\n        pageSize: pageSizesChanged ? pageSizes[0] : pageSizeChanged ? pageSize : currentPageSize,\n        prevPageSizes: pageSizes,\n        prevPage: page,\n        prevPageSize: pageSize\n      };\n    }\n  }]);\n\n  return PaginationV2;\n}(Component);\n\n_defineProperty(PaginationV2, \"propTypes\", {\n  /**\n   * The description for the backward icon.\n   */\n  backwardText: PropTypes.string,\n\n  /**\n   * The CSS class names.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The function returning a translatable text showing where the current page is,\n   * in a manner of the range of items.\n   */\n  itemRangeText: PropTypes.func,\n\n  /**\n   * The description for the forward icon.\n   */\n  forwardText: PropTypes.string,\n\n  /**\n   * The unique ID of this component instance.\n   */\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * The translatable text indicating the number of items per page.\n   */\n  itemsPerPageText: PropTypes.string,\n\n  /**\n   * A variant of `itemsPerPageText`, with a sign indicating that the number follows, e.g. ':'.\n   */\n  itemsPerPageFollowsText: PropTypes.string,\n\n  /**\n   * A variant of `itemRangeText`, used if the total number of items is unknown.\n   */\n  itemText: PropTypes.func,\n\n  /**\n   * The callback function called when the current page changes.\n   */\n  onChange: PropTypes.func,\n  pageNumberText: PropTypes.string,\n\n  /**\n   * A function returning PII showing where the current page is.\n   */\n  pageRangeText: PropTypes.func,\n\n  /**\n   * The translatable text showing the current page.\n   */\n  pageText: PropTypes.func,\n\n  /**\n   * The choices for `pageSize`.\n   */\n  pageSizes: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n  /**\n   * The total number of items.\n   */\n  totalItems: PropTypes.number,\n\n  /**\n   * `true` if the backward/forward buttons should be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The current page.\n   */\n  page: PropTypes.number,\n\n  /**\n   * The number dictating how many items a page contains.\n   */\n  pageSize: PropTypes.number,\n\n  /**\n   * `true` if the total number of items is unknown.\n   */\n  pagesUnknown: PropTypes.bool,\n\n  /**\n   * `true` if the current page should be the last page.\n   */\n  isLastPage: PropTypes.bool,\n\n  /**\n   * `true` if the select box to change the page should be disabled.\n   */\n  pageInputDisabled: PropTypes.bool\n});\n\n_defineProperty(PaginationV2, \"defaultProps\", {\n  backwardText: 'Backward',\n  itemRangeText: function itemRangeText(min, max, total) {\n    return \"\".concat(min, \"-\").concat(max, \" of \").concat(total, \" items\");\n  },\n  forwardText: 'Forward',\n  itemsPerPageText: 'Items per page:',\n  pageNumberText: 'Page Number',\n  pageRangeText: function pageRangeText(current, total) {\n    return \"\".concat(current, \" of \").concat(total, \" pages\");\n  },\n  disabled: false,\n  page: 1,\n  pagesUnknown: false,\n  isLastPage: false,\n  pageInputDisabled: false,\n  itemText: function itemText(min, max) {\n    return \"\".concat(min, \"-\").concat(max, \" items\");\n  },\n  pageText: function pageText(page) {\n    return \"page \".concat(page);\n  }\n});\n\nexport { PaginationV2 as default };","map":null,"metadata":{},"sourceType":"module"}