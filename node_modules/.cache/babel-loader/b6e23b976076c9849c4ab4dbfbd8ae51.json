{"ast":null,"code":"var _defaultTranslations;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { iconClose } from 'carbon-icons';\nimport Icon from '../Icon';\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId;\n  var className = cx({\n    'bx--list-box__selection': true,\n    'bx--list-box__selection--multi': selectionCount\n  });\n\n  var handleOnClick = function handleOnClick(event) {\n    // If we have a mult-select badge, clicking it shouldn't open the menu back\n    // up. However, if we have a clear badge then we want the click to have this\n    // behavior.\n    if (selectionCount) {\n      event.stopPropagation();\n    }\n\n    clearSelection(event);\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(event) {\n    // When a user hits ENTER, we'll clear the selection\n    if (event.keyCode === 13) {\n      clearSelection(event);\n    }\n  };\n\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  return React.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: \"0\",\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    title: description\n  }, selectionCount, React.createElement(Icon, {\n    icon: iconClose,\n    description: description,\n    focusable: \"false\"\n  }));\n};\n\nexport var translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: PropTypes.func.isRequired,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: PropTypes.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: PropTypes.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nexport default ListBoxSelection;","map":null,"metadata":{},"sourceType":"module"}