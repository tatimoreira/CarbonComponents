{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\n\nvar CodeSnippet =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(CodeSnippet, _mixin);\n\n  /**\n   * CodeSnippet UI.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a CodeSnippet UI.\n   */\n  function CodeSnippet(element, options) {\n    var _this;\n\n    _classCallCheck(this, CodeSnippet);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CodeSnippet).call(this, element, options));\n\n    _this._initCodeSnippet();\n\n    _this.element.querySelector(_this.options.classExpandBtn).addEventListener('click', function (evt) {\n      return _this._handleClick(evt);\n    });\n\n    return _this;\n  }\n\n  _createClass(CodeSnippet, [{\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      var expandBtn = this.element.querySelector(this.options.classExpandText);\n      this.element.classList.toggle(this.options.classExpanded);\n\n      if (this.element.classList.contains(this.options.classExpanded)) {\n        expandBtn.textContent = expandBtn.getAttribute(this.options.attribShowLessText);\n      } else {\n        expandBtn.textContent = expandBtn.getAttribute(this.options.attribShowMoreText);\n      }\n    }\n  }, {\n    key: \"_initCodeSnippet\",\n    value: function _initCodeSnippet() {\n      var expandBtn = this.element.querySelector(this.options.classExpandText);\n\n      if (!expandBtn) {\n        throw new TypeError('Cannot find the expand button.');\n      }\n\n      expandBtn.textContent = expandBtn.getAttribute(this.options.attribShowMoreText);\n\n      if (this.element.offsetHeight < this.options.minHeight) {\n        this.element.classList.add(this.options.classHideExpand);\n        this.element.classList.add(this.options.classExpanded);\n      }\n    }\n    /**\n     * The map associating DOM element and code snippet UI instance.\n     * @member CodeSnippet.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode CodeSnippet.create .create()},\n     * or {@linkcode CodeSnippet.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode CodeSnippet.init .init()} works.\n     * @member CodeSnippet.options\n     * @type {Object}\n     * @property {string} selectorInit The data attribute to find code snippet UIs.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-code-snippet]',\n        attribShowMoreText: 'data-show-more-text',\n        attribShowLessText: 'data-show-less-text',\n        minHeight: 288,\n        classExpanded: \"\".concat(prefix, \"--snippet--expand\"),\n        classExpandBtn: \".\".concat(prefix, \"--snippet-btn--expand\"),\n        classExpandText: \".\".concat(prefix, \"--snippet-btn--text\"),\n        classHideExpand: \"\".concat(prefix, \"--snippet-btn--expand--hide\")\n      };\n    }\n  }]);\n\n  return CodeSnippet;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nCodeSnippet.components = new WeakMap();\nexport default CodeSnippet;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/code-snippet/code-snippet.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","CodeSnippet","element","options","_initCodeSnippet","querySelector","classExpandBtn","addEventListener","evt","_handleClick","expandBtn","classExpandText","classList","toggle","classExpanded","contains","textContent","getAttribute","attribShowLessText","attribShowMoreText","TypeError","offsetHeight","minHeight","add","classHideExpand","prefix","selectorInit","components","WeakMap"],"mappings":";;;;;AAAA,OAAOA,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,qBAAP,MAAkC,kDAAlC;AACA,OAAOC,OAAP,MAAoB,iCAApB;;IAEMC,W;;;;;AACJ;;;;;;;AAQA,uBAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAAA;;AAC5B,qFAAMD,OAAN,EAAeC,OAAf;;AAEA,UAAKC,gBAAL;;AACA,UAAKF,OAAL,CAAaG,aAAb,CAA2B,MAAKF,OAAL,CAAaG,cAAxC,EAAwDC,gBAAxD,CAAyE,OAAzE,EAAkF,UAAAC,GAAG;AAAA,aAAI,MAAKC,YAAL,CAAkBD,GAAlB,CAAJ;AAAA,KAArF;;AAJ4B;AAK7B;;;;mCAEc;AACb,UAAME,SAAS,GAAG,KAAKR,OAAL,CAAaG,aAAb,CAA2B,KAAKF,OAAL,CAAaQ,eAAxC,CAAlB;AACA,WAAKT,OAAL,CAAaU,SAAb,CAAuBC,MAAvB,CAA8B,KAAKV,OAAL,CAAaW,aAA3C;;AAEA,UAAI,KAAKZ,OAAL,CAAaU,SAAb,CAAuBG,QAAvB,CAAgC,KAAKZ,OAAL,CAAaW,aAA7C,CAAJ,EAAiE;AAC/DJ,QAAAA,SAAS,CAACM,WAAV,GAAwBN,SAAS,CAACO,YAAV,CAAuB,KAAKd,OAAL,CAAae,kBAApC,CAAxB;AACD,OAFD,MAEO;AACLR,QAAAA,SAAS,CAACM,WAAV,GAAwBN,SAAS,CAACO,YAAV,CAAuB,KAAKd,OAAL,CAAagB,kBAApC,CAAxB;AACD;AACF;;;uCAEkB;AACjB,UAAMT,SAAS,GAAG,KAAKR,OAAL,CAAaG,aAAb,CAA2B,KAAKF,OAAL,CAAaQ,eAAxC,CAAlB;;AACA,UAAI,CAACD,SAAL,EAAgB;AACd,cAAM,IAAIU,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAEDV,MAAAA,SAAS,CAACM,WAAV,GAAwBN,SAAS,CAACO,YAAV,CAAuB,KAAKd,OAAL,CAAagB,kBAApC,CAAxB;;AAEA,UAAI,KAAKjB,OAAL,CAAamB,YAAb,GAA4B,KAAKlB,OAAL,CAAamB,SAA7C,EAAwD;AACtD,aAAKpB,OAAL,CAAaU,SAAb,CAAuBW,GAAvB,CAA2B,KAAKpB,OAAL,CAAaqB,eAAxC;AACA,aAAKtB,OAAL,CAAaU,SAAb,CAAuBW,GAAvB,CAA2B,KAAKpB,OAAL,CAAaW,aAAxC;AACD;AACF;AAED;;;;;;;;;AAOA;;;;;;;;;wBASqB;AAAA,UACXW,MADW,GACA7B,QADA,CACX6B,MADW;AAEnB,aAAO;AACLC,QAAAA,YAAY,EAAE,qBADT;AAELP,QAAAA,kBAAkB,EAAE,qBAFf;AAGLD,QAAAA,kBAAkB,EAAE,qBAHf;AAILI,QAAAA,SAAS,EAAE,GAJN;AAKLR,QAAAA,aAAa,YAAKW,MAAL,sBALR;AAMLnB,QAAAA,cAAc,aAAMmB,MAAN,0BANT;AAOLd,QAAAA,eAAe,aAAMc,MAAN,wBAPV;AAQLD,QAAAA,eAAe,YAAKC,MAAL;AARV,OAAP;AAUD;;;;EArEuB5B,KAAK,CAACC,eAAD,EAAkBC,qBAAlB,EAAyCC,OAAzC,C;;AAAzBC,W,CA8CG0B,U,GAAa,IAAIC,OAAJ,E;AA0BtB,eAAe3B,WAAf","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\n\nclass CodeSnippet extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * CodeSnippet UI.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a CodeSnippet UI.\n   */\n\n  constructor(element, options) {\n    super(element, options);\n\n    this._initCodeSnippet();\n    this.element.querySelector(this.options.classExpandBtn).addEventListener('click', evt => this._handleClick(evt));\n  }\n\n  _handleClick() {\n    const expandBtn = this.element.querySelector(this.options.classExpandText);\n    this.element.classList.toggle(this.options.classExpanded);\n\n    if (this.element.classList.contains(this.options.classExpanded)) {\n      expandBtn.textContent = expandBtn.getAttribute(this.options.attribShowLessText);\n    } else {\n      expandBtn.textContent = expandBtn.getAttribute(this.options.attribShowMoreText);\n    }\n  }\n\n  _initCodeSnippet() {\n    const expandBtn = this.element.querySelector(this.options.classExpandText);\n    if (!expandBtn) {\n      throw new TypeError('Cannot find the expand button.');\n    }\n\n    expandBtn.textContent = expandBtn.getAttribute(this.options.attribShowMoreText);\n\n    if (this.element.offsetHeight < this.options.minHeight) {\n      this.element.classList.add(this.options.classHideExpand);\n      this.element.classList.add(this.options.classExpanded);\n    }\n  }\n\n  /**\n   * The map associating DOM element and code snippet UI instance.\n   * @member CodeSnippet.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor, {@linkcode CodeSnippet.create .create()},\n   * or {@linkcode CodeSnippet.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode CodeSnippet.init .init()} works.\n   * @member CodeSnippet.options\n   * @type {Object}\n   * @property {string} selectorInit The data attribute to find code snippet UIs.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-code-snippet]',\n      attribShowMoreText: 'data-show-more-text',\n      attribShowLessText: 'data-show-less-text',\n      minHeight: 288,\n      classExpanded: `${prefix}--snippet--expand`,\n      classExpandBtn: `.${prefix}--snippet-btn--expand`,\n      classExpandText: `.${prefix}--snippet-btn--text`,\n      classHideExpand: `${prefix}--snippet-btn--expand--hide`,\n    };\n  }\n}\n\nexport default CodeSnippet;\n"]},"metadata":{},"sourceType":"module"}