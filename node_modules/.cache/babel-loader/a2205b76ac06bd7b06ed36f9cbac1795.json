{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ToolbarSearch from '../ToolbarSearch';\nimport classNames from 'classnames';\n\nvar Toolbar = function Toolbar(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      other = _objectWithoutProperties(_ref, [\"children\", \"className\"]);\n\n  var wrapperClasses = classNames('bx--toolbar', className);\n  return React.createElement(\"div\", _extends({\n    className: wrapperClasses\n  }, other), children);\n};\n\nToolbar.propTypes = {\n  /**\n   * Specify a collection of ToolbarItem's that should render in the Toolbar\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the containing Toolbar node\n   */\n  className: PropTypes.string\n};\nexport var ToolbarItem = function ToolbarItem(_ref2) {\n  var children = _ref2.children,\n      type = _ref2.type,\n      placeHolderText = _ref2.placeHolderText;\n  var toolbarItem = type === 'search' ? React.createElement(ToolbarSearch, {\n    placeHolderText: placeHolderText\n  }) : children;\n  return toolbarItem;\n};\nToolbarItem.propTypes = {\n  /**\n   * Specify the contents of the ToolbarItem\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify the type of the ToolbarItem. The `search` type will render a\n   * `ToolbarSearch` component\n   */\n  type: PropTypes.string,\n\n  /**\n   * Specify the placeholder text for the ToolbarSearch component. Useful if\n   * `type` is set to 'search'\n   */\n  placeHolderText: PropTypes.string\n};\nToolbarItem.defaultProps = {\n  placeHolderText: 'Provide placeHolderText'\n};\nexport var ToolbarTitle = function ToolbarTitle(_ref3) {\n  var title = _ref3.title;\n  return React.createElement(\"li\", {\n    className: \"bx--toolbar-menu__title\"\n  }, title);\n};\nToolbarTitle.propTypes = {\n  /**\n   * Specify the title of the Toolbar\n   */\n  title: PropTypes.string\n};\nexport var ToolbarOption = function ToolbarOption(_ref4) {\n  var children = _ref4.children;\n  return React.createElement(\"li\", {\n    className: \"bx--toolbar-menu__option\"\n  }, children);\n};\nToolbarOption.propTypes = {\n  /**\n   * Specify the contents of the ToolbarOption\n   */\n  children: PropTypes.node\n};\nexport var ToolbarDivider = function ToolbarDivider() {\n  return React.createElement(\"hr\", {\n    className: \"bx--toolbar-menu__divider\"\n  });\n};\nexport default Toolbar;","map":null,"metadata":{},"sourceType":"module"}