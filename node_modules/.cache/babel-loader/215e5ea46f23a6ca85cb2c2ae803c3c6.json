{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { iconChevronRight } from 'carbon-icons';\nimport Icon from '../Icon';\nimport TableCell from './TableCell';\n\nvar TableExpandRow = function TableExpandRow(_ref) {\n  var ariaLabel = _ref.ariaLabel,\n      rowClassName = _ref.className,\n      children = _ref.children,\n      isExpanded = _ref.isExpanded,\n      onExpand = _ref.onExpand,\n      expandIconDescription = _ref.expandIconDescription,\n      isSelected = _ref.isSelected,\n      rest = _objectWithoutProperties(_ref, [\"ariaLabel\", \"className\", \"children\", \"isExpanded\", \"onExpand\", \"expandIconDescription\", \"isSelected\"]);\n\n  var className = cx({\n    'bx--parent-row-v2': true,\n    'bx--expandable-row-v2': isExpanded,\n    'bx--data-table-v2--selected': isSelected\n  }, rowClassName);\n  var previousValue = isExpanded ? 'collapsed' : undefined;\n  return React.createElement(\"tr\", _extends({}, rest, {\n    className: className,\n    \"data-parent-row\": true\n  }), React.createElement(TableCell, {\n    className: \"bx--table-expand-v2\",\n    \"data-previous-value\": previousValue\n  }, React.createElement(\"button\", {\n    className: \"bx--table-expand-v2__button\",\n    onClick: onExpand,\n    \"aria-label\": ariaLabel\n  }, React.createElement(Icon, {\n    className: \"bx--table-expand-v2__svg\",\n    icon: iconChevronRight,\n    description: expandIconDescription\n  }))), children);\n};\n\nTableExpandRow.propTypes = {\n  /**\n   * Specify the string read by a voice reader when the expand trigger is\n   * focused\n   */\n  ariaLabel: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node,\n\n  /**\n   * Specify whether this row is expanded or not. This helps coordinate data\n   * attributes so that `TableExpandRow` and `TableExapndedRow` work together\n   */\n  isExpanded: PropTypes.bool.isRequired,\n\n  /**\n   * Hook for when a listener initiates a request to expand the given row\n   */\n  onExpand: PropTypes.func.isRequired,\n\n  /**\n   * The description of the chevron right icon, to be put in its SVG `<title>` element.\n   */\n  expandIconDescription: PropTypes.string\n};\nexport default TableExpandRow;","map":null,"metadata":{},"sourceType":"module"}