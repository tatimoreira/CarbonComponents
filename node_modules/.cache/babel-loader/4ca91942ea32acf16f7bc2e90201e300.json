{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentByLauncher from '../../globals/js/mixins/init-component-by-launcher';\nimport eventedShowHideState from '../../globals/js/mixins/evented-show-hide-state';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar Modal =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Modal, _mixin);\n\n  /**\n   * Modal dialog.\n   * @extends CreateComponent\n   * @extends InitComponentByLauncher\n   * @extends EventedShowHideState\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a modal dialog.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown]\n   *   The name of the custom event telling that modal is sure shown\n   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden]\n   *   The name of the custom event telling that modal is sure hidden\n   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n   */\n  function Modal(element, options) {\n    var _this;\n\n    _classCallCheck(this, Modal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this, element, options));\n\n    _this._handleFocusin = function (evt) {\n      if (_this.element.classList.contains(_this.options.classVisible) && !_this.element.contains(evt.target) && _this.options.selectorsFloatingMenus.every(function (selector) {\n        return !eventMatches(evt, selector);\n      })) {\n        _this.element.focus();\n      }\n    };\n\n    _this._hookCloseActions();\n\n    return _this;\n  }\n  /**\n   * The handle for `focusin` event listener.\n   * Used for \"focus-wrap\" feature.\n   * @type {Handle}\n   * @private\n   */\n\n\n  _createClass(Modal, [{\n    key: \"createdByLauncher\",\n\n    /**\n     * A method that runs when `.init()` is called from `initComponentByLauncher`.\n     * @param {Event} evt The event fired on the launcher button.\n     */\n    value: function createdByLauncher(evt) {\n      this.show(evt);\n    }\n    /**\n     * Determines whether or not to emit events and callback function when `.changeState()` is called from `eventedState`.\n     * @param {string} state The new state.\n     * @returns {boolean} `true` if the given `state` is different from current state.\n     */\n\n  }, {\n    key: \"shouldStateBeChanged\",\n    value: function shouldStateBeChanged(state) {\n      if (state === 'shown') {\n        return !this.element.classList.contains(this.options.classVisible);\n      }\n\n      return this.element.classList.contains(this.options.classVisible);\n    }\n    /**\n     * Changes the shown/hidden state.\n     * @private\n     * @param {string} state The new state.\n     * @param {Object} detail The detail data to be included in the event that will be fired.\n     * @param {Function} callback Callback called when change in state completes.\n     */\n\n  }, {\n    key: \"_changeState\",\n    value: function _changeState(state, detail, callback) {\n      var _this2 = this;\n\n      var handleTransitionEnd;\n\n      var transitionEnd = function transitionEnd() {\n        if (handleTransitionEnd) {\n          handleTransitionEnd = _this2.unmanage(handleTransitionEnd).release();\n        }\n\n        if (state === 'shown' && _this2.element.offsetWidth > 0 && _this2.element.offsetHeight > 0) {\n          (_this2.element.querySelector(_this2.options.selectorPrimaryFocus) || _this2.element).focus();\n        }\n\n        callback();\n      };\n\n      if (this._handleFocusinListener) {\n        this._handleFocusinListener = this.unmanage(this._handleFocusinListener).release();\n      }\n\n      if (state === 'shown') {\n        var hasFocusin = 'onfocusin' in this.element.ownerDocument.defaultView;\n        var focusinEventName = hasFocusin ? 'focusin' : 'focus';\n        this._handleFocusinListener = this.manage(on(this.element.ownerDocument, focusinEventName, this._handleFocusin, !hasFocusin));\n      }\n\n      if (state === 'hidden') {\n        this.element.classList.toggle(this.options.classVisible, false);\n      } else if (state === 'shown') {\n        this.element.classList.toggle(this.options.classVisible, true);\n      }\n\n      handleTransitionEnd = this.manage(on(this.element, 'transitionend', transitionEnd));\n    }\n  }, {\n    key: \"_hookCloseActions\",\n    value: function _hookCloseActions() {\n      var _this3 = this;\n\n      this.manage(on(this.element, 'click', function (evt) {\n        var closeButton = eventMatches(evt, _this3.options.selectorModalClose);\n\n        if (closeButton) {\n          evt.delegateTarget = closeButton; // eslint-disable-line no-param-reassign\n        }\n\n        if (closeButton || evt.target === _this3.element) {\n          _this3.hide(evt);\n        }\n      }));\n\n      if (this._handleKeydownListener) {\n        this._handleKeydownListener = this.unmanage(this._handleKeydownListener).release();\n      }\n\n      this._handleKeydownListener = this.manage(on(this.element.ownerDocument.body, 'keydown', function (evt) {\n        if (evt.which === 27) {\n          evt.stopPropagation();\n\n          _this3.hide(evt);\n        }\n      }));\n    }\n    /**\n     * Handles `focusin` (or `focus` depending on browser support of `focusin`) event to do wrap-focus behavior.\n     * @param {Event} evt The event.\n     * @private\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode Modal.create .create()}, or {@linkcode Modal.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode Modal.init .init()} works.\n     * @member Modal.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS class to find modal dialogs.\n     * @property {string} [selectorModalClose] The selector to find elements that close the modal.\n     * @property {string} [selectorPrimaryFocus] The CSS selector to determine the element to put focus when modal gets open.\n     * @property {string} attribInitTarget The attribute name in the launcher buttons to find target modal dialogs.\n     * @property {string[]} [selectorsFloatingMenu]\n     *   The CSS selectors of floating menus.\n     *   Used for detecting if focus-wrap behavior should be disabled temporarily.\n     * @property {string} [classVisible] The CSS class for the visible state.\n     * @property {string} [classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n     * @property {string} [eventBeforeShown]\n     *   The name of the custom event fired before this modal is shown.\n     *   Cancellation of this event stops showing the modal.\n     * @property {string} [eventAfterShown]\n     *   The name of the custom event telling that modal is sure shown\n     *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n     * @property {string} [eventBeforeHidden]\n     *   The name of the custom event fired before this modal is hidden.\n     *   Cancellation of this event stops hiding the modal.\n     * @property {string} [eventAfterHidden]\n     *   The name of the custom event telling that modal is sure hidden\n     *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-modal]',\n        selectorModalClose: '[data-modal-close]',\n        selectorPrimaryFocus: '[data-modal-primary-focus]',\n        selectorsFloatingMenus: [\".\".concat(prefix, \"--overflow-menu-options\"), \".\".concat(prefix, \"--tooltip\"), '.flatpickr-calendar'],\n        classVisible: 'is-visible',\n        attribInitTarget: 'data-modal-target',\n        initEventNames: ['click'],\n        eventBeforeShown: 'modal-beingshown',\n        eventAfterShown: 'modal-shown',\n        eventBeforeHidden: 'modal-beinghidden',\n        eventAfterHidden: 'modal-hidden'\n      };\n    }\n  }]);\n\n  return Modal;\n}(mixin(createComponent, initComponentByLauncher, eventedShowHideState, handles));\n\nModal.components = new WeakMap();\nexport default Modal;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/modal/modal.js"],"names":["settings","mixin","createComponent","initComponentByLauncher","eventedShowHideState","handles","eventMatches","on","Modal","element","options","_handleFocusin","evt","classList","contains","classVisible","target","selectorsFloatingMenus","every","selector","focus","_hookCloseActions","show","state","detail","callback","handleTransitionEnd","transitionEnd","unmanage","release","offsetWidth","offsetHeight","querySelector","selectorPrimaryFocus","_handleFocusinListener","hasFocusin","ownerDocument","defaultView","focusinEventName","manage","toggle","closeButton","selectorModalClose","delegateTarget","hide","_handleKeydownListener","body","which","stopPropagation","prefix","selectorInit","attribInitTarget","initEventNames","eventBeforeShown","eventAfterShown","eventBeforeHidden","eventAfterHidden","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentByLauncher from '../../globals/js/mixins/init-component-by-launcher';\nimport eventedShowHideState from '../../globals/js/mixins/evented-show-hide-state';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nclass Modal extends mixin(createComponent, initComponentByLauncher, eventedShowHideState, handles) {\n  /**\n   * Modal dialog.\n   * @extends CreateComponent\n   * @extends InitComponentByLauncher\n   * @extends EventedShowHideState\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a modal dialog.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown]\n   *   The name of the custom event telling that modal is sure shown\n   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden]\n   *   The name of the custom event telling that modal is sure hidden\n   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n   */\n  constructor(element, options) {\n    super(element, options);\n    this._hookCloseActions();\n  }\n\n  /**\n   * The handle for `focusin` event listener.\n   * Used for \"focus-wrap\" feature.\n   * @type {Handle}\n   * @private\n   */\n  _handleFocusinListener;\n\n  /**\n   * The handle for `keydown` event listener.\n   * Used for \"close-on-escape-key\" feature.\n   * @type {Handle}\n   * @private\n   */\n  _handleKeydownListener;\n\n  /**\n   * A method that runs when `.init()` is called from `initComponentByLauncher`.\n   * @param {Event} evt The event fired on the launcher button.\n   */\n  createdByLauncher(evt) {\n    this.show(evt);\n  }\n\n  /**\n   * Determines whether or not to emit events and callback function when `.changeState()` is called from `eventedState`.\n   * @param {string} state The new state.\n   * @returns {boolean} `true` if the given `state` is different from current state.\n   */\n  shouldStateBeChanged(state) {\n    if (state === 'shown') {\n      return !this.element.classList.contains(this.options.classVisible);\n    }\n\n    return this.element.classList.contains(this.options.classVisible);\n  }\n\n  /**\n   * Changes the shown/hidden state.\n   * @private\n   * @param {string} state The new state.\n   * @param {Object} detail The detail data to be included in the event that will be fired.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n  _changeState(state, detail, callback) {\n    let handleTransitionEnd;\n    const transitionEnd = () => {\n      if (handleTransitionEnd) {\n        handleTransitionEnd = this.unmanage(handleTransitionEnd).release();\n      }\n      if (state === 'shown' && this.element.offsetWidth > 0 && this.element.offsetHeight > 0) {\n        (this.element.querySelector(this.options.selectorPrimaryFocus) || this.element).focus();\n      }\n      callback();\n    };\n\n    if (this._handleFocusinListener) {\n      this._handleFocusinListener = this.unmanage(this._handleFocusinListener).release();\n    }\n\n    if (state === 'shown') {\n      const hasFocusin = 'onfocusin' in this.element.ownerDocument.defaultView;\n      const focusinEventName = hasFocusin ? 'focusin' : 'focus';\n      this._handleFocusinListener = this.manage(\n        on(this.element.ownerDocument, focusinEventName, this._handleFocusin, !hasFocusin)\n      );\n    }\n\n    if (state === 'hidden') {\n      this.element.classList.toggle(this.options.classVisible, false);\n    } else if (state === 'shown') {\n      this.element.classList.toggle(this.options.classVisible, true);\n    }\n    handleTransitionEnd = this.manage(on(this.element, 'transitionend', transitionEnd));\n  }\n\n  _hookCloseActions() {\n    this.manage(\n      on(this.element, 'click', evt => {\n        const closeButton = eventMatches(evt, this.options.selectorModalClose);\n        if (closeButton) {\n          evt.delegateTarget = closeButton; // eslint-disable-line no-param-reassign\n        }\n        if (closeButton || evt.target === this.element) {\n          this.hide(evt);\n        }\n      })\n    );\n\n    if (this._handleKeydownListener) {\n      this._handleKeydownListener = this.unmanage(this._handleKeydownListener).release();\n    }\n\n    this._handleKeydownListener = this.manage(\n      on(this.element.ownerDocument.body, 'keydown', evt => {\n        if (evt.which === 27) {\n          evt.stopPropagation();\n          this.hide(evt);\n        }\n      })\n    );\n  }\n\n  /**\n   * Handles `focusin` (or `focus` depending on browser support of `focusin`) event to do wrap-focus behavior.\n   * @param {Event} evt The event.\n   * @private\n   */\n  _handleFocusin = evt => {\n    if (\n      this.element.classList.contains(this.options.classVisible) &&\n      !this.element.contains(evt.target) &&\n      this.options.selectorsFloatingMenus.every(selector => !eventMatches(evt, selector))\n    ) {\n      this.element.focus();\n    }\n  };\n\n  /**\n   * The map associating DOM element and modal instance.\n   * @member Modal.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor, {@linkcode Modal.create .create()}, or {@linkcode Modal.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode Modal.init .init()} works.\n   * @member Modal.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS class to find modal dialogs.\n   * @property {string} [selectorModalClose] The selector to find elements that close the modal.\n   * @property {string} [selectorPrimaryFocus] The CSS selector to determine the element to put focus when modal gets open.\n   * @property {string} attribInitTarget The attribute name in the launcher buttons to find target modal dialogs.\n   * @property {string[]} [selectorsFloatingMenu]\n   *   The CSS selectors of floating menus.\n   *   Used for detecting if focus-wrap behavior should be disabled temporarily.\n   * @property {string} [classVisible] The CSS class for the visible state.\n   * @property {string} [classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n   * @property {string} [eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @property {string} [eventAfterShown]\n   *   The name of the custom event telling that modal is sure shown\n   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n   * @property {string} [eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @property {string} [eventAfterHidden]\n   *   The name of the custom event telling that modal is sure hidden\n   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-modal]',\n      selectorModalClose: '[data-modal-close]',\n      selectorPrimaryFocus: '[data-modal-primary-focus]',\n      selectorsFloatingMenus: [`.${prefix}--overflow-menu-options`, `.${prefix}--tooltip`, '.flatpickr-calendar'],\n      classVisible: 'is-visible',\n      attribInitTarget: 'data-modal-target',\n      initEventNames: ['click'],\n      eventBeforeShown: 'modal-beingshown',\n      eventAfterShown: 'modal-shown',\n      eventBeforeHidden: 'modal-beinghidden',\n      eventAfterHidden: 'modal-hidden',\n    };\n  }\n}\n\nexport default Modal;\n"]},"metadata":{},"sourceType":"module"}