{"ast":null,"code":"import _typeof2 from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/typeof\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nvar InlineCheckbox =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InlineCheckbox, _React$Component);\n\n  function InlineCheckbox() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InlineCheckbox);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InlineCheckbox)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleRef\", function (el) {\n      _this.inputNode = el;\n    });\n\n    return _this;\n  }\n\n  _createClass(InlineCheckbox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.inputNode.indeterminate = this.props.indeterminate;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.indeterminate !== this.props.indeterminate) {\n        this.inputNode.indeterminate = this.props.indeterminate;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          id = _this$props.id,\n          indeterminate = _this$props.indeterminate,\n          checked = _this$props.checked,\n          disabled = _this$props.disabled,\n          ariaLabel = _this$props.ariaLabel,\n          name = _this$props.name,\n          onClick = _this$props.onClick,\n          onKeyDown = _this$props.onKeyDown;\n      var inputProps = {\n        id: id,\n        name: name,\n        onClick: onClick,\n        onKeyDown: onKeyDown,\n        className: 'bx--checkbox',\n        type: 'checkbox',\n        ref: this.handleRef,\n        checked: false,\n        disabled: disabled\n      };\n\n      if (checked) {\n        inputProps.checked = true;\n      }\n\n      if (indeterminate) {\n        inputProps.checked = false;\n        inputProps['aria-checked'] = 'mixed';\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"input\", inputProps),\n      /* eslint-disable jsx-a11y/label-has-for */\n      React.createElement(\"label\", {\n        htmlFor: id,\n        className: \"bx--checkbox-label\",\n        \"aria-label\": ariaLabel\n      }));\n    }\n  }]);\n\n  return InlineCheckbox;\n}(React.Component);\n\n_defineProperty(InlineCheckbox, \"propTypes\", {\n  /**\n   * Specify the label for the control\n   */\n  ariaLabel: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether the underlying control is checked, or not\n   */\n  checked: PropTypes.bool.isRequired,\n\n  /**\n   * Specify whether the underlying input control should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` for the underlying input control\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether the control is in an indterminate state\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * Provide a `name` for the underlying input control\n   */\n  name: PropTypes.string.isRequired,\n\n  /**\n   * Provide a handler that is invoked when a user clicks on the control\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Provide a handler that is invoked on the key down event for the control\n   */\n  onKeyDown: PropTypes.func\n});\n\nexport { InlineCheckbox as default };","map":null,"metadata":{},"sourceType":"module"}