{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\n\nvar ProgressIndicator =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(ProgressIndicator, _mixin);\n\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {Object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n  function ProgressIndicator(element, options) {\n    var _this;\n\n    _classCallCheck(this, ProgressIndicator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProgressIndicator).call(this, element, options));\n    /**\n     * The component state.\n     * @type {Object}\n     */\n\n    _this.state = {\n      /**\n       * The current step index.\n       * @type {number}\n       */\n      currentIndex: _this.getCurrent().index,\n\n      /**\n       * Total number of steps.\n       * @type {number}\n       */\n      totalSteps: _this.getSteps().length\n    };\n    return _this;\n  }\n  /**\n   * Returns all steps with details about element and index.\n   */\n\n\n  _createClass(ProgressIndicator, [{\n    key: \"getSteps\",\n    value: function getSteps() {\n      return _toConsumableArray(this.element.querySelectorAll(this.options.selectorStepElement)).map(function (element, index) {\n        return {\n          element: element,\n          index: index\n        };\n      });\n    }\n    /**\n     * Returns current step; gives detail about element and index.\n     */\n\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var currentEl = this.element.querySelector(this.options.selectorCurrent);\n      return this.getSteps().filter(function (step) {\n        return step.element === currentEl;\n      })[0];\n    }\n    /**\n     * Sets the current step.\n     * * @param {Number} new step index or use default in `this.state.currentIndex`.\n     */\n\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent() {\n      var _this2 = this;\n\n      var newCurrentStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.currentIndex;\n      var changed = false;\n\n      if (newCurrentStep !== this.state.currentIndex) {\n        this.state.currentIndex = newCurrentStep;\n        changed = true;\n      }\n\n      if (changed) {\n        this.getSteps().forEach(function (step) {\n          if (step.index < newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classComplete,\n              html: _this2._getSVGComplete()\n            });\n          }\n\n          if (step.index === newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classCurrent,\n              html: _this2._getCurrentSVG()\n            });\n          }\n\n          if (step.index > newCurrentStep) {\n            _this2._updateStep({\n              element: step.element,\n              className: _this2.options.classIncomplete,\n              html: _this2._getIncompleteSVG()\n            });\n          }\n        });\n      }\n    }\n    /**\n     * Update step with correct inline SVG and className\n     * @param {Object} args\n     * @param {Object} [args.element] target element\n     * @param {Object} [args.className] new className\n     * @param {Object} [args.html] new inline SVG to insert\n     */\n\n  }, {\n    key: \"_updateStep\",\n    value: function _updateStep(args) {\n      var element = args.element,\n          className = args.className,\n          html = args.html;\n\n      if (element.firstElementChild) {\n        element.removeChild(element.firstElementChild);\n      }\n\n      if (!element.classList.contains(className)) {\n        element.setAttribute('class', this.options.classStep);\n        element.classList.add(className);\n      }\n\n      element.insertAdjacentHTML('afterbegin', html);\n    }\n    /**\n     * Returns HTML string for an SVG used to represent a compelted step (checkmark)\n     */\n\n  }, {\n    key: \"_getSVGComplete\",\n    value: function _getSVGComplete() {\n      return \"<svg width=\\\"24px\\\" height=\\\"24px\\\" viewBox=\\\"0 0 24 24\\\">\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <polygon points=\\\"10.3 13.6 7.7 11 6.3 12.4 10.3 16.4 17.8 9 16.4 7.6\\\"></polygon>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent current step (circles, like a radio button, but not.)\n     */\n\n  }, {\n    key: \"_getCurrentSVG\",\n    value: function _getCurrentSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"6\\\"></circle>\\n      </svg>\";\n    }\n    /**\n     * Returns HTML string for an SVG used to represent incomple step (grey empty circle)\n     */\n\n  }, {\n    key: \"_getIncompleteSVG\",\n    value: function _getIncompleteSVG() {\n      return \"<svg>\\n        <circle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"12\\\"></circle>\\n      </svg>\";\n    }\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode ProgressIndicator.create .create()}, or {@linkcode ProgressIndicator.init .init()},\n     * properties in this object are overriden for the instance being created.\n     * @member ProgressIndicator.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find content switcher button set.\n     * @property {string} [selectorStepElement] The CSS selector to find step elements.\n     * @property {string} [selectorCurrent] The CSS selector to find the current step element.\n     * @property {string} [selectorIncomplete] The CSS class to find incomplete step elements.\n     * @property {string} [selectorComplete] The CSS selector to find completed step elements.\n     * @property {string} [classStep] The className for a step element.\n     * @property {string} [classComplete] The className for a completed step element.\n     * @property {string} [classCurrent] The className for the current step element.\n     * @property {string} [classIncomplete] The className for a incomplete step element.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-progress]',\n        selectorStepElement: \".\".concat(prefix, \"--progress-step\"),\n        selectorCurrent: \".\".concat(prefix, \"--progress-step--current\"),\n        selectorIncomplete: \".\".concat(prefix, \"--progress-step--incomplete\"),\n        selectorComplete: \".\".concat(prefix, \"--progress-step--complete\"),\n        classStep: \"\".concat(prefix, \"--progress-step\"),\n        classComplete: \"\".concat(prefix, \"--progress-step--complete\"),\n        classCurrent: \"\".concat(prefix, \"--progress-step--current\"),\n        classIncomplete: \"\".concat(prefix, \"--progress-step--incomplete\")\n      };\n    }\n  }]);\n\n  return ProgressIndicator;\n}(mixin(createComponent, initComponentBySearch));\n\nProgressIndicator.components = new WeakMap();\nexport default ProgressIndicator;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/progress-indicator/progress-indicator.js"],"names":["settings","mixin","createComponent","initComponentBySearch","ProgressIndicator","element","options","state","currentIndex","getCurrent","index","totalSteps","getSteps","length","querySelectorAll","selectorStepElement","map","currentEl","querySelector","selectorCurrent","filter","step","newCurrentStep","changed","forEach","_updateStep","className","classComplete","html","_getSVGComplete","classCurrent","_getCurrentSVG","classIncomplete","_getIncompleteSVG","args","firstElementChild","removeChild","classList","contains","setAttribute","classStep","add","insertAdjacentHTML","prefix","selectorInit","selectorIncomplete","selectorComplete","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\n\nclass ProgressIndicator extends mixin(createComponent, initComponentBySearch) {\n  /**\n   * ProgressIndicator.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @param {HTMLElement} element The element representing the ProgressIndicator.\n   * @param {Object} [options] The component options.\n   * @property {string} [options.selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [options.selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [options.selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [options.selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [options.classStep] The className for a step element.\n   * @property {string} [options.classComplete] The className for a completed step element.\n   * @property {string} [options.classCurrent] The className for the current step element.\n   * @property {string} [options.classIncomplete] The className for a incomplete step element.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    /**\n     * The component state.\n     * @type {Object}\n     */\n    this.state = {\n      /**\n       * The current step index.\n       * @type {number}\n       */\n      currentIndex: this.getCurrent().index,\n\n      /**\n       * Total number of steps.\n       * @type {number}\n       */\n      totalSteps: this.getSteps().length,\n    };\n  }\n\n  /**\n   * Returns all steps with details about element and index.\n   */\n  getSteps() {\n    return [...this.element.querySelectorAll(this.options.selectorStepElement)].map((element, index) => ({\n      element,\n      index,\n    }));\n  }\n\n  /**\n   * Returns current step; gives detail about element and index.\n   */\n  getCurrent() {\n    const currentEl = this.element.querySelector(this.options.selectorCurrent);\n    return this.getSteps().filter(step => step.element === currentEl)[0];\n  }\n\n  /**\n   * Sets the current step.\n   * * @param {Number} new step index or use default in `this.state.currentIndex`.\n   */\n  setCurrent(newCurrentStep = this.state.currentIndex) {\n    let changed = false;\n\n    if (newCurrentStep !== this.state.currentIndex) {\n      this.state.currentIndex = newCurrentStep;\n      changed = true;\n    }\n\n    if (changed) {\n      this.getSteps().forEach(step => {\n        if (step.index < newCurrentStep) {\n          this._updateStep({\n            element: step.element,\n            className: this.options.classComplete,\n            html: this._getSVGComplete(),\n          });\n        }\n\n        if (step.index === newCurrentStep) {\n          this._updateStep({\n            element: step.element,\n            className: this.options.classCurrent,\n            html: this._getCurrentSVG(),\n          });\n        }\n\n        if (step.index > newCurrentStep) {\n          this._updateStep({\n            element: step.element,\n            className: this.options.classIncomplete,\n            html: this._getIncompleteSVG(),\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Update step with correct inline SVG and className\n   * @param {Object} args\n   * @param {Object} [args.element] target element\n   * @param {Object} [args.className] new className\n   * @param {Object} [args.html] new inline SVG to insert\n   */\n  _updateStep(args) {\n    const { element, className, html } = args;\n\n    if (element.firstElementChild) {\n      element.removeChild(element.firstElementChild);\n    }\n\n    if (!element.classList.contains(className)) {\n      element.setAttribute('class', this.options.classStep);\n      element.classList.add(className);\n    }\n\n    element.insertAdjacentHTML('afterbegin', html);\n  }\n\n  /**\n   * Returns HTML string for an SVG used to represent a compelted step (checkmark)\n   */\n  _getSVGComplete() {\n    return `<svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\n        <circle cx=\"12\" cy=\"12\" r=\"12\"></circle>\n        <polygon points=\"10.3 13.6 7.7 11 6.3 12.4 10.3 16.4 17.8 9 16.4 7.6\"></polygon>\n      </svg>`;\n  }\n\n  /**\n   * Returns HTML string for an SVG used to represent current step (circles, like a radio button, but not.)\n   */\n  _getCurrentSVG() {\n    return `<svg>\n        <circle cx=\"12\" cy=\"12\" r=\"12\"></circle>\n        <circle cx=\"12\" cy=\"12\" r=\"6\"></circle>\n      </svg>`;\n  }\n\n  /**\n   * Returns HTML string for an SVG used to represent incomple step (grey empty circle)\n   */\n  _getIncompleteSVG() {\n    return `<svg>\n        <circle cx=\"12\" cy=\"12\" r=\"12\"></circle>\n      </svg>`;\n  }\n\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor,\n   * {@linkcode ProgressIndicator.create .create()}, or {@linkcode ProgressIndicator.init .init()},\n   * properties in this object are overriden for the instance being created.\n   * @member ProgressIndicator.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS selector to find content switcher button set.\n   * @property {string} [selectorStepElement] The CSS selector to find step elements.\n   * @property {string} [selectorCurrent] The CSS selector to find the current step element.\n   * @property {string} [selectorIncomplete] The CSS class to find incomplete step elements.\n   * @property {string} [selectorComplete] The CSS selector to find completed step elements.\n   * @property {string} [classStep] The className for a step element.\n   * @property {string} [classComplete] The className for a completed step element.\n   * @property {string} [classCurrent] The className for the current step element.\n   * @property {string} [classIncomplete] The className for a incomplete step element.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-progress]',\n      selectorStepElement: `.${prefix}--progress-step`,\n      selectorCurrent: `.${prefix}--progress-step--current`,\n      selectorIncomplete: `.${prefix}--progress-step--incomplete`,\n      selectorComplete: `.${prefix}--progress-step--complete`,\n      classStep: `${prefix}--progress-step`,\n      classComplete: `${prefix}--progress-step--complete`,\n      classCurrent: `${prefix}--progress-step--current`,\n      classIncomplete: `${prefix}--progress-step--incomplete`,\n    };\n  }\n}\n\nexport default ProgressIndicator;\n"]},"metadata":{},"sourceType":"module"}