{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Toolbar, _mixin);\n\n  /**\n   * Toolbar.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as an toolbar.\n   */\n  function Toolbar(element, options) {\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Toolbar).call(this, element, options));\n\n    if (!_this.element.dataset.tableTarget) {\n      console.warn('There is no table bound to this toolbar!'); // eslint-disable-line no-console\n    } else {\n      var boundTable = _this.element.ownerDocument.querySelector(_this.element.dataset.tableTarget);\n\n      var rowHeightBtns = _this.element.querySelector(_this.options.selectorRowHeight);\n\n      if (rowHeightBtns) {\n        _this.manage(on(rowHeightBtns, 'click', function (event) {\n          _this._handleRowHeightChange(event, boundTable);\n        })); // [...this.element.querySelectorAll(this.options.selectorRowHeight)].forEach((item) => {\n        //   item.addEventListener('click', (event) => { this._handleRowHeightChange(event, boundTable); });\n        // });\n\n      }\n    }\n\n    _this.manage(on(_this.element.ownerDocument, 'keydown', function (evt) {\n      _this._handleKeyDown(evt);\n    }));\n\n    _this.manage(on(_this.element.ownerDocument, 'click', function (evt) {\n      _this._handleDocumentClick(evt);\n    }));\n\n    return _this;\n  }\n  /**\n   * Handles toggling of active state of the toolbar search input\n   * @param {Event} event The event triggering this method.\n   */\n\n\n  _createClass(Toolbar, [{\n    key: \"_handleDocumentClick\",\n    value: function _handleDocumentClick(event) {\n      var _this2 = this;\n\n      var searchInput = eventMatches(event, this.options.selectorSearch);\n      var isOfSelfSearchInput = searchInput && this.element.contains(searchInput);\n\n      if (isOfSelfSearchInput) {\n        var shouldBeOpen = isOfSelfSearchInput && !this.element.classList.contains(this.options.classSearchActive);\n        searchInput.classList.toggle(this.options.classSearchActive, shouldBeOpen);\n\n        if (shouldBeOpen) {\n          searchInput.querySelector('input').focus();\n        }\n      }\n\n      var targetComponentElement = eventMatches(event, this.options.selectorInit);\n\n      _toConsumableArray(this.element.ownerDocument.querySelectorAll(this.options.selectorSearch)).forEach(function (item) {\n        if (!targetComponentElement || !targetComponentElement.contains(item)) {\n          item.classList.remove(_this2.options.classSearchActive);\n        }\n      });\n    }\n    /**\n     * Handles toggling of active state of the toolbar search input via the keyboard\n     * @param {Event} event The event triggering this method.\n     */\n\n  }, {\n    key: \"_handleKeyDown\",\n    value: function _handleKeyDown(event) {\n      var searchInput = eventMatches(event, this.options.selectorSearch);\n      var isOfSelf = this.element.contains(event.target);\n      var shouldBeOpen = isOfSelf && !this.element.classList.contains(this.options.classSearchActive);\n\n      if (searchInput) {\n        if ((event.which === 13 || event.which === 32) && !shouldBeOpen) {\n          searchInput.classList.add(this.options.classSearchActive);\n        }\n\n        if (event.which === 27) {\n          searchInput.classList.remove(this.options.classSearchActive);\n        }\n      }\n    }\n    /**\n     * Handles toggling of the row height of the associated table\n     * @param {Event} event The event triggering this method.\n     * @param {HTMLElement} boundTable The table associated with the toolbar.\n     */\n\n  }, {\n    key: \"_handleRowHeightChange\",\n    value: function _handleRowHeightChange(event, boundTable) {\n      var value = event.currentTarget.querySelector('input:checked').value;\n\n      if (value === 'tall') {\n        boundTable.classList.add(this.options.classTallRows);\n      } else {\n        boundTable.classList.remove(this.options.classTallRows);\n      }\n    }\n    /**\n     * The map associating DOM element and Toolbar UI instance.\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * properties in this object are overriden for the instance being created.\n     * @property {string} selectorInit The CSS selector to find toolbar instances.\n     * @property {string} selectorSearch The CSS selector to find search inputs in a toolbar.\n     * @property {string} selectorRowHeight The CSS selector to find the row height inputs in a toolbar.\n     * @property {string} classTallRows The CSS class for making table rows into tall rows.\n     * @property {string} classSearchActive The CSS class the active state of the search input.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-toolbar]',\n        selectorSearch: '[data-toolbar-search]',\n        selectorRowHeight: '[data-row-height]',\n        classTallRows: \"\".concat(prefix, \"--responsive-table--tall\"),\n        classSearchActive: \"\".concat(prefix, \"--toolbar-search--active\")\n      };\n    }\n  }]);\n\n  return Toolbar;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nToolbar.components = new WeakMap();\nexport default Toolbar;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/toolbar/toolbar.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","eventMatches","on","Toolbar","element","options","dataset","tableTarget","console","warn","boundTable","ownerDocument","querySelector","rowHeightBtns","selectorRowHeight","manage","event","_handleRowHeightChange","evt","_handleKeyDown","_handleDocumentClick","searchInput","selectorSearch","isOfSelfSearchInput","contains","shouldBeOpen","classList","classSearchActive","toggle","focus","targetComponentElement","selectorInit","querySelectorAll","forEach","item","remove","isOfSelf","target","which","add","value","currentTarget","classTallRows","prefix","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nclass Toolbar extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Toolbar.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as an toolbar.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    if (!this.element.dataset.tableTarget) {\n      console.warn('There is no table bound to this toolbar!'); // eslint-disable-line no-console\n    } else {\n      const boundTable = this.element.ownerDocument.querySelector(this.element.dataset.tableTarget);\n      const rowHeightBtns = this.element.querySelector(this.options.selectorRowHeight);\n      if (rowHeightBtns) {\n        this.manage(\n          on(rowHeightBtns, 'click', event => {\n            this._handleRowHeightChange(event, boundTable);\n          })\n        );\n        // [...this.element.querySelectorAll(this.options.selectorRowHeight)].forEach((item) => {\n        //   item.addEventListener('click', (event) => { this._handleRowHeightChange(event, boundTable); });\n        // });\n      }\n    }\n\n    this.manage(\n      on(this.element.ownerDocument, 'keydown', evt => {\n        this._handleKeyDown(evt);\n      })\n    );\n    this.manage(\n      on(this.element.ownerDocument, 'click', evt => {\n        this._handleDocumentClick(evt);\n      })\n    );\n  }\n\n  /**\n   * Handles toggling of active state of the toolbar search input\n   * @param {Event} event The event triggering this method.\n   */\n  _handleDocumentClick(event) {\n    const searchInput = eventMatches(event, this.options.selectorSearch);\n    const isOfSelfSearchInput = searchInput && this.element.contains(searchInput);\n\n    if (isOfSelfSearchInput) {\n      const shouldBeOpen = isOfSelfSearchInput && !this.element.classList.contains(this.options.classSearchActive);\n      searchInput.classList.toggle(this.options.classSearchActive, shouldBeOpen);\n      if (shouldBeOpen) {\n        searchInput.querySelector('input').focus();\n      }\n    }\n\n    const targetComponentElement = eventMatches(event, this.options.selectorInit);\n    [...this.element.ownerDocument.querySelectorAll(this.options.selectorSearch)].forEach(item => {\n      if (!targetComponentElement || !targetComponentElement.contains(item)) {\n        item.classList.remove(this.options.classSearchActive);\n      }\n    });\n  }\n\n  /**\n   * Handles toggling of active state of the toolbar search input via the keyboard\n   * @param {Event} event The event triggering this method.\n   */\n  _handleKeyDown(event) {\n    const searchInput = eventMatches(event, this.options.selectorSearch);\n    const isOfSelf = this.element.contains(event.target);\n    const shouldBeOpen = isOfSelf && !this.element.classList.contains(this.options.classSearchActive);\n\n    if (searchInput) {\n      if ((event.which === 13 || event.which === 32) && !shouldBeOpen) {\n        searchInput.classList.add(this.options.classSearchActive);\n      }\n\n      if (event.which === 27) {\n        searchInput.classList.remove(this.options.classSearchActive);\n      }\n    }\n  }\n\n  /**\n   * Handles toggling of the row height of the associated table\n   * @param {Event} event The event triggering this method.\n   * @param {HTMLElement} boundTable The table associated with the toolbar.\n   */\n  _handleRowHeightChange(event, boundTable) {\n    const value = event.currentTarget.querySelector('input:checked').value;\n\n    if (value === 'tall') {\n      boundTable.classList.add(this.options.classTallRows);\n    } else {\n      boundTable.classList.remove(this.options.classTallRows);\n    }\n  }\n\n  /**\n   * The map associating DOM element and Toolbar UI instance.\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor,\n   * properties in this object are overriden for the instance being created.\n   * @property {string} selectorInit The CSS selector to find toolbar instances.\n   * @property {string} selectorSearch The CSS selector to find search inputs in a toolbar.\n   * @property {string} selectorRowHeight The CSS selector to find the row height inputs in a toolbar.\n   * @property {string} classTallRows The CSS class for making table rows into tall rows.\n   * @property {string} classSearchActive The CSS class the active state of the search input.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-toolbar]',\n      selectorSearch: '[data-toolbar-search]',\n      selectorRowHeight: '[data-row-height]',\n      classTallRows: `${prefix}--responsive-table--tall`,\n      classSearchActive: `${prefix}--toolbar-search--active`,\n    };\n  }\n}\n\nexport default Toolbar;\n"]},"metadata":{},"sourceType":"module"}