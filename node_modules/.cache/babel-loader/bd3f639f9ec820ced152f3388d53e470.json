{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar OverflowMenuItem = function OverflowMenuItem(_ref) {\n  var className = _ref.className,\n      itemText = _ref.itemText,\n      hasDivider = _ref.hasDivider,\n      isDelete = _ref.isDelete,\n      disabled = _ref.disabled,\n      closeMenu = _ref.closeMenu,\n      onClick = _ref.onClick,\n      primaryFocus = _ref.primaryFocus,\n      floatingMenu = _ref.floatingMenu,\n      wrapperClassName = _ref.wrapperClassName,\n      requireTitle = _ref.requireTitle,\n      other = _objectWithoutProperties(_ref, [\"className\", \"itemText\", \"hasDivider\", \"isDelete\", \"disabled\", \"closeMenu\", \"onClick\", \"primaryFocus\", \"floatingMenu\", \"wrapperClassName\", \"requireTitle\"]);\n\n  var overflowMenuBtnClasses = classNames('bx--overflow-menu-options__btn', className);\n  var overflowMenuItemClasses = classNames('bx--overflow-menu-options__option', {\n    'bx--overflow-menu--divider': hasDivider,\n    'bx--overflow-menu-options__option--danger': isDelete,\n    'bx--overflow-menu-options__option--disabled': disabled\n  }, wrapperClassName);\n\n  var handleClick = function handleClick(evt) {\n    onClick(evt);\n    closeMenu();\n  };\n\n  var primaryFocusProp = function (_ref2) {\n    var primaryFocus = _ref2.primaryFocus,\n        floatingMenu = _ref2.floatingMenu;\n\n    if (!primaryFocus) {\n      return {};\n    }\n\n    return floatingMenu ? {\n      'data-floating-menu-primary-focus': true\n    } : {\n      'data-overflow-menu-primary-focus': true\n    };\n  }({\n    primaryFocus: primaryFocus,\n    floatingMenu: floatingMenu\n  });\n\n  var item = React.createElement(\"li\", {\n    className: overflowMenuItemClasses,\n    role: \"menuitem\"\n  }, React.createElement(\"button\", _extends({}, other, primaryFocusProp, {\n    className: overflowMenuBtnClasses,\n    disabled: disabled,\n    onClick: handleClick,\n    title: requireTitle ? itemText : null,\n    tabIndex: disabled ? -1 : 0\n  }), itemText));\n  return item;\n};\n\nOverflowMenuItem.propTypes = {\n  /**\n   * The CSS class name to be placed on the button element\n   */\n  className: PropTypes.string,\n\n  /**\n   * The CSS class name to be placed on the wrapper list item element\n   */\n  wrapperClassName: PropTypes.string,\n\n  /**\n   * The text in the menu item.\n   */\n  itemText: PropTypes.node.isRequired,\n\n  /**\n   * `true` to make this menu item a divider.\n   */\n  hasDivider: PropTypes.bool,\n\n  /**\n   * `true` to make this menu item a \"danger button\".\n   */\n  isDelete: PropTypes.bool,\n\n  /**\n   * `true` to make this menu item disabled.\n   */\n  disabled: PropTypes.bool,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onFocus: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseUp: PropTypes.func,\n\n  /**\n   * A callback to tell the parent menu component that the menu should be closed.\n   */\n  closeMenu: PropTypes.func,\n\n  /**\n   * `true` if this menu item should get focus when the menu gets open.\n   */\n  primaryFocus: PropTypes.bool,\n\n  /**\n   * `true` if this menu item belongs to a floating OverflowMenu\n   */\n  floatingMenu: PropTypes.bool,\n\n  /**\n   * `true` if this menu item has long text and requires a browser tooltip\n   */\n  requireTitle: PropTypes.bool\n};\nOverflowMenuItem.defaultProps = {\n  hasDivider: false,\n  isDelete: false,\n  disabled: false,\n  itemText: 'Provide itemText',\n  onClick: function onClick() {}\n};\nexport default OverflowMenuItem;","map":null,"metadata":{},"sourceType":"module"}