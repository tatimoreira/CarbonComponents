{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classnames from 'classnames';\nimport Link from '../Link';\n\nvar newChild = function newChild(children, href) {\n  if (typeof children === 'string' && !(href === undefined)) {\n    return React.createElement(Link, {\n      href: href\n    }, children);\n  } else {\n    return React.cloneElement(React.Children.only(children), {\n      className: 'bx--link'\n    });\n  }\n};\n\nvar BreadcrumbItem = function BreadcrumbItem(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      href = _ref.href,\n      other = _objectWithoutProperties(_ref, [\"children\", \"className\", \"href\"]);\n\n  var classNames = classnames('bx--breadcrumb-item', className);\n  return React.createElement(\"div\", _extends({\n    className: classNames\n  }, other), newChild(children, href));\n};\n\nBreadcrumbItem.propTypes = {\n  /**\n   * Pass in content that will be inside of the BreadcrumbItem\n   */\n  children: PropTypes.node,\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Optional string representing the link location for the BreadcrumbItem\n   */\n  href: PropTypes.string\n};\nexport default BreadcrumbItem;","map":null,"metadata":{},"sourceType":"module"}