{"ast":null,"code":"import _typeof2 from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/typeof\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport cx from 'classnames';\nimport Downshift from 'downshift';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ListBox, { PropTypes as ListBoxPropTypes } from '../ListBox';\n\nvar defaultItemToString = function defaultItemToString(item) {\n  if (typeof item === 'string') {\n    return item;\n  }\n\n  return item ? item.label : '';\n};\n\nvar DropdownV2 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DropdownV2, _React$Component);\n\n  function DropdownV2() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropdownV2);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownV2)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleOnChange\", function (selectedItem) {\n      if (_this.props.onChange) {\n        _this.props.onChange({\n          selectedItem: selectedItem\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(DropdownV2, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          containerClassName = _this$props.className,\n          disabled = _this$props.disabled,\n          items = _this$props.items,\n          label = _this$props.label,\n          itemToString = _this$props.itemToString,\n          type = _this$props.type,\n          initialSelectedItem = _this$props.initialSelectedItem,\n          selectedItem = _this$props.selectedItem,\n          light = _this$props.light,\n          id = _this$props.id;\n      var className = cx('bx--dropdown', containerClassName, {\n        'bx--dropdown--light': light\n      });\n      return React.createElement(Downshift, {\n        id: id,\n        onChange: this.handleOnChange,\n        itemToString: itemToString,\n        defaultSelectedItem: initialSelectedItem,\n        selectedItem: selectedItem\n      }, function (_ref) {\n        var isOpen = _ref.isOpen,\n            itemToString = _ref.itemToString,\n            selectedItem = _ref.selectedItem,\n            highlightedIndex = _ref.highlightedIndex,\n            getRootProps = _ref.getRootProps,\n            getButtonProps = _ref.getButtonProps,\n            getItemProps = _ref.getItemProps,\n            getLabelProps = _ref.getLabelProps;\n        return React.createElement(ListBox, _extends({\n          type: type,\n          className: className,\n          disabled: disabled\n        }, getRootProps({\n          refKey: 'innerRef'\n        })), React.createElement(ListBox.Field, getButtonProps({\n          disabled: disabled\n        }), React.createElement(\"span\", _extends({\n          className: \"bx--list-box__label\"\n        }, getLabelProps()), selectedItem ? itemToString(selectedItem) : label), React.createElement(ListBox.MenuIcon, {\n          isOpen: isOpen\n        })), isOpen && React.createElement(ListBox.Menu, null, items.map(function (item, index) {\n          return React.createElement(ListBox.MenuItem, _extends({\n            key: itemToString(item),\n            isActive: selectedItem === item,\n            isHighlighted: highlightedIndex === index\n          }, getItemProps({\n            item: item,\n            index: index\n          })), itemToString(item));\n        })));\n      });\n    }\n  }]);\n\n  return DropdownV2;\n}(React.Component);\n\n_defineProperty(DropdownV2, \"propTypes\", {\n  /**\n   * Disable the control\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: PropTypes.array.isRequired,\n\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: PropTypes.func,\n\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occuring.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * The dropdown type, `default` or `inline`\n   */\n  type: ListBoxPropTypes.ListBoxType,\n\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: PropTypes.object,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool\n});\n\n_defineProperty(DropdownV2, \"defaultProps\", {\n  disabled: false,\n  type: 'default',\n  itemToString: defaultItemToString,\n  light: false\n});\n\nexport { DropdownV2 as default };","map":null,"metadata":{},"sourceType":"module"}