{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar TextInput = function TextInput(_ref) {\n  var labelText = _ref.labelText,\n      className = _ref.className,\n      id = _ref.id,\n      placeholder = _ref.placeholder,\n      type = _ref.type,\n      _onChange = _ref.onChange,\n      _onClick = _ref.onClick,\n      hideLabel = _ref.hideLabel,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      helperText = _ref.helperText,\n      light = _ref.light,\n      other = _objectWithoutProperties(_ref, [\"labelText\", \"className\", \"id\", \"placeholder\", \"type\", \"onChange\", \"onClick\", \"hideLabel\", \"invalid\", \"invalidText\", \"helperText\", \"light\"]);\n\n  var textInputProps = {\n    id: id,\n    onChange: function onChange(evt) {\n      if (!other.disabled) {\n        _onChange(evt);\n      }\n    },\n    onClick: function onClick(evt) {\n      if (!other.disabled) {\n        _onClick(evt);\n      }\n    },\n    placeholder: placeholder,\n    type: type\n  };\n  var errorId = id + '-error-msg';\n  var textInputClasses = classNames('bx--text-input', className, {\n    'bx--text-input--light': light\n  });\n  var labelClasses = classNames('bx--label', {\n    'bx--visually-hidden': hideLabel\n  });\n  var label = labelText ? React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  var error = invalid ? React.createElement(\"div\", {\n    className: \"bx--form-requirement\",\n    id: errorId\n  }, invalidText) : null;\n  var input = invalid ? React.createElement(\"input\", _extends({}, other, textInputProps, {\n    \"data-invalid\": true,\n    \"aria-invalid\": true,\n    \"aria-describedby\": errorId,\n    className: textInputClasses\n  })) : React.createElement(\"input\", _extends({}, other, textInputProps, {\n    className: textInputClasses\n  }));\n  var helper = helperText ? React.createElement(\"div\", {\n    className: \"bx--form__helper-text\"\n  }, helperText) : null;\n  return React.createElement(\"div\", {\n    className: \"bx--form-item\"\n  }, label, input, helper, error);\n};\n\nTextInput.propTypes = {\n  className: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  disabled: PropTypes.bool,\n  id: PropTypes.string.isRequired,\n  labelText: PropTypes.node.isRequired,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  hideLabel: PropTypes.bool,\n  invalid: PropTypes.bool,\n  invalidText: PropTypes.string,\n  helperText: PropTypes.node,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool\n};\nTextInput.defaultProps = {\n  className: 'bx--text__input',\n  disabled: false,\n  type: 'text',\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  invalid: false,\n  invalidText: '',\n  helperText: '',\n  light: false\n};\nexport default TextInput;","map":null,"metadata":{},"sourceType":"module"}