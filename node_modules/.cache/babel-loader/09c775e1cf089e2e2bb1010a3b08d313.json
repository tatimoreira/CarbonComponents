{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\nimport svgToggleClass from '../../globals/js/misc/svg-toggle-class';\n\nvar Search =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Search, _mixin);\n\n  /**\n   * Search with Options.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as the search component.\n   * @param {Object} [options] The component options\n   * @property {string} [options.selectorInit]\n   *   The selector to find search UIs with options.\n   * @property {string} [options.selectorSearchView]\n   *   The selector to find the search view icon containers.\n   * @property {string} [options.selectorSearchInput]\n   *   The selector to find the search input.\n   * @property {string} [options.selectorClearIcon]\n   *   The selector for the clear icon that clears the search box.\n   * @property {string} [options.selectorIconContainer] The data attribute selector for the icon layout container.\n   * @property {string} [options.classClearHidden] The class used to hide the clear icon.\n   * @property {string} [options.classLayoutHidden] The class used to hide nonselected layout view.\n   */\n  function Search(element, options) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, element, options));\n\n    var closeIcon = _this.element.querySelector(_this.options.selectorClearIcon);\n\n    var input = _this.element.querySelector(_this.options.selectorSearchInput);\n\n    if (!input) {\n      throw new Error('Cannot find the search input.');\n    }\n\n    if (closeIcon) {\n      _this.manage(on(closeIcon, 'click', function () {\n        svgToggleClass(closeIcon, _this.options.classClearHidden, true);\n        input.value = '';\n        input.focus();\n      }));\n    }\n\n    _this.manage(on(_this.element, 'click', function (evt) {\n      var toggleItem = eventMatches(evt, _this.options.selectorIconContainer);\n      if (toggleItem) _this.toggleLayout(toggleItem);\n    }));\n\n    _this.manage(on(input, 'input', function (evt) {\n      if (closeIcon) _this.showClear(evt.target.value, closeIcon);\n    }));\n\n    return _this;\n  }\n  /**\n   * Toggles between the grid and list layout.\n   * @param {HTMLElement} element The element contining the layout toggle.\n   */\n\n\n  _createClass(Search, [{\n    key: \"toggleLayout\",\n    value: function toggleLayout(element) {\n      var _this2 = this;\n\n      _toConsumableArray(element.querySelectorAll(this.options.selectorSearchView)).forEach(function (item) {\n        item.classList.toggle(_this2.options.classLayoutHidden);\n      });\n    }\n    /**\n     * Toggles the clear icon visibility\n     * @param {HTMLElement} value The element serving as the search input.\n     * @param {HTMLElement} icon The element serving as close icon.\n     */\n\n  }, {\n    key: \"showClear\",\n    value: function showClear(value, icon) {\n      svgToggleClass(icon, this.options.classClearHidden, value.length === 0);\n    }\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode Search.create .create()}, or {@linkcode Search.init .init()},\n     * properties in this object are overriden for the instance being created\n     * and how {@linkcode Search.init .init()} works.\n     * @member Search.options\n     * @type {Object}\n     * @property {string} [options.selectorInit]\n     *   The selector to find search UIs with options.\n     * @property {string} [options.selectorSearchView]\n     *   The selector to find the search view icon containers.\n     * @property {string} [options.selectorSearchInput]\n     *   The selector to find the search input.\n     * @property {string} [options.selectorClearIcon]\n     *   The selector for the clear icon that clears the search box.\n     * @property {string} [options.selectorIconContainer] The data attribute selector for the icon layout container.\n     * @property {string} [options.classClearHidden] The class used to hide the clear icon.\n     * @property {string} [options.classLayoutHidden] The class used to hide nonselected layout view.\n     */\n\n  }], [{\n    key: \"options\",\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-search]',\n        selectorSearchView: '[data-search-view]',\n        selectorSearchInput: \".\".concat(prefix, \"--search-input\"),\n        selectorClearIcon: \".\".concat(prefix, \"--search-close\"),\n        selectorIconContainer: \".\".concat(prefix, \"--search-button[data-search-toggle]\"),\n        classClearHidden: \"\".concat(prefix, \"--search-close--hidden\"),\n        classLayoutHidden: \"\".concat(prefix, \"--search-view--hidden\")\n      };\n    }\n    /**\n     * The map associating DOM element and search instance.\n     * @member Search.components\n     * @type {WeakMap}\n     */\n\n  }]);\n\n  return Search;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nSearch.components = new WeakMap();\nexport default Search;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/search/search.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","eventMatches","on","svgToggleClass","Search","element","options","closeIcon","querySelector","selectorClearIcon","input","selectorSearchInput","Error","manage","classClearHidden","value","focus","evt","toggleItem","selectorIconContainer","toggleLayout","showClear","target","querySelectorAll","selectorSearchView","forEach","item","classList","toggle","classLayoutHidden","icon","length","prefix","selectorInit","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\nimport svgToggleClass from '../../globals/js/misc/svg-toggle-class';\n\nclass Search extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Search with Options.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as the search component.\n   * @param {Object} [options] The component options\n   * @property {string} [options.selectorInit]\n   *   The selector to find search UIs with options.\n   * @property {string} [options.selectorSearchView]\n   *   The selector to find the search view icon containers.\n   * @property {string} [options.selectorSearchInput]\n   *   The selector to find the search input.\n   * @property {string} [options.selectorClearIcon]\n   *   The selector for the clear icon that clears the search box.\n   * @property {string} [options.selectorIconContainer] The data attribute selector for the icon layout container.\n   * @property {string} [options.classClearHidden] The class used to hide the clear icon.\n   * @property {string} [options.classLayoutHidden] The class used to hide nonselected layout view.\n   */\n  constructor(element, options) {\n    super(element, options);\n    const closeIcon = this.element.querySelector(this.options.selectorClearIcon);\n    const input = this.element.querySelector(this.options.selectorSearchInput);\n    if (!input) {\n      throw new Error('Cannot find the search input.');\n    }\n\n    if (closeIcon) {\n      this.manage(\n        on(closeIcon, 'click', () => {\n          svgToggleClass(closeIcon, this.options.classClearHidden, true);\n          input.value = '';\n          input.focus();\n        })\n      );\n    }\n\n    this.manage(\n      on(this.element, 'click', evt => {\n        const toggleItem = eventMatches(evt, this.options.selectorIconContainer);\n        if (toggleItem) this.toggleLayout(toggleItem);\n      })\n    );\n\n    this.manage(\n      on(input, 'input', evt => {\n        if (closeIcon) this.showClear(evt.target.value, closeIcon);\n      })\n    );\n  }\n\n  /**\n   * Toggles between the grid and list layout.\n   * @param {HTMLElement} element The element contining the layout toggle.\n   */\n  toggleLayout(element) {\n    [...element.querySelectorAll(this.options.selectorSearchView)].forEach(item => {\n      item.classList.toggle(this.options.classLayoutHidden);\n    });\n  }\n\n  /**\n   * Toggles the clear icon visibility\n   * @param {HTMLElement} value The element serving as the search input.\n   * @param {HTMLElement} icon The element serving as close icon.\n   */\n  showClear(value, icon) {\n    svgToggleClass(icon, this.options.classClearHidden, value.length === 0);\n  }\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor,\n   * {@linkcode Search.create .create()}, or {@linkcode Search.init .init()},\n   * properties in this object are overriden for the instance being created\n   * and how {@linkcode Search.init .init()} works.\n   * @member Search.options\n   * @type {Object}\n   * @property {string} [options.selectorInit]\n   *   The selector to find search UIs with options.\n   * @property {string} [options.selectorSearchView]\n   *   The selector to find the search view icon containers.\n   * @property {string} [options.selectorSearchInput]\n   *   The selector to find the search input.\n   * @property {string} [options.selectorClearIcon]\n   *   The selector for the clear icon that clears the search box.\n   * @property {string} [options.selectorIconContainer] The data attribute selector for the icon layout container.\n   * @property {string} [options.classClearHidden] The class used to hide the clear icon.\n   * @property {string} [options.classLayoutHidden] The class used to hide nonselected layout view.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-search]',\n      selectorSearchView: '[data-search-view]',\n      selectorSearchInput: `.${prefix}--search-input`,\n      selectorClearIcon: `.${prefix}--search-close`,\n      selectorIconContainer: `.${prefix}--search-button[data-search-toggle]`,\n      classClearHidden: `${prefix}--search-close--hidden`,\n      classLayoutHidden: `${prefix}--search-view--hidden`,\n    };\n  }\n\n  /**\n   * The map associating DOM element and search instance.\n   * @member Search.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}