{"ast":null,"code":"/**\n * Generic utility to compose event handlers so that consumers can supply their\n * own event listeners on table components. The default heuristic here is to\n * iterate through the given functions until `preventDefault` is called on the\n * given event.\n *\n * @param {Array<Function>} fns array of functions to apply to the event\n * @returns {Function}\n */\nexport var composeEventHandlers = function composeEventHandlers(fns) {\n  return function (event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    for (var i = 0; i < fns.length; i++) {\n      if (event.defaultPrevented) {\n        break;\n      }\n\n      if (typeof fns[i] === 'function') {\n        fns[i].apply(fns, [event].concat(args));\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}