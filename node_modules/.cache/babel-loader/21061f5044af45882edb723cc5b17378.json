{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar TextArea = function TextArea(_ref) {\n  var className = _ref.className,\n      id = _ref.id,\n      labelText = _ref.labelText,\n      hideLabel = _ref.hideLabel,\n      _onChange = _ref.onChange,\n      _onClick = _ref.onClick,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      helperText = _ref.helperText,\n      light = _ref.light,\n      other = _objectWithoutProperties(_ref, [\"className\", \"id\", \"labelText\", \"hideLabel\", \"onChange\", \"onClick\", \"invalid\", \"invalidText\", \"helperText\", \"light\"]);\n\n  var textareaProps = {\n    id: id,\n    onChange: function onChange(evt) {\n      if (!other.disabled) {\n        _onChange(evt);\n      }\n    },\n    onClick: function onClick(evt) {\n      if (!other.disabled) {\n        _onClick(evt);\n      }\n    }\n  };\n  var textareaClasses = classNames('bx--text-area', className, {\n    'bx--text-area--light': light\n  });\n  var labelClasses = classNames('bx--label', {\n    'bx--visually-hidden': hideLabel\n  });\n  var label = labelText ? React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses\n  }, labelText) : null;\n  var error = invalid ? React.createElement(\"div\", {\n    className: \"bx--form-requirement\"\n  }, invalidText) : null;\n  var input = invalid ? React.createElement(\"textarea\", _extends({}, other, textareaProps, {\n    className: textareaClasses,\n    \"data-invalid\": true\n  })) : React.createElement(\"textarea\", _extends({}, other, textareaProps, {\n    className: textareaClasses\n  }));\n  var helper = helperText ? React.createElement(\"div\", {\n    className: \"bx--form__helper-text\"\n  }, helperText) : null;\n  return React.createElement(\"div\", {\n    className: \"bx--form-item\"\n  }, label, input, helper, error);\n};\n\nTextArea.propTypes = {\n  /**\n   * Provide a custom className that is applied directly to the underlying\n   * <textarea> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify the `cols` attribute for the underlying <textarea> node\n   */\n  cols: PropTypes.number,\n\n  /**\n   * Optionally provide the default value of the <textarea>\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the control is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide a unique identifier for the control\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provide the text that will be read by a screen reader when visiting this\n   * control\n   */\n  labelText: PropTypes.node.isRequired,\n\n  /**\n   * Optionally provide an `onChange` handler that is called whenever <textarea>\n   * is updated\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Optionally provide an `onClick` handler that is called whenever the\n   * <textarea> is clicked\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify the placeholder attribute for the <textarea>\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Specify the rows attribute for the <textarea>\n   */\n  rows: PropTypes.number,\n\n  /**\n   * Provide the current value of the <textarea>\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: PropTypes.bool,\n\n  /**\n   * Provide the text that is displayed when the control is in an invalid state\n   */\n  invalidText: PropTypes.string,\n\n  /**\n   * Provide text that is used alongside the control label for additional help\n   */\n  helperText: PropTypes.node,\n\n  /**\n   * Specify whether you want the underlying label to be visually hidden\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Specify whether you want the light version of this control\n   */\n  light: PropTypes.bool\n};\nTextArea.defaultProps = {\n  disabled: false,\n  onChange: function onChange() {},\n  onClick: function onClick() {},\n  placeholder: '',\n  rows: 4,\n  cols: 50,\n  invalid: false,\n  invalidText: '',\n  helperText: '',\n  light: false\n};\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}