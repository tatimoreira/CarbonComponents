{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport trackBlur from '../../globals/js/mixins/track-blur';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar Dropdown =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Dropdown, _mixin);\n\n  /**\n   * A selector with drop downs.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends TrackBlur\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.classOpen] The CSS class for the open state.\n   * @param {string} [options.classDisabled] The CSS class for the disabled state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  function Dropdown(element, options) {\n    var _this;\n\n    _classCallCheck(this, Dropdown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropdown).call(this, element, options));\n\n    _this.manage(on(_this.element.ownerDocument, 'click', function (event) {\n      _this._toggle(event);\n    }));\n\n    _this.manage(on(_this.element, 'keydown', function (event) {\n      _this._handleKeyDown(event);\n    }));\n\n    _this.manage(on(_this.element, 'click', function (event) {\n      var item = eventMatches(event, _this.options.selectorItem);\n\n      if (item) {\n        _this.select(item);\n      }\n    }));\n\n    return _this;\n  }\n  /**\n   * Handles keydown event.\n   * @param {Event} event The event triggering this method.\n   */\n\n\n  _createClass(Dropdown, [{\n    key: \"_handleKeyDown\",\n    value: function _handleKeyDown(event) {\n      var isOpen = this.element.classList.contains(this.options.classOpen);\n      var direction = {\n        38: this.constructor.NAVIGATE.BACKWARD,\n        40: this.constructor.NAVIGATE.FORWARD\n      }[event.which];\n\n      if (isOpen && direction !== undefined) {\n        this.navigate(direction);\n        event.preventDefault(); // Prevents up/down keys from scrolling container\n      } else {\n        this._toggle(event);\n      }\n    }\n    /**\n     * Opens and closes the dropdown menu.\n     * @param {Event} [event] The event triggering this method.\n     */\n\n  }, {\n    key: \"_toggle\",\n    value: function _toggle(event) {\n      var _this2 = this;\n\n      var isDisabled = this.element.classList.contains(this.options.classDisabled);\n\n      if (isDisabled) {\n        return;\n      }\n\n      if ([13, 32, 40].indexOf(event.which) >= 0 && !event.target.matches(this.options.selectorItem) || event.which === 27 || event.type === 'click') {\n        var isOpen = this.element.classList.contains(this.options.classOpen);\n        var isOfSelf = this.element.contains(event.target);\n        var actions = {\n          add: isOfSelf && event.which === 40 && !isOpen,\n          remove: (!isOfSelf || event.which === 27) && isOpen,\n          toggle: isOfSelf && event.which !== 27 && event.which !== 40\n        };\n        Object.keys(actions).forEach(function (action) {\n          if (actions[action]) {\n            _this2.element.classList[action](_this2.options.classOpen);\n\n            _this2.element.focus();\n          }\n        });\n\n        var listItems = _toConsumableArray(this.element.querySelectorAll(this.options.selectorItem));\n\n        listItems.forEach(function (item) {\n          if (_this2.element.classList.contains(_this2.options.classOpen)) {\n            item.tabIndex = 0;\n          } else {\n            item.tabIndex = -1;\n          }\n        });\n      }\n    }\n    /**\n     * @returns {Element} Currently highlighted element.\n     */\n\n  }, {\n    key: \"getCurrentNavigation\",\n    value: function getCurrentNavigation() {\n      var focused = this.element.ownerDocument.activeElement;\n      return focused.nodeType === Node.ELEMENT_NODE && focused.matches(this.options.selectorItem) ? focused : null;\n    }\n    /**\n     * Moves up/down the focus.\n     * @param {number} direction The direction of navigating.\n     */\n\n  }, {\n    key: \"navigate\",\n    value: function navigate(direction) {\n      var items = _toConsumableArray(this.element.querySelectorAll(this.options.selectorItem));\n\n      var start = this.getCurrentNavigation() || this.element.querySelector(this.options.selectorItemSelected);\n\n      var getNextItem = function getNextItem(old) {\n        var handleUnderflow = function handleUnderflow(i, l) {\n          return i + (i >= 0 ? 0 : l);\n        };\n\n        var handleOverflow = function handleOverflow(i, l) {\n          return i - (i < l ? 0 : l);\n        }; // `items.indexOf(old)` may be -1 (Scenario of no previous focus)\n\n\n        var index = Math.max(items.indexOf(old) + direction, -1);\n        return items[handleUnderflow(handleOverflow(index, items.length), items.length)];\n      };\n\n      for (var current = getNextItem(start); current && current !== start; current = getNextItem(current)) {\n        if (!current.matches(this.options.selectorItemHidden) && !current.parentNode.matches(this.options.selectorItemHidden) && !current.matches(this.options.selectorItemSelected)) {\n          current.focus();\n          break;\n        }\n      }\n    }\n    /**\n     * Handles clicking on the dropdown options, doing the following:\n     * * Change Dropdown text to selected option.\n     * * Remove selected option from options when selected.\n     * * Emit custom events.\n     * @param {HTMLElement} itemToSelect The element to be activated.\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(itemToSelect) {\n      var _this3 = this;\n\n      var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          item: itemToSelect\n        }\n      });\n\n      if (this.element.dispatchEvent(eventStart)) {\n        if (this.element.dataset.dropdownType !== 'navigation') {\n          var selectorText = this.element.dataset.dropdownType !== 'inline' ? this.options.selectorText : this.options.selectorTextInner;\n          var text = this.element.querySelector(selectorText);\n\n          if (text) {\n            text.innerHTML = itemToSelect.innerHTML;\n          }\n\n          itemToSelect.classList.add(this.options.classSelected);\n        }\n\n        this.element.dataset.value = itemToSelect.parentElement.dataset.value;\n\n        _toConsumableArray(this.element.querySelectorAll(this.options.selectorItemSelected)).forEach(function (item) {\n          if (itemToSelect !== item) {\n            item.classList.remove(_this3.options.classSelected);\n          }\n        });\n\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n          bubbles: true,\n          cancelable: true,\n          detail: {\n            item: itemToSelect\n          }\n        }));\n      }\n    }\n    /**\n     * Closes the dropdown menu if this component loses focus.\n     */\n\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      this.element.classList.remove(this.options.classOpen);\n    }\n    /**\n     * The map associating DOM element and selector instance.\n     * @member Dropdown.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode Dropdown.create .create()}, or {@linkcode Dropdown.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode Dropdown.init .init()} works.\n     * @member Dropdown.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find selectors.\n     * @property {string} [selectorText] The CSS selector to find the element showing the selected item.\n     * @property {string} [selectorTextInner] The CSS selector to find the element showing the selected item, used for inline mode.\n     * @property {string} [selectorItem] The CSS selector to find clickable areas in dropdown items.\n     * @property {string} [selectorItemHidden]\n     *   The CSS selector to find hidden dropdown items.\n     *   Used to skip dropdown items for keyboard navigation.\n     * @property {string} [selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n     * @property {string} [classSelected] The CSS class for the selected dropdown item.\n     * @property {string} [classOpen] The CSS class for the open state.\n     * @property {string} [classDisabled] The CSS class for the disabled state.\n     * @property {string} [eventBeforeSelected]\n     *   The name of the custom event fired before a drop down item is selected.\n     *   Cancellation of this event stops selection of drop down item.\n     * @property {string} [eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-dropdown]',\n        selectorText: \".\".concat(prefix, \"--dropdown-text\"),\n        selectorTextInner: \".\".concat(prefix, \"--dropdown-text__inner\"),\n        selectorItem: \".\".concat(prefix, \"--dropdown-link\"),\n        selectorItemSelected: \".\".concat(prefix, \"--dropdown--selected\"),\n        selectorItemHidden: \"[hidden],[aria-hidden=\\\"true\\\"]\",\n        classSelected: \"\".concat(prefix, \"--dropdown--selected\"),\n        classOpen: \"\".concat(prefix, \"--dropdown--open\"),\n        classDisabled: \"\".concat(prefix, \"--dropdown--disabled\"),\n        eventBeforeSelected: 'dropdown-beingselected',\n        eventAfterSelected: 'dropdown-selected'\n      };\n    }\n    /**\n     * Enum for navigating backward/forward.\n     * @readonly\n     * @member Dropdown.NAVIGATE\n     * @type {Object}\n     * @property {number} BACKWARD Navigating backward.\n     * @property {number} FORWARD Navigating forward.\n     */\n\n  }]);\n\n  return Dropdown;\n}(mixin(createComponent, initComponentBySearch, trackBlur));\n\nDropdown.components = new WeakMap();\nDropdown.NAVIGATE = {\n  BACKWARD: -1,\n  FORWARD: 1\n};\nexport default Dropdown;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/dropdown/dropdown.js"],"names":["settings","mixin","createComponent","initComponentBySearch","trackBlur","eventMatches","on","Dropdown","element","options","manage","ownerDocument","event","_toggle","_handleKeyDown","item","selectorItem","select","isOpen","classList","contains","classOpen","direction","constructor","NAVIGATE","BACKWARD","FORWARD","which","undefined","navigate","preventDefault","isDisabled","classDisabled","indexOf","target","matches","type","isOfSelf","actions","add","remove","toggle","Object","keys","forEach","action","focus","listItems","querySelectorAll","tabIndex","focused","activeElement","nodeType","Node","ELEMENT_NODE","items","start","getCurrentNavigation","querySelector","selectorItemSelected","getNextItem","old","handleUnderflow","i","l","handleOverflow","index","Math","max","length","current","selectorItemHidden","parentNode","itemToSelect","eventStart","CustomEvent","eventBeforeSelected","bubbles","cancelable","detail","dispatchEvent","dataset","dropdownType","selectorText","selectorTextInner","text","innerHTML","classSelected","value","parentElement","eventAfterSelected","prefix","selectorInit","components","WeakMap"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,qBAAP,MAAkC,kDAAlC;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,EAAP,MAAe,0BAAf;;IAEMC,Q;;;;;AACJ;;;;;;;;;;;;;;;;;AAiBA,oBAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAAA;;AAC5B,kFAAMD,OAAN,EAAeC,OAAf;;AAEA,UAAKC,MAAL,CACEJ,EAAE,CAAC,MAAKE,OAAL,CAAaG,aAAd,EAA6B,OAA7B,EAAsC,UAAAC,KAAK,EAAI;AAC/C,YAAKC,OAAL,CAAaD,KAAb;AACD,KAFC,CADJ;;AAKA,UAAKF,MAAL,CACEJ,EAAE,CAAC,MAAKE,OAAN,EAAe,SAAf,EAA0B,UAAAI,KAAK,EAAI;AACnC,YAAKE,cAAL,CAAoBF,KAApB;AACD,KAFC,CADJ;;AAKA,UAAKF,MAAL,CACEJ,EAAE,CAAC,MAAKE,OAAN,EAAe,OAAf,EAAwB,UAAAI,KAAK,EAAI;AACjC,UAAMG,IAAI,GAAGV,YAAY,CAACO,KAAD,EAAQ,MAAKH,OAAL,CAAaO,YAArB,CAAzB;;AACA,UAAID,IAAJ,EAAU;AACR,cAAKE,MAAL,CAAYF,IAAZ;AACD;AACF,KALC,CADJ;;AAb4B;AAqB7B;AAED;;;;;;;;mCAIeH,K,EAAO;AACpB,UAAMM,MAAM,GAAG,KAAKV,OAAL,CAAaW,SAAb,CAAuBC,QAAvB,CAAgC,KAAKX,OAAL,CAAaY,SAA7C,CAAf;AACA,UAAMC,SAAS,GAAG;AAChB,YAAI,KAAKC,WAAL,CAAiBC,QAAjB,CAA0BC,QADd;AAEhB,YAAI,KAAKF,WAAL,CAAiBC,QAAjB,CAA0BE;AAFd,QAGhBd,KAAK,CAACe,KAHU,CAAlB;;AAIA,UAAIT,MAAM,IAAII,SAAS,KAAKM,SAA5B,EAAuC;AACrC,aAAKC,QAAL,CAAcP,SAAd;AACAV,QAAAA,KAAK,CAACkB,cAAN,GAFqC,CAEb;AACzB,OAHD,MAGO;AACL,aAAKjB,OAAL,CAAaD,KAAb;AACD;AACF;AAED;;;;;;;4BAIQA,K,EAAO;AAAA;;AACb,UAAMmB,UAAU,GAAG,KAAKvB,OAAL,CAAaW,SAAb,CAAuBC,QAAvB,CAAgC,KAAKX,OAAL,CAAauB,aAA7C,CAAnB;;AAEA,UAAID,UAAJ,EAAgB;AACd;AACD;;AAED,UACG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAaE,OAAb,CAAqBrB,KAAK,CAACe,KAA3B,KAAqC,CAArC,IAA0C,CAACf,KAAK,CAACsB,MAAN,CAAaC,OAAb,CAAqB,KAAK1B,OAAL,CAAaO,YAAlC,CAA5C,IACAJ,KAAK,CAACe,KAAN,KAAgB,EADhB,IAEAf,KAAK,CAACwB,IAAN,KAAe,OAHjB,EAIE;AACA,YAAMlB,MAAM,GAAG,KAAKV,OAAL,CAAaW,SAAb,CAAuBC,QAAvB,CAAgC,KAAKX,OAAL,CAAaY,SAA7C,CAAf;AACA,YAAMgB,QAAQ,GAAG,KAAK7B,OAAL,CAAaY,QAAb,CAAsBR,KAAK,CAACsB,MAA5B,CAAjB;AACA,YAAMI,OAAO,GAAG;AACdC,UAAAA,GAAG,EAAEF,QAAQ,IAAIzB,KAAK,CAACe,KAAN,KAAgB,EAA5B,IAAkC,CAACT,MAD1B;AAEdsB,UAAAA,MAAM,EAAE,CAAC,CAACH,QAAD,IAAazB,KAAK,CAACe,KAAN,KAAgB,EAA9B,KAAqCT,MAF/B;AAGduB,UAAAA,MAAM,EAAEJ,QAAQ,IAAIzB,KAAK,CAACe,KAAN,KAAgB,EAA5B,IAAkCf,KAAK,CAACe,KAAN,KAAgB;AAH5C,SAAhB;AAKAe,QAAAA,MAAM,CAACC,IAAP,CAAYL,OAAZ,EAAqBM,OAArB,CAA6B,UAAAC,MAAM,EAAI;AACrC,cAAIP,OAAO,CAACO,MAAD,CAAX,EAAqB;AACnB,YAAA,MAAI,CAACrC,OAAL,CAAaW,SAAb,CAAuB0B,MAAvB,EAA+B,MAAI,CAACpC,OAAL,CAAaY,SAA5C;;AACA,YAAA,MAAI,CAACb,OAAL,CAAasC,KAAb;AACD;AACF,SALD;;AAMA,YAAMC,SAAS,sBAAO,KAAKvC,OAAL,CAAawC,gBAAb,CAA8B,KAAKvC,OAAL,CAAaO,YAA3C,CAAP,CAAf;;AACA+B,QAAAA,SAAS,CAACH,OAAV,CAAkB,UAAA7B,IAAI,EAAI;AACxB,cAAI,MAAI,CAACP,OAAL,CAAaW,SAAb,CAAuBC,QAAvB,CAAgC,MAAI,CAACX,OAAL,CAAaY,SAA7C,CAAJ,EAA6D;AAC3DN,YAAAA,IAAI,CAACkC,QAAL,GAAgB,CAAhB;AACD,WAFD,MAEO;AACLlC,YAAAA,IAAI,CAACkC,QAAL,GAAgB,CAAC,CAAjB;AACD;AACF,SAND;AAOD;AACF;AAED;;;;;;2CAGuB;AACrB,UAAMC,OAAO,GAAG,KAAK1C,OAAL,CAAaG,aAAb,CAA2BwC,aAA3C;AACA,aAAOD,OAAO,CAACE,QAAR,KAAqBC,IAAI,CAACC,YAA1B,IAA0CJ,OAAO,CAACf,OAAR,CAAgB,KAAK1B,OAAL,CAAaO,YAA7B,CAA1C,GAAuFkC,OAAvF,GAAiG,IAAxG;AACD;AAED;;;;;;;6BAIS5B,S,EAAW;AAClB,UAAMiC,KAAK,sBAAO,KAAK/C,OAAL,CAAawC,gBAAb,CAA8B,KAAKvC,OAAL,CAAaO,YAA3C,CAAP,CAAX;;AACA,UAAMwC,KAAK,GAAG,KAAKC,oBAAL,MAA+B,KAAKjD,OAAL,CAAakD,aAAb,CAA2B,KAAKjD,OAAL,CAAakD,oBAAxC,CAA7C;;AACA,UAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG,EAAI;AACzB,YAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,CAAT,GAAaC,CAAjB,CAAX;AAAA,SAAxB;;AACA,YAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACF,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,IAAIA,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAYA,CAAhB,CAAX;AAAA,SAAvB,CAFyB,CAGzB;;;AACA,YAAME,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASb,KAAK,CAACtB,OAAN,CAAc4B,GAAd,IAAqBvC,SAA9B,EAAyC,CAAC,CAA1C,CAAd;AACA,eAAOiC,KAAK,CAACO,eAAe,CAACG,cAAc,CAACC,KAAD,EAAQX,KAAK,CAACc,MAAd,CAAf,EAAsCd,KAAK,CAACc,MAA5C,CAAhB,CAAZ;AACD,OAND;;AAOA,WAAK,IAAIC,OAAO,GAAGV,WAAW,CAACJ,KAAD,CAA9B,EAAuCc,OAAO,IAAIA,OAAO,KAAKd,KAA9D,EAAqEc,OAAO,GAAGV,WAAW,CAACU,OAAD,CAA1F,EAAqG;AACnG,YACE,CAACA,OAAO,CAACnC,OAAR,CAAgB,KAAK1B,OAAL,CAAa8D,kBAA7B,CAAD,IACA,CAACD,OAAO,CAACE,UAAR,CAAmBrC,OAAnB,CAA2B,KAAK1B,OAAL,CAAa8D,kBAAxC,CADD,IAEA,CAACD,OAAO,CAACnC,OAAR,CAAgB,KAAK1B,OAAL,CAAakD,oBAA7B,CAHH,EAIE;AACAW,UAAAA,OAAO,CAACxB,KAAR;AACA;AACD;AACF;AACF;AAED;;;;;;;;;;2BAOO2B,Y,EAAc;AAAA;;AACnB,UAAMC,UAAU,GAAG,IAAIC,WAAJ,CAAgB,KAAKlE,OAAL,CAAamE,mBAA7B,EAAkD;AACnEC,QAAAA,OAAO,EAAE,IAD0D;AAEnEC,QAAAA,UAAU,EAAE,IAFuD;AAGnEC,QAAAA,MAAM,EAAE;AAAEhE,UAAAA,IAAI,EAAE0D;AAAR;AAH2D,OAAlD,CAAnB;;AAMA,UAAI,KAAKjE,OAAL,CAAawE,aAAb,CAA2BN,UAA3B,CAAJ,EAA4C;AAC1C,YAAI,KAAKlE,OAAL,CAAayE,OAAb,CAAqBC,YAArB,KAAsC,YAA1C,EAAwD;AACtD,cAAMC,YAAY,GAChB,KAAK3E,OAAL,CAAayE,OAAb,CAAqBC,YAArB,KAAsC,QAAtC,GAAiD,KAAKzE,OAAL,CAAa0E,YAA9D,GAA6E,KAAK1E,OAAL,CAAa2E,iBAD5F;AAEA,cAAMC,IAAI,GAAG,KAAK7E,OAAL,CAAakD,aAAb,CAA2ByB,YAA3B,CAAb;;AACA,cAAIE,IAAJ,EAAU;AACRA,YAAAA,IAAI,CAACC,SAAL,GAAiBb,YAAY,CAACa,SAA9B;AACD;;AACDb,UAAAA,YAAY,CAACtD,SAAb,CAAuBoB,GAAvB,CAA2B,KAAK9B,OAAL,CAAa8E,aAAxC;AACD;;AACD,aAAK/E,OAAL,CAAayE,OAAb,CAAqBO,KAArB,GAA6Bf,YAAY,CAACgB,aAAb,CAA2BR,OAA3B,CAAmCO,KAAhE;;AAEA,2BAAI,KAAKhF,OAAL,CAAawC,gBAAb,CAA8B,KAAKvC,OAAL,CAAakD,oBAA3C,CAAJ,EAAsEf,OAAtE,CAA8E,UAAA7B,IAAI,EAAI;AACpF,cAAI0D,YAAY,KAAK1D,IAArB,EAA2B;AACzBA,YAAAA,IAAI,CAACI,SAAL,CAAeqB,MAAf,CAAsB,MAAI,CAAC/B,OAAL,CAAa8E,aAAnC;AACD;AACF,SAJD;;AAMA,aAAK/E,OAAL,CAAawE,aAAb,CACE,IAAIL,WAAJ,CAAgB,KAAKlE,OAAL,CAAaiF,kBAA7B,EAAiD;AAC/Cb,UAAAA,OAAO,EAAE,IADsC;AAE/CC,UAAAA,UAAU,EAAE,IAFmC;AAG/CC,UAAAA,MAAM,EAAE;AAAEhE,YAAAA,IAAI,EAAE0D;AAAR;AAHuC,SAAjD,CADF;AAOD;AACF;AAED;;;;;;iCAGa;AACX,WAAKjE,OAAL,CAAaW,SAAb,CAAuBqB,MAAvB,CAA8B,KAAK/B,OAAL,CAAaY,SAA3C;AACD;AAED;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;wBAsBqB;AAAA,UACXsE,MADW,GACA3F,QADA,CACX2F,MADW;AAEnB,aAAO;AACLC,QAAAA,YAAY,EAAE,iBADT;AAELT,QAAAA,YAAY,aAAMQ,MAAN,oBAFP;AAGLP,QAAAA,iBAAiB,aAAMO,MAAN,2BAHZ;AAIL3E,QAAAA,YAAY,aAAM2E,MAAN,oBAJP;AAKLhC,QAAAA,oBAAoB,aAAMgC,MAAN,yBALf;AAMLpB,QAAAA,kBAAkB,mCANb;AAOLgB,QAAAA,aAAa,YAAKI,MAAL,yBAPR;AAQLtE,QAAAA,SAAS,YAAKsE,MAAL,qBARJ;AASL3D,QAAAA,aAAa,YAAK2D,MAAL,yBATR;AAULf,QAAAA,mBAAmB,EAAE,wBAVhB;AAWLc,QAAAA,kBAAkB,EAAE;AAXf,OAAP;AAaD;AAED;;;;;;;;;;;;EApOqBzF,KAAK,CAACC,eAAD,EAAkBC,qBAAlB,EAAyCC,SAAzC,C;;AAAtBG,Q,CA2LGsF,U,GAAa,IAAIC,OAAJ,E;AA3LhBvF,Q,CA4OGiB,Q,GAAW;AAChBC,EAAAA,QAAQ,EAAE,CAAC,CADK;AAEhBC,EAAAA,OAAO,EAAE;AAFO,C;AAMpB,eAAenB,QAAf","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport trackBlur from '../../globals/js/mixins/track-blur';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nclass Dropdown extends mixin(createComponent, initComponentBySearch, trackBlur) {\n  /**\n   * A selector with drop downs.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends TrackBlur\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.classOpen] The CSS class for the open state.\n   * @param {string} [options.classDisabled] The CSS class for the disabled state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    this.manage(\n      on(this.element.ownerDocument, 'click', event => {\n        this._toggle(event);\n      })\n    );\n    this.manage(\n      on(this.element, 'keydown', event => {\n        this._handleKeyDown(event);\n      })\n    );\n    this.manage(\n      on(this.element, 'click', event => {\n        const item = eventMatches(event, this.options.selectorItem);\n        if (item) {\n          this.select(item);\n        }\n      })\n    );\n  }\n\n  /**\n   * Handles keydown event.\n   * @param {Event} event The event triggering this method.\n   */\n  _handleKeyDown(event) {\n    const isOpen = this.element.classList.contains(this.options.classOpen);\n    const direction = {\n      38: this.constructor.NAVIGATE.BACKWARD,\n      40: this.constructor.NAVIGATE.FORWARD,\n    }[event.which];\n    if (isOpen && direction !== undefined) {\n      this.navigate(direction);\n      event.preventDefault(); // Prevents up/down keys from scrolling container\n    } else {\n      this._toggle(event);\n    }\n  }\n\n  /**\n   * Opens and closes the dropdown menu.\n   * @param {Event} [event] The event triggering this method.\n   */\n  _toggle(event) {\n    const isDisabled = this.element.classList.contains(this.options.classDisabled);\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (\n      ([13, 32, 40].indexOf(event.which) >= 0 && !event.target.matches(this.options.selectorItem)) ||\n      event.which === 27 ||\n      event.type === 'click'\n    ) {\n      const isOpen = this.element.classList.contains(this.options.classOpen);\n      const isOfSelf = this.element.contains(event.target);\n      const actions = {\n        add: isOfSelf && event.which === 40 && !isOpen,\n        remove: (!isOfSelf || event.which === 27) && isOpen,\n        toggle: isOfSelf && event.which !== 27 && event.which !== 40,\n      };\n      Object.keys(actions).forEach(action => {\n        if (actions[action]) {\n          this.element.classList[action](this.options.classOpen);\n          this.element.focus();\n        }\n      });\n      const listItems = [...this.element.querySelectorAll(this.options.selectorItem)];\n      listItems.forEach(item => {\n        if (this.element.classList.contains(this.options.classOpen)) {\n          item.tabIndex = 0;\n        } else {\n          item.tabIndex = -1;\n        }\n      });\n    }\n  }\n\n  /**\n   * @returns {Element} Currently highlighted element.\n   */\n  getCurrentNavigation() {\n    const focused = this.element.ownerDocument.activeElement;\n    return focused.nodeType === Node.ELEMENT_NODE && focused.matches(this.options.selectorItem) ? focused : null;\n  }\n\n  /**\n   * Moves up/down the focus.\n   * @param {number} direction The direction of navigating.\n   */\n  navigate(direction) {\n    const items = [...this.element.querySelectorAll(this.options.selectorItem)];\n    const start = this.getCurrentNavigation() || this.element.querySelector(this.options.selectorItemSelected);\n    const getNextItem = old => {\n      const handleUnderflow = (i, l) => i + (i >= 0 ? 0 : l);\n      const handleOverflow = (i, l) => i - (i < l ? 0 : l);\n      // `items.indexOf(old)` may be -1 (Scenario of no previous focus)\n      const index = Math.max(items.indexOf(old) + direction, -1);\n      return items[handleUnderflow(handleOverflow(index, items.length), items.length)];\n    };\n    for (let current = getNextItem(start); current && current !== start; current = getNextItem(current)) {\n      if (\n        !current.matches(this.options.selectorItemHidden) &&\n        !current.parentNode.matches(this.options.selectorItemHidden) &&\n        !current.matches(this.options.selectorItemSelected)\n      ) {\n        current.focus();\n        break;\n      }\n    }\n  }\n\n  /**\n   * Handles clicking on the dropdown options, doing the following:\n   * * Change Dropdown text to selected option.\n   * * Remove selected option from options when selected.\n   * * Emit custom events.\n   * @param {HTMLElement} itemToSelect The element to be activated.\n   */\n  select(itemToSelect) {\n    const eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n      bubbles: true,\n      cancelable: true,\n      detail: { item: itemToSelect },\n    });\n\n    if (this.element.dispatchEvent(eventStart)) {\n      if (this.element.dataset.dropdownType !== 'navigation') {\n        const selectorText =\n          this.element.dataset.dropdownType !== 'inline' ? this.options.selectorText : this.options.selectorTextInner;\n        const text = this.element.querySelector(selectorText);\n        if (text) {\n          text.innerHTML = itemToSelect.innerHTML;\n        }\n        itemToSelect.classList.add(this.options.classSelected);\n      }\n      this.element.dataset.value = itemToSelect.parentElement.dataset.value;\n\n      [...this.element.querySelectorAll(this.options.selectorItemSelected)].forEach(item => {\n        if (itemToSelect !== item) {\n          item.classList.remove(this.options.classSelected);\n        }\n      });\n\n      this.element.dispatchEvent(\n        new CustomEvent(this.options.eventAfterSelected, {\n          bubbles: true,\n          cancelable: true,\n          detail: { item: itemToSelect },\n        })\n      );\n    }\n  }\n\n  /**\n   * Closes the dropdown menu if this component loses focus.\n   */\n  handleBlur() {\n    this.element.classList.remove(this.options.classOpen);\n  }\n\n  /**\n   * The map associating DOM element and selector instance.\n   * @member Dropdown.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor, {@linkcode Dropdown.create .create()}, or {@linkcode Dropdown.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode Dropdown.init .init()} works.\n   * @member Dropdown.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS selector to find selectors.\n   * @property {string} [selectorText] The CSS selector to find the element showing the selected item.\n   * @property {string} [selectorTextInner] The CSS selector to find the element showing the selected item, used for inline mode.\n   * @property {string} [selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @property {string} [selectorItemHidden]\n   *   The CSS selector to find hidden dropdown items.\n   *   Used to skip dropdown items for keyboard navigation.\n   * @property {string} [selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @property {string} [classSelected] The CSS class for the selected dropdown item.\n   * @property {string} [classOpen] The CSS class for the open state.\n   * @property {string} [classDisabled] The CSS class for the disabled state.\n   * @property {string} [eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @property {string} [eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-dropdown]',\n      selectorText: `.${prefix}--dropdown-text`,\n      selectorTextInner: `.${prefix}--dropdown-text__inner`,\n      selectorItem: `.${prefix}--dropdown-link`,\n      selectorItemSelected: `.${prefix}--dropdown--selected`,\n      selectorItemHidden: `[hidden],[aria-hidden=\"true\"]`,\n      classSelected: `${prefix}--dropdown--selected`,\n      classOpen: `${prefix}--dropdown--open`,\n      classDisabled: `${prefix}--dropdown--disabled`,\n      eventBeforeSelected: 'dropdown-beingselected',\n      eventAfterSelected: 'dropdown-selected',\n    };\n  }\n\n  /**\n   * Enum for navigating backward/forward.\n   * @readonly\n   * @member Dropdown.NAVIGATE\n   * @type {Object}\n   * @property {number} BACKWARD Navigating backward.\n   * @property {number} FORWARD Navigating forward.\n   */\n  static NAVIGATE = {\n    BACKWARD: -1,\n    FORWARD: 1,\n  };\n}\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}