{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport eventedState from '../../globals/js/mixins/evented-state';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar DataTable =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(DataTable, _mixin);\n\n  /**\n   * Data Table\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends EventedState\n   * @extends Handles\n   * @param {HTMLElement} element The root element of tables\n   * @param {Object} [options] the... options\n   * @param {string} [options.selectorInit] selector initialization\n   * @param {string} [options.selectorExpandCells] css selector for expand\n   * @param {string} [options.expandableRow] css selector for expand\n   * @param {string} [options.selectorParentRows] css selector for rows housing expansion\n   * @param {string} [options.selectorTableBody] root css for table body\n   * @param {string} [options.eventTrigger] selector for event bubble capture points\n   * @param {string} [options.eventParentContainer] used find the bubble container\n   */\n  function DataTable(_element, options) {\n    var _this;\n\n    _classCallCheck(this, DataTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataTable).call(this, _element, options));\n\n    _this._toggleState = function (element, evt) {\n      var data = element.dataset;\n      var label = data.label ? data.label : '';\n      var previousValue = data.previousValue ? data.previousValue : '';\n      var initialEvt = evt;\n\n      _this.changeState({\n        group: data.event,\n        element: element,\n        label: label,\n        previousValue: previousValue,\n        initialEvt: initialEvt\n      });\n    };\n\n    _this._zebraStripe = function (parentRows) {\n      parentRows.forEach(function (item, index) {\n        if (index % 2 === 0) {\n          item.classList.add(_this.options.classParentRowEven);\n\n          if (item.nextElementSibling && item.nextElementSibling.classList.contains(_this.options.classExpandableRow)) {\n            item.nextElementSibling.classList.add(_this.options.classExpandableRowEven);\n          }\n        } else {\n          item.classList.remove(_this.options.classParentRowEven);\n        }\n      });\n    };\n\n    _this._initExpandableRows = function (expandableRows) {\n      expandableRows.forEach(function (item) {\n        item.classList.remove(_this.options.classExpandableRowHidden);\n\n        _this.tableBody.removeChild(item);\n      });\n    };\n\n    _this._toggleRowExpand = function (detail) {\n      var element = detail.element;\n      var parent = eventMatches(detail.initialEvt, _this.options.eventParentContainer);\n\n      var index = _this.expandCells.indexOf(element);\n\n      if (element.dataset.previousValue === undefined || element.dataset.previousValue === 'expanded') {\n        element.dataset.previousValue = 'collapsed';\n\n        _this.tableBody.insertBefore(_this.expandableRows[index], _this.parentRows[index + 1]);\n      } else {\n        _this.tableBody.removeChild(parent.nextElementSibling);\n\n        element.dataset.previousValue = 'expanded';\n      }\n    };\n\n    _this._toggleSort = function (detail) {\n      var element = detail.element,\n          previousValue = detail.previousValue;\n\n      if (!previousValue || previousValue === 'descending') {\n        element.dataset.previousValue = 'ascending';\n        element.classList.add(_this.options.classTableSortAscending);\n      } else {\n        element.dataset.previousValue = 'descending';\n        element.classList.remove(_this.options.classTableSortAscending);\n      }\n    };\n\n    _this._toggleSelectAll = function (detail) {\n      var element = detail.element,\n          previousValue = detail.previousValue;\n\n      var inputs = _toConsumableArray(_this.element.querySelectorAll(_this.options.selectorCheckbox));\n\n      if (!previousValue || previousValue === 'toggled') {\n        inputs.forEach(function (item) {\n          item.checked = true; // eslint-disable-line no-param-reassign\n        });\n        element.dataset.previousValue = 'off';\n      } else {\n        inputs.forEach(function (item) {\n          item.checked = false; // eslint-disable-line no-param-reassign\n        });\n        element.dataset.previousValue = 'toggled';\n      }\n    };\n\n    _this.refreshRows = function () {\n      var newExpandCells = _toConsumableArray(_this.element.querySelectorAll(_this.options.selectorExpandCells));\n\n      var newExpandableRows = _toConsumableArray(_this.element.querySelectorAll(_this.options.selectorExpandableRows));\n\n      var newParentRows = _toConsumableArray(_this.element.querySelectorAll(_this.options.selectorParentRows)); // check if this is a refresh or the first time\n\n\n      if (_this.parentRows.length > 0) {\n        var diffParentRows = newParentRows.filter(function (newRow) {\n          return !_this.parentRows.some(function (oldRow) {\n            return oldRow === newRow;\n          });\n        }); // check if there are expandable rows\n\n        if (newExpandableRows.length > 0) {\n          var diffExpandableRows = diffParentRows.map(function (newRow) {\n            return newRow.nextElementSibling;\n          });\n\n          var mergedExpandableRows = _toConsumableArray(_this.expandableRows).concat(_toConsumableArray(diffExpandableRows));\n\n          _this._initExpandableRows(diffExpandableRows);\n\n          _this.expandableRows = mergedExpandableRows;\n        }\n\n        _this._zebraStripe(newParentRows);\n      } else {\n        _this._zebraStripe(newParentRows);\n\n        if (newExpandableRows.length > 0) {\n          _this._initExpandableRows(newExpandableRows);\n\n          _this.expandableRows = newExpandableRows;\n        }\n      }\n\n      _this.expandCells = newExpandCells;\n      _this.parentRows = newParentRows;\n    };\n\n    _this.container = _element.parentNode; // requires the immediate parent to be the container\n\n    _this.tableBody = _this.element.querySelector(_this.options.selectorTableBody);\n    _this.expandCells = [];\n    _this.expandableRows = [];\n    _this.parentRows = [];\n    _this.overflowInitialized = false;\n\n    _this.refreshRows();\n\n    _this.manage(on(_this.element, 'click', function (evt) {\n      var eventElement = eventMatches(evt, _this.options.eventTrigger);\n\n      if (eventElement) {\n        _this._toggleState(eventElement, evt);\n      }\n    }));\n\n    _this.manage(on(_this.element, 'keydown', function (evt) {\n      if (evt.which === 13) {\n        var eventElement = eventMatches(evt, _this.options.eventTrigger);\n\n        if (eventElement) {\n          _this._toggleState(eventElement, evt);\n        }\n      }\n    }));\n\n    return _this;\n  }\n  /**\n   * Toggles the given state.\n   * @private\n   * @param {Object} detail The detail of the event trigging this action.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n\n\n  _createClass(DataTable, [{\n    key: \"_changeState\",\n    value: function _changeState(detail, callback) {\n      this[this.constructor.eventHandlers[detail.group]](detail);\n      callback();\n    }\n    /**\n     * Toggles the state of this component specified by `data-event` attribute of the given element.\n     * @param {HTMLElement} element The element.\n     * @param {Event} evt The event trigging this action.\n     */\n\n  }], [{\n    key: \"options\",\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-responsive-table]',\n        selectorExpandCells: \".\".concat(prefix, \"--table-expand\"),\n        selectorExpandableRows: \".\".concat(prefix, \"--expandable-row\"),\n        selectorParentRows: \".\".concat(prefix, \"--parent-row\"),\n        selectorTableBody: \".\".concat(prefix, \"--table-body\"),\n        selectorCheckbox: \".\".concat(prefix, \"--checkbox\"),\n        classParentRowEven: \"\".concat(prefix, \"--parent-row--even\"),\n        classExpandableRow: \"\".concat(prefix, \"--expandable-row\"),\n        classExpandableRowEven: \"\".concat(prefix, \"--expandable-row--even\"),\n        classExpandableRowHidden: \"\".concat(prefix, \"--expandable-row--hidden\"),\n        classTableSortAscending: \"\".concat(prefix, \"--table-sort--ascending\"),\n        eventBeforeExpand: 'responsive-table-beforetoggleexpand',\n        eventAfterExpand: 'responsive-table-aftertoggleexpand',\n        eventBeforeSort: 'responsive-table-beforetogglesort',\n        eventAfterSort: 'responsive-table-aftertogglesort',\n        eventBeforeSelectAll: 'responsive-table-beforetoggleselectall',\n        eventAfterSelectAll: 'responsive-table-aftertoggleselectall',\n        eventTrigger: '[data-event]',\n        eventParentContainer: '[data-parent-row]'\n      };\n    }\n  }]);\n\n  return DataTable;\n}(mixin(createComponent, initComponentBySearch, eventedState, handles));\n\nDataTable.components = new WeakMap();\nDataTable.eventHandlers = {\n  expand: '_toggleRowExpand',\n  sort: '_toggleSort',\n  'select-all': '_toggleSelectAll'\n};\nexport default DataTable;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/data-table/data-table.js"],"names":["settings","mixin","createComponent","initComponentBySearch","eventedState","handles","eventMatches","on","DataTable","element","options","_toggleState","evt","data","dataset","label","previousValue","initialEvt","changeState","group","event","_zebraStripe","parentRows","forEach","item","index","classList","add","classParentRowEven","nextElementSibling","contains","classExpandableRow","classExpandableRowEven","remove","_initExpandableRows","expandableRows","classExpandableRowHidden","tableBody","removeChild","_toggleRowExpand","detail","parent","eventParentContainer","expandCells","indexOf","undefined","insertBefore","_toggleSort","classTableSortAscending","_toggleSelectAll","inputs","querySelectorAll","selectorCheckbox","checked","refreshRows","newExpandCells","selectorExpandCells","newExpandableRows","selectorExpandableRows","newParentRows","selectorParentRows","length","diffParentRows","filter","newRow","some","oldRow","diffExpandableRows","map","mergedExpandableRows","container","parentNode","querySelector","selectorTableBody","overflowInitialized","manage","eventElement","eventTrigger","which","callback","constructor","eventHandlers","prefix","selectorInit","eventBeforeExpand","eventAfterExpand","eventBeforeSort","eventAfterSort","eventBeforeSelectAll","eventAfterSelectAll","components","WeakMap","expand","sort"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport eventedState from '../../globals/js/mixins/evented-state';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nclass DataTable extends mixin(createComponent, initComponentBySearch, eventedState, handles) {\n  /**\n   * Data Table\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends EventedState\n   * @extends Handles\n   * @param {HTMLElement} element The root element of tables\n   * @param {Object} [options] the... options\n   * @param {string} [options.selectorInit] selector initialization\n   * @param {string} [options.selectorExpandCells] css selector for expand\n   * @param {string} [options.expandableRow] css selector for expand\n   * @param {string} [options.selectorParentRows] css selector for rows housing expansion\n   * @param {string} [options.selectorTableBody] root css for table body\n   * @param {string} [options.eventTrigger] selector for event bubble capture points\n   * @param {string} [options.eventParentContainer] used find the bubble container\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    this.container = element.parentNode; // requires the immediate parent to be the container\n    this.tableBody = this.element.querySelector(this.options.selectorTableBody);\n    this.expandCells = [];\n    this.expandableRows = [];\n    this.parentRows = [];\n    this.overflowInitialized = false;\n\n    this.refreshRows();\n\n    this.manage(\n      on(this.element, 'click', evt => {\n        const eventElement = eventMatches(evt, this.options.eventTrigger);\n        if (eventElement) {\n          this._toggleState(eventElement, evt);\n        }\n      })\n    );\n\n    this.manage(\n      on(this.element, 'keydown', evt => {\n        if (evt.which === 13) {\n          const eventElement = eventMatches(evt, this.options.eventTrigger);\n          if (eventElement) {\n            this._toggleState(eventElement, evt);\n          }\n        }\n      })\n    );\n  }\n\n  /**\n   * Toggles the given state.\n   * @private\n   * @param {Object} detail The detail of the event trigging this action.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n  _changeState(detail, callback) {\n    this[this.constructor.eventHandlers[detail.group]](detail);\n    callback();\n  }\n\n  /**\n   * Toggles the state of this component specified by `data-event` attribute of the given element.\n   * @param {HTMLElement} element The element.\n   * @param {Event} evt The event trigging this action.\n   */\n  _toggleState = (element, evt) => {\n    const data = element.dataset;\n    const label = data.label ? data.label : '';\n    const previousValue = data.previousValue ? data.previousValue : '';\n    const initialEvt = evt;\n    this.changeState({\n      group: data.event,\n      element,\n      label,\n      previousValue,\n      initialEvt,\n    });\n  };\n\n  /**\n   * Zebra stripes - done in javascript to handle expandable rows\n   */\n  _zebraStripe = parentRows => {\n    parentRows.forEach((item, index) => {\n      if (index % 2 === 0) {\n        item.classList.add(this.options.classParentRowEven);\n        if (item.nextElementSibling && item.nextElementSibling.classList.contains(this.options.classExpandableRow)) {\n          item.nextElementSibling.classList.add(this.options.classExpandableRowEven);\n        }\n      } else {\n        item.classList.remove(this.options.classParentRowEven);\n      }\n    });\n  };\n\n  /**\n   * Find all expandable rows and remove them from the DOM\n   */\n  _initExpandableRows = expandableRows => {\n    expandableRows.forEach(item => {\n      item.classList.remove(this.options.classExpandableRowHidden);\n      this.tableBody.removeChild(item);\n    });\n  };\n\n  /**\n   * On trigger, insert the expandable row back in\n   */\n  _toggleRowExpand = detail => {\n    const element = detail.element;\n    const parent = eventMatches(detail.initialEvt, this.options.eventParentContainer);\n\n    const index = this.expandCells.indexOf(element);\n    if (element.dataset.previousValue === undefined || element.dataset.previousValue === 'expanded') {\n      element.dataset.previousValue = 'collapsed';\n      this.tableBody.insertBefore(this.expandableRows[index], this.parentRows[index + 1]);\n    } else {\n      this.tableBody.removeChild(parent.nextElementSibling);\n      element.dataset.previousValue = 'expanded';\n    }\n  };\n\n  /**\n   * On trigger, flip the sort icon\n   */\n  _toggleSort = detail => {\n    const { element, previousValue } = detail;\n\n    if (!previousValue || previousValue === 'descending') {\n      element.dataset.previousValue = 'ascending';\n      element.classList.add(this.options.classTableSortAscending);\n    } else {\n      element.dataset.previousValue = 'descending';\n      element.classList.remove(this.options.classTableSortAscending);\n    }\n  };\n\n  /**\n   * On trigger, check all checkboxes\n   */\n  _toggleSelectAll = detail => {\n    const { element, previousValue } = detail;\n    const inputs = [...this.element.querySelectorAll(this.options.selectorCheckbox)];\n    if (!previousValue || previousValue === 'toggled') {\n      inputs.forEach(item => {\n        item.checked = true; // eslint-disable-line no-param-reassign\n      });\n      element.dataset.previousValue = 'off';\n    } else {\n      inputs.forEach(item => {\n        item.checked = false; // eslint-disable-line no-param-reassign\n      });\n      element.dataset.previousValue = 'toggled';\n    }\n  };\n\n  /**\n   * On fire, create the parent child rows + striping\n   */\n  refreshRows = () => {\n    const newExpandCells = [...this.element.querySelectorAll(this.options.selectorExpandCells)];\n    const newExpandableRows = [...this.element.querySelectorAll(this.options.selectorExpandableRows)];\n    const newParentRows = [...this.element.querySelectorAll(this.options.selectorParentRows)];\n\n    // check if this is a refresh or the first time\n    if (this.parentRows.length > 0) {\n      const diffParentRows = newParentRows.filter(newRow => !this.parentRows.some(oldRow => oldRow === newRow));\n\n      // check if there are expandable rows\n      if (newExpandableRows.length > 0) {\n        const diffExpandableRows = diffParentRows.map(newRow => newRow.nextElementSibling);\n        const mergedExpandableRows = [...this.expandableRows, ...diffExpandableRows];\n        this._initExpandableRows(diffExpandableRows);\n        this.expandableRows = mergedExpandableRows;\n      }\n\n      this._zebraStripe(newParentRows);\n    } else {\n      this._zebraStripe(newParentRows);\n\n      if (newExpandableRows.length > 0) {\n        this._initExpandableRows(newExpandableRows);\n        this.expandableRows = newExpandableRows;\n      }\n    }\n\n    this.expandCells = newExpandCells;\n    this.parentRows = newParentRows;\n  };\n\n  static components = new WeakMap();\n\n  static eventHandlers = {\n    expand: '_toggleRowExpand',\n    sort: '_toggleSort',\n    'select-all': '_toggleSelectAll',\n  };\n\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-responsive-table]',\n      selectorExpandCells: `.${prefix}--table-expand`,\n      selectorExpandableRows: `.${prefix}--expandable-row`,\n      selectorParentRows: `.${prefix}--parent-row`,\n      selectorTableBody: `.${prefix}--table-body`,\n      selectorCheckbox: `.${prefix}--checkbox`,\n      classParentRowEven: `${prefix}--parent-row--even`,\n      classExpandableRow: `${prefix}--expandable-row`,\n      classExpandableRowEven: `${prefix}--expandable-row--even`,\n      classExpandableRowHidden: `${prefix}--expandable-row--hidden`,\n      classTableSortAscending: `${prefix}--table-sort--ascending`,\n      eventBeforeExpand: 'responsive-table-beforetoggleexpand',\n      eventAfterExpand: 'responsive-table-aftertoggleexpand',\n      eventBeforeSort: 'responsive-table-beforetogglesort',\n      eventAfterSort: 'responsive-table-aftertogglesort',\n      eventBeforeSelectAll: 'responsive-table-beforetoggleselectall',\n      eventAfterSelectAll: 'responsive-table-aftertoggleselectall',\n      eventTrigger: '[data-event]',\n      eventParentContainer: '[data-parent-row]',\n    };\n  }\n}\n\nexport default DataTable;\n"]},"metadata":{},"sourceType":"module"}