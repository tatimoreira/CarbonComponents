{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar Toggle = function Toggle(_ref) {\n  var className = _ref.className,\n      defaultToggled = _ref.defaultToggled,\n      toggled = _ref.toggled,\n      _onChange = _ref.onChange,\n      onToggle = _ref.onToggle,\n      id = _ref.id,\n      labelA = _ref.labelA,\n      labelB = _ref.labelB,\n      other = _objectWithoutProperties(_ref, [\"className\", \"defaultToggled\", \"toggled\", \"onChange\", \"onToggle\", \"id\", \"labelA\", \"labelB\"]);\n\n  var input;\n  var wrapperClasses = classNames(_defineProperty({\n    'bx--form-item': true\n  }, className, className));\n  var checkedProps = {};\n\n  if (typeof toggled !== 'undefined') {\n    checkedProps.checked = toggled;\n  } else {\n    checkedProps.defaultChecked = defaultToggled;\n  }\n\n  return React.createElement(\"div\", {\n    className: wrapperClasses\n  }, React.createElement(\"input\", _extends({}, other, checkedProps, {\n    type: \"checkbox\",\n    id: id,\n    className: \"bx--toggle\",\n    onChange: function onChange(evt) {\n      _onChange && _onChange(evt);\n      onToggle(input.checked, id, evt);\n    },\n    ref: function ref(el) {\n      input = el;\n    }\n  })), React.createElement(\"label\", {\n    className: \"bx--toggle__label\",\n    htmlFor: id\n  }, React.createElement(\"span\", {\n    className: \"bx--toggle__text--left\"\n  }, labelA), React.createElement(\"span\", {\n    className: \"bx--toggle__appearance\"\n  }), React.createElement(\"span\", {\n    className: \"bx--toggle__text--right\"\n  }, labelB)));\n};\n\nToggle.propTypes = {\n  /**\n   * Specify a custom className to apply to the form-item node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the toggle should be on by default\n   */\n  defaultToggled: PropTypes.bool,\n\n  /**\n   * Provide an optional hook that is called when the control is toggled\n   */\n  onToggle: PropTypes.func,\n\n  /**\n   * Provide an id that unique represents the underlying <input>\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Specify whether the control is toggled\n   */\n  toggled: PropTypes.bool,\n\n  /**\n   * Specify the label for the \"off\" position\n   */\n  labelA: PropTypes.string.isRequired,\n\n  /**\n   * Specify the label for the \"on\" position\n   */\n  labelB: PropTypes.string.isRequired\n};\nToggle.defaultProps = {\n  defaultToggled: false,\n  labelA: 'Off',\n  labelB: 'On',\n  onToggle: function onToggle() {}\n};\nexport default Toggle;","map":null,"metadata":{},"sourceType":"module"}