{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\nvar stateChangeTypes = {\n  true: 'true',\n  false: 'false',\n  mixed: 'mixed'\n};\n\nvar Checkbox =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Checkbox, _mixin);\n\n  /**\n   * Checkbox UI.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a checkbox UI.\n   */\n  function Checkbox(element, options) {\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Checkbox).call(this, element, options));\n\n    _this.manage(on(_this.element, 'click', function (event) {\n      _this._handleClick(event);\n    }));\n\n    _this.manage(on(_this.element, 'focus', function (event) {\n      _this._handleFocus(event);\n    }));\n\n    _this.manage(on(_this.element, 'blur', function (event) {\n      _this._handleBlur(event);\n    }));\n\n    _this._indeterminateCheckbox();\n\n    _this._initCheckbox();\n\n    return _this;\n  }\n\n  _createClass(Checkbox, [{\n    key: \"_handleClick\",\n    value: function _handleClick() {\n      if (this.element.checked === true) {\n        this.element.setAttribute('checked', '');\n        this.element.setAttribute('aria-checked', 'true');\n        this.element.checked = true; // nested checkboxes inside labels\n\n        if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n          this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'true');\n        }\n      } else if (this.element.checked === false) {\n        this.element.removeAttribute('checked');\n        this.element.setAttribute('aria-checked', 'false');\n        this.element.checked = false; // nested checkboxes inside labels\n\n        if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n          this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'false');\n        }\n      }\n    }\n  }, {\n    key: \"_handleFocus\",\n    value: function _handleFocus() {\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.classList.add(this.options.classLabelFocused);\n      }\n    }\n  }, {\n    key: \"_handleBlur\",\n    value: function _handleBlur() {\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.classList.remove(this.options.classLabelFocused);\n      }\n    }\n    /**\n     * Sets the new checkbox state.\n     * @param {boolean|string} [state]\n     *   The new checkbox state to set. `mixed` to put checkbox in indeterminate state.\n     *   If omitted, this method simply makes the style reflect `aria-checked` attribute.\n     */\n\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      if (state === undefined || stateChangeTypes[state] === undefined) {\n        throw new TypeError('setState expects a value of true, false or mixed.');\n      }\n\n      this.element.setAttribute('aria-checked', state);\n      this.element.indeterminate = state === stateChangeTypes.mixed;\n      this.element.checked = state === stateChangeTypes.true;\n      var container = this.element.closest(this.options.selectorContainedCheckboxState);\n\n      if (container) {\n        container.setAttribute(this.options.attribContainedCheckboxState, state);\n      }\n    }\n  }, {\n    key: \"setDisabled\",\n    value: function setDisabled(value) {\n      if (value === undefined) {\n        throw new TypeError('setDisabled expects a boolean value of true or false');\n      }\n\n      if (value === true) {\n        this.element.setAttribute('disabled', true);\n      } else if (value === false) {\n        this.element.removeAttribute('disabled');\n      }\n\n      var container = this.element.closest(this.options.selectorContainedCheckboxDisabled);\n\n      if (container) {\n        container.setAttribute(this.options.attribContainedCheckboxDisabled, value);\n      }\n    }\n  }, {\n    key: \"_indeterminateCheckbox\",\n    value: function _indeterminateCheckbox() {\n      if (this.element.getAttribute('aria-checked') === 'mixed') {\n        this.element.indeterminate = true;\n      }\n\n      if (this.element.indeterminate === true) {\n        this.element.setAttribute('aria-checked', 'mixed');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.indeterminate === true) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'mixed');\n      }\n    }\n  }, {\n    key: \"_initCheckbox\",\n    value: function _initCheckbox() {\n      if (this.element.checked === true) {\n        this.element.setAttribute('aria-checked', 'true');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.checked) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'true');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxDisabled, 'false');\n      }\n\n      if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.disabled) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxDisabled, 'true');\n      }\n    }\n    /**\n     * The map associating DOM element and copy button UI instance.\n     * @member Checkbox.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode Checkbox.create .create()}, or {@linkcode Checkbox.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode Checkbox.init .init()} works.\n     * @member Checkbox.options\n     * @type {Object}\n     * @property {string} selectorInit The data attribute to find copy button UIs.\n     * @property {string} selectorContainedCheckboxState The CSS selector to find a container of checkbox preserving checked state.\n     * @property {string} selectorContainedCheckboxDisabled\n     *   The CSS selector to find a container of checkbox preserving disabled state.\n     * @property {string} classLabel The CSS class for the label.\n     * @property {string} classLabelFocused The CSS class for the focused label.\n     * @property {string} attribContainedCheckboxState The attribute name for the checked state of contained checkbox.\n     * @property {string} attribContainedCheckboxDisabled The attribute name for the disabled state of contained checkbox.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: \".\".concat(prefix, \"--checkbox\"),\n        selectorContainedCheckboxState: '[data-contained-checkbox-state]',\n        selectorContainedCheckboxDisabled: '[data-contained-checkbox-disabled]',\n        classLabel: \"\".concat(prefix, \"--checkbox-label\"),\n        classLabelFocused: \"\".concat(prefix, \"--checkbox-label__focus\"),\n        attribContainedCheckboxState: 'data-contained-checkbox-state',\n        attribContainedCheckboxDisabled: 'data-contained-checkbox-disabled'\n      };\n    }\n  }]);\n\n  return Checkbox;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nCheckbox.components = new WeakMap();\nCheckbox.stateChangeTypes = stateChangeTypes;\nexport default Checkbox;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/checkbox/checkbox.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","on","stateChangeTypes","true","false","mixed","Checkbox","element","options","manage","event","_handleClick","_handleFocus","_handleBlur","_indeterminateCheckbox","_initCheckbox","checked","setAttribute","parentElement","classList","contains","classLabel","attribContainedCheckboxState","removeAttribute","add","classLabelFocused","remove","state","undefined","TypeError","indeterminate","container","closest","selectorContainedCheckboxState","value","selectorContainedCheckboxDisabled","attribContainedCheckboxDisabled","getAttribute","disabled","prefix","selectorInit","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\n\nconst stateChangeTypes = {\n  true: 'true',\n  false: 'false',\n  mixed: 'mixed',\n};\n\nclass Checkbox extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Checkbox UI.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a checkbox UI.\n   */\n\n  constructor(element, options) {\n    super(element, options);\n    this.manage(\n      on(this.element, 'click', event => {\n        this._handleClick(event);\n      })\n    );\n    this.manage(\n      on(this.element, 'focus', event => {\n        this._handleFocus(event);\n      })\n    );\n    this.manage(\n      on(this.element, 'blur', event => {\n        this._handleBlur(event);\n      })\n    );\n\n    this._indeterminateCheckbox();\n    this._initCheckbox();\n  }\n\n  _handleClick() {\n    if (this.element.checked === true) {\n      this.element.setAttribute('checked', '');\n      this.element.setAttribute('aria-checked', 'true');\n      this.element.checked = true;\n\n      // nested checkboxes inside labels\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'true');\n      }\n    } else if (this.element.checked === false) {\n      this.element.removeAttribute('checked');\n      this.element.setAttribute('aria-checked', 'false');\n      this.element.checked = false;\n\n      // nested checkboxes inside labels\n      if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n        this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'false');\n      }\n    }\n  }\n\n  _handleFocus() {\n    if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n      this.element.parentElement.classList.add(this.options.classLabelFocused);\n    }\n  }\n\n  _handleBlur() {\n    if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n      this.element.parentElement.classList.remove(this.options.classLabelFocused);\n    }\n  }\n\n  /**\n   * Sets the new checkbox state.\n   * @param {boolean|string} [state]\n   *   The new checkbox state to set. `mixed` to put checkbox in indeterminate state.\n   *   If omitted, this method simply makes the style reflect `aria-checked` attribute.\n   */\n  setState(state) {\n    if (state === undefined || stateChangeTypes[state] === undefined) {\n      throw new TypeError('setState expects a value of true, false or mixed.');\n    }\n\n    this.element.setAttribute('aria-checked', state);\n    this.element.indeterminate = state === stateChangeTypes.mixed;\n    this.element.checked = state === stateChangeTypes.true;\n\n    const container = this.element.closest(this.options.selectorContainedCheckboxState);\n    if (container) {\n      container.setAttribute(this.options.attribContainedCheckboxState, state);\n    }\n  }\n\n  setDisabled(value) {\n    if (value === undefined) {\n      throw new TypeError('setDisabled expects a boolean value of true or false');\n    }\n    if (value === true) {\n      this.element.setAttribute('disabled', true);\n    } else if (value === false) {\n      this.element.removeAttribute('disabled');\n    }\n    const container = this.element.closest(this.options.selectorContainedCheckboxDisabled);\n    if (container) {\n      container.setAttribute(this.options.attribContainedCheckboxDisabled, value);\n    }\n  }\n\n  _indeterminateCheckbox() {\n    if (this.element.getAttribute('aria-checked') === 'mixed') {\n      this.element.indeterminate = true;\n    }\n    if (this.element.indeterminate === true) {\n      this.element.setAttribute('aria-checked', 'mixed');\n    }\n    if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.indeterminate === true) {\n      this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'mixed');\n    }\n  }\n\n  _initCheckbox() {\n    if (this.element.checked === true) {\n      this.element.setAttribute('aria-checked', 'true');\n    }\n    if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.checked) {\n      this.element.parentElement.setAttribute(this.options.attribContainedCheckboxState, 'true');\n    }\n    if (this.element.parentElement.classList.contains(this.options.classLabel)) {\n      this.element.parentElement.setAttribute(this.options.attribContainedCheckboxDisabled, 'false');\n    }\n    if (this.element.parentElement.classList.contains(this.options.classLabel) && this.element.disabled) {\n      this.element.parentElement.setAttribute(this.options.attribContainedCheckboxDisabled, 'true');\n    }\n  }\n\n  /**\n   * The map associating DOM element and copy button UI instance.\n   * @member Checkbox.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor, {@linkcode Checkbox.create .create()}, or {@linkcode Checkbox.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode Checkbox.init .init()} works.\n   * @member Checkbox.options\n   * @type {Object}\n   * @property {string} selectorInit The data attribute to find copy button UIs.\n   * @property {string} selectorContainedCheckboxState The CSS selector to find a container of checkbox preserving checked state.\n   * @property {string} selectorContainedCheckboxDisabled\n   *   The CSS selector to find a container of checkbox preserving disabled state.\n   * @property {string} classLabel The CSS class for the label.\n   * @property {string} classLabelFocused The CSS class for the focused label.\n   * @property {string} attribContainedCheckboxState The attribute name for the checked state of contained checkbox.\n   * @property {string} attribContainedCheckboxDisabled The attribute name for the disabled state of contained checkbox.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: `.${prefix}--checkbox`,\n      selectorContainedCheckboxState: '[data-contained-checkbox-state]',\n      selectorContainedCheckboxDisabled: '[data-contained-checkbox-disabled]',\n      classLabel: `${prefix}--checkbox-label`,\n      classLabelFocused: `${prefix}--checkbox-label__focus`,\n      attribContainedCheckboxState: 'data-contained-checkbox-state',\n      attribContainedCheckboxDisabled: 'data-contained-checkbox-disabled',\n    };\n  }\n\n  static stateChangeTypes = stateChangeTypes;\n}\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}