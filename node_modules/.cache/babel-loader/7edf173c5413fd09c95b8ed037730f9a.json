{"ast":null,"code":"import _typeof2 from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/typeof\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport Copy from '../Copy';\nimport CopyButton from '../CopyButton';\nimport Icon from '../Icon';\n\nvar CodeSnippet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CodeSnippet, _Component);\n\n  function CodeSnippet() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CodeSnippet);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CodeSnippet)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      shouldShowMoreLessBtn: false,\n      expandedCode: false\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"expandCode\", function () {\n      _this.setState({\n        expandedCode: !_this.state.expandedCode\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(CodeSnippet, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.codeContent) {\n        if (this.codeContent.getBoundingClientRect().height > 255) {\n          this.setState({\n            shouldShowMoreLessBtn: true\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.children !== prevProps.children && this.codeContent) {\n        if (this.codeContent.getBoundingClientRect().height > 255) {\n          this.setState({\n            shouldShowMoreLessBtn: true\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          type = _this$props.type,\n          children = _this$props.children,\n          feedback = _this$props.feedback,\n          onClick = _this$props.onClick,\n          ariaLabel = _this$props.ariaLabel,\n          copyLabel = _this$props.copyLabel,\n          copyButtonDescription = _this$props.copyButtonDescription,\n          light = _this$props.light,\n          showMoreText = _this$props.showMoreText,\n          showLessText = _this$props.showLessText,\n          other = _objectWithoutProperties(_this$props, [\"className\", \"type\", \"children\", \"feedback\", \"onClick\", \"ariaLabel\", \"copyLabel\", \"copyButtonDescription\", \"light\", \"showMoreText\", \"showLessText\"]);\n\n      var codeSnippetClasses = classNames(className, {\n        'bx--snippet': true,\n        'bx--snippet--single': type === 'single',\n        'bx--snippet--multi': type === 'multi',\n        'bx--snippet--inline': type === 'inline',\n        'bx--snippet--expand': this.state.expandedCode,\n        'bx--snippet--light': light\n      });\n      var expandCodeBtnText = this.state.expandedCode ? showLessText : showMoreText;\n      var moreLessBtn = React.createElement(\"button\", {\n        className: \"bx--btn bx--btn--ghost bx--btn--sm bx--snippet-btn--expand\",\n        type: \"button\",\n        onClick: this.expandCode\n      }, React.createElement(\"span\", {\n        className: \"bx--snippet-btn--text\"\n      }, expandCodeBtnText), React.createElement(Icon, {\n        \"aria-hidden\": \"true\",\n        alt: expandCodeBtnText,\n        name: \"chevron--down\",\n        description: expandCodeBtnText,\n        className: \"bx--icon-chevron--down\"\n      }));\n      var code = React.createElement(\"div\", {\n        role: \"textbox\",\n        tabIndex: 0,\n        className: \"bx--snippet-container\",\n        \"aria-label\": ariaLabel ? ariaLabel : 'code-snippet'\n      }, React.createElement(\"code\", null, React.createElement(\"pre\", {\n        ref: function ref(codeContent) {\n          _this2.codeContent = codeContent;\n        }\n      }, children)));\n      var copy = React.createElement(CopyButton, {\n        onClick: onClick,\n        feedback: feedback,\n        iconDescription: copyButtonDescription\n      });\n\n      if (type === 'inline') {\n        return React.createElement(Copy, {\n          className: codeSnippetClasses,\n          \"aria-label\": copyLabel,\n          feedback: feedback\n        }, React.createElement(\"code\", null, children));\n      }\n\n      if (type === 'single') {\n        return React.createElement(\"div\", _extends({}, other, {\n          className: codeSnippetClasses\n        }), code, copy);\n      }\n\n      if (!this.state.shouldShowMoreLessBtn && type === 'multi') {\n        return React.createElement(\"div\", _extends({}, other, {\n          className: codeSnippetClasses\n        }), code, copy);\n      }\n\n      if (this.state.shouldShowMoreLessBtn && type === 'multi') {\n        return React.createElement(\"div\", _extends({\n          className: codeSnippetClasses\n        }, other), code, copy, moreLessBtn);\n      }\n    }\n  }]);\n\n  return CodeSnippet;\n}(Component);\n\n_defineProperty(CodeSnippet, \"propTypes\", {\n  /**\n   * Provide the type of Code Snippet\n   */\n  type: PropTypes.oneOf(['single', 'inline', 'multi']),\n\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide the content of your CodeSnippet as a string\n   */\n  children: PropTypes.string,\n\n  /**\n   * Specify the string displayed when the snippet is copied\n   */\n  feedback: PropTypes.string,\n\n  /**\n   * Specify the label used for the Copy Button\n   */\n  copyLabel: PropTypes.string,\n\n  /**\n   * Specify the description for the Copy Button\n   */\n  copyButtonDescription: PropTypes.string,\n\n  /**\n   * An optional handler to listen to the `onClick` even fired by the Copy\n   * Button\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Specify a label to be read by screen readers on the containing <textbox>\n   * node\n   */\n  ariaLabel: PropTypes.string,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet text is more\n   * than 15 lines\n   */\n  showMoreText: PropTypes.string,\n\n  /**\n   * Specify a string that is displayed when the Code Snippet has been\n   * interacted with to show more lines\n   */\n  showLessText: PropTypes.string,\n\n  /**\n   * Specify whether you are using the light variant of the Code Snippet,\n   * typically used for inline snippest to display an alternate color\n   */\n  light: PropTypes.bool\n});\n\n_defineProperty(CodeSnippet, \"defaultProps\", {\n  type: 'single',\n  showMoreText: 'Show more',\n  showLessText: 'Show less'\n});\n\nexport { CodeSnippet as default };","map":null,"metadata":{},"sourceType":"module"}