{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar Accordion =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Accordion, _mixin);\n\n  /**\n   * Accordion.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as an accordion.\n   */\n  function Accordion(element, options) {\n    var _this;\n\n    _classCallCheck(this, Accordion);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Accordion).call(this, element, options));\n\n    _this.manage(on(_this.element, 'click', function (event) {\n      var item = eventMatches(event, _this.options.selectorAccordionItem);\n\n      if (item && !eventMatches(event, _this.options.selectorAccordionContent)) {\n        _this._toggle(item);\n      }\n    }));\n    /**\n     *\n     *  DEPRECATE in v8\n     *\n     *  Swapping to a button elemenet instead of a div\n     *  automatically maps click events to keypress as well\n     *  This event listener now is only added if user is using\n     *  the older markup\n     */\n\n\n    if (!_this._checkIfButton()) {\n      _this.manage(on(_this.element, 'keypress', function (event) {\n        var item = eventMatches(event, _this.options.selectorAccordionItem);\n\n        if (item && !eventMatches(event, _this.options.selectorAccordionContent)) {\n          _this._handleKeypress(event);\n        }\n      }));\n    }\n\n    return _this;\n  }\n\n  _createClass(Accordion, [{\n    key: \"_checkIfButton\",\n    value: function _checkIfButton() {\n      return this.element.firstElementChild.firstElementChild.nodeName === 'BUTTON';\n    }\n    /**\n     * Handles toggling of active state of accordion via keyboard\n     * @param {Event} event The event triggering this method.\n     */\n\n  }, {\n    key: \"_handleKeypress\",\n    value: function _handleKeypress(event) {\n      if (event.which === 13 || event.which === 32) {\n        this._toggle(event.target);\n      }\n    }\n  }, {\n    key: \"_toggle\",\n    value: function _toggle(element) {\n      var heading = element.querySelector(this.options.selectorAccordionItemHeading);\n      var expanded = heading.getAttribute('aria-expanded');\n\n      if (expanded !== null) {\n        heading.setAttribute('aria-expanded', expanded === 'true' ? 'false' : 'true');\n      }\n\n      element.classList.toggle(this.options.classActive);\n    }\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode NumberInput.create .create()}, or {@linkcode NumberInput.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode NumberInput.init .init()} works.\n     * @property {string} selectorInit The CSS selector to find accordion UIs.\n     */\n\n  }], [{\n    key: \"options\",\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-accordion]',\n        selectorAccordionItem: \".\".concat(prefix, \"--accordion__item\"),\n        selectorAccordionItemHeading: \".\".concat(prefix, \"--accordion__heading\"),\n        selectorAccordionContent: \".\".concat(prefix, \"--accordion__content\"),\n        classActive: \"\".concat(prefix, \"--accordion__item--active\")\n      };\n    }\n    /**\n     * The map associating DOM element and accordion UI instance.\n     * @type {WeakMap}\n     */\n\n  }]);\n\n  return Accordion;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nAccordion.components = new WeakMap();\nexport default Accordion;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/accordion/accordion.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","eventMatches","on","Accordion","element","options","manage","event","item","selectorAccordionItem","selectorAccordionContent","_toggle","_checkIfButton","_handleKeypress","firstElementChild","nodeName","which","target","heading","querySelector","selectorAccordionItemHeading","expanded","getAttribute","setAttribute","classList","toggle","classActive","prefix","selectorInit","components","WeakMap"],"mappings":";;;;;AAAA,OAAOA,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,qBAAP,MAAkC,kDAAlC;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,EAAP,MAAe,0BAAf;;IAEMC,S;;;;;AACJ;;;;;;;AAOA,qBAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAAA;;AAC5B,mFAAMD,OAAN,EAAeC,OAAf;;AACA,UAAKC,MAAL,CACEJ,EAAE,CAAC,MAAKE,OAAN,EAAe,OAAf,EAAwB,UAAAG,KAAK,EAAI;AACjC,UAAMC,IAAI,GAAGP,YAAY,CAACM,KAAD,EAAQ,MAAKF,OAAL,CAAaI,qBAArB,CAAzB;;AACA,UAAID,IAAI,IAAI,CAACP,YAAY,CAACM,KAAD,EAAQ,MAAKF,OAAL,CAAaK,wBAArB,CAAzB,EAAyE;AACvE,cAAKC,OAAL,CAAaH,IAAb;AACD;AACF,KALC,CADJ;AASA;;;;;;;;;;;AAUA,QAAI,CAAC,MAAKI,cAAL,EAAL,EAA4B;AAC1B,YAAKN,MAAL,CACEJ,EAAE,CAAC,MAAKE,OAAN,EAAe,UAAf,EAA2B,UAAAG,KAAK,EAAI;AACpC,YAAMC,IAAI,GAAGP,YAAY,CAACM,KAAD,EAAQ,MAAKF,OAAL,CAAaI,qBAArB,CAAzB;;AAEA,YAAID,IAAI,IAAI,CAACP,YAAY,CAACM,KAAD,EAAQ,MAAKF,OAAL,CAAaK,wBAArB,CAAzB,EAAyE;AACvE,gBAAKG,eAAL,CAAqBN,KAArB;AACD;AACF,OANC,CADJ;AASD;;AA/B2B;AAgC7B;;;;qCAEgB;AACf,aAAO,KAAKH,OAAL,CAAaU,iBAAb,CAA+BA,iBAA/B,CAAiDC,QAAjD,KAA8D,QAArE;AACD;AAED;;;;;;;oCAIgBR,K,EAAO;AACrB,UAAIA,KAAK,CAACS,KAAN,KAAgB,EAAhB,IAAsBT,KAAK,CAACS,KAAN,KAAgB,EAA1C,EAA8C;AAC5C,aAAKL,OAAL,CAAaJ,KAAK,CAACU,MAAnB;AACD;AACF;;;4BAEOb,O,EAAS;AACf,UAAMc,OAAO,GAAGd,OAAO,CAACe,aAAR,CAAsB,KAAKd,OAAL,CAAae,4BAAnC,CAAhB;AACA,UAAMC,QAAQ,GAAGH,OAAO,CAACI,YAAR,CAAqB,eAArB,CAAjB;;AAEA,UAAID,QAAQ,KAAK,IAAjB,EAAuB;AACrBH,QAAAA,OAAO,CAACK,YAAR,CAAqB,eAArB,EAAsCF,QAAQ,KAAK,MAAb,GAAsB,OAAtB,GAAgC,MAAtE;AACD;;AAEDjB,MAAAA,OAAO,CAACoB,SAAR,CAAkBC,MAAlB,CAAyB,KAAKpB,OAAL,CAAaqB,WAAtC;AACD;AAED;;;;;;;;;;wBAOqB;AAAA,UACXC,MADW,GACA/B,QADA,CACX+B,MADW;AAEnB,aAAO;AACLC,QAAAA,YAAY,EAAE,kBADT;AAELnB,QAAAA,qBAAqB,aAAMkB,MAAN,sBAFhB;AAGLP,QAAAA,4BAA4B,aAAMO,MAAN,yBAHvB;AAILjB,QAAAA,wBAAwB,aAAMiB,MAAN,yBAJnB;AAKLD,QAAAA,WAAW,YAAKC,MAAL;AALN,OAAP;AAOD;AAED;;;;;;;;EArFsB9B,KAAK,CAACC,eAAD,EAAkBC,qBAAlB,EAAyCC,OAAzC,C;;AAAvBG,S,CAyFG0B,U,GAAa,IAAIC,OAAJ,E;AAGtB,eAAe3B,SAAf","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nclass Accordion extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Accordion.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as an accordion.\n   */\n  constructor(element, options) {\n    super(element, options);\n    this.manage(\n      on(this.element, 'click', event => {\n        const item = eventMatches(event, this.options.selectorAccordionItem);\n        if (item && !eventMatches(event, this.options.selectorAccordionContent)) {\n          this._toggle(item);\n        }\n      })\n    );\n\n    /**\n     *\n     *  DEPRECATE in v8\n     *\n     *  Swapping to a button elemenet instead of a div\n     *  automatically maps click events to keypress as well\n     *  This event listener now is only added if user is using\n     *  the older markup\n     */\n\n    if (!this._checkIfButton()) {\n      this.manage(\n        on(this.element, 'keypress', event => {\n          const item = eventMatches(event, this.options.selectorAccordionItem);\n\n          if (item && !eventMatches(event, this.options.selectorAccordionContent)) {\n            this._handleKeypress(event);\n          }\n        })\n      );\n    }\n  }\n\n  _checkIfButton() {\n    return this.element.firstElementChild.firstElementChild.nodeName === 'BUTTON';\n  }\n\n  /**\n   * Handles toggling of active state of accordion via keyboard\n   * @param {Event} event The event triggering this method.\n   */\n  _handleKeypress(event) {\n    if (event.which === 13 || event.which === 32) {\n      this._toggle(event.target);\n    }\n  }\n\n  _toggle(element) {\n    const heading = element.querySelector(this.options.selectorAccordionItemHeading);\n    const expanded = heading.getAttribute('aria-expanded');\n\n    if (expanded !== null) {\n      heading.setAttribute('aria-expanded', expanded === 'true' ? 'false' : 'true');\n    }\n\n    element.classList.toggle(this.options.classActive);\n  }\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor,\n   * {@linkcode NumberInput.create .create()}, or {@linkcode NumberInput.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode NumberInput.init .init()} works.\n   * @property {string} selectorInit The CSS selector to find accordion UIs.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-accordion]',\n      selectorAccordionItem: `.${prefix}--accordion__item`,\n      selectorAccordionItemHeading: `.${prefix}--accordion__heading`,\n      selectorAccordionContent: `.${prefix}--accordion__content`,\n      classActive: `${prefix}--accordion__item--active`,\n    };\n  }\n\n  /**\n   * The map associating DOM element and accordion UI instance.\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n}\n\nexport default Accordion;\n"]},"metadata":{},"sourceType":"module"}