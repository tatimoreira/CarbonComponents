{"ast":null,"code":"import { getCellId } from './cells';\n/**\n * Normalize a collection of rows with the given headers.\n *\n * @param {Array<Object>} rows\n * @param {Array<Object>} headers\n * @returns {Object}\n */\n\nvar normalize = function normalize(rows, headers) {\n  var prevState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var prevRowsByIds = prevState.rowsById;\n  var rowIds = new Array(rows.length);\n  var rowsById = {};\n  var cellsById = {};\n  rows.forEach(function (row, i) {\n    rowIds[i] = row.id; // Initialize the row info and state values, namely for selection and\n    // expansion\n\n    rowsById[row.id] = {\n      id: row.id,\n      isSelected: false,\n      isExpanded: false,\n      cells: new Array(headers.length)\n    }; // If we have a previous state, and the row existed in that previous state,\n    // then we'll set the state values of the row to the previous state values.\n\n    if (prevRowsByIds && prevRowsByIds[row.id] !== undefined) {\n      rowsById[row.id].isSelected = prevRowsByIds[row.id].isSelected;\n      rowsById[row.id].isExpanded = prevRowsByIds[row.id].isExpanded;\n    }\n\n    headers.forEach(function (_ref, i) {\n      var key = _ref.key;\n      var id = getCellId(row.id, key); // Initialize the cell info and state values, namely for editing\n\n      cellsById[id] = {\n        id: id,\n        value: row[key],\n        isEditable: false,\n        isEditing: false,\n        isValid: true,\n        errors: null,\n        info: {\n          header: key\n        }\n      }; // TODO: When working on inline edits, we'll need to derive the state\n      // values similarly to rows above.\n\n      rowsById[row.id].cells[i] = id;\n    });\n  });\n  return {\n    rowIds: rowIds,\n    rowsById: rowsById,\n    cellsById: cellsById\n  };\n};\n\nexport default normalize;","map":null,"metadata":{},"sourceType":"module"}