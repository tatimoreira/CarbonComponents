{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Counterpart to `normalize` for a collection of rows. This method unravels the\n * normalization step that we use to build the given parameters in order to\n * return a natural interface to working with rows for a consumer.\n *\n * The default heuristic here is to map through all the row ids and return the\n * value of the row for the given id, in addition to adding a `cells` key that\n * contains the results of mapping over the rows cells and getting individual\n * cell info.\n *\n * @param {Array<string>} rowIds array of row ids in the table\n * @param {Object} rowsById object containing lookups for rows by id\n * @param {Object} cellsById object containing lookups for cells by id\n */\n\n\nvar denormalize = function denormalize(rowIds, rowsById, cellsById) {\n  return rowIds.map(function (id) {\n    return _objectSpread({}, rowsById[id], {\n      cells: rowsById[id].cells.map(function (cellId) {\n        return cellsById[cellId];\n      })\n    });\n  });\n};\n\nexport default denormalize;","map":null,"metadata":{},"sourceType":"module"}