{"ast":null,"code":"/**\n * `createChainableTypeChecker` is used inside of our custom prop validators to\n * add in chaining `isRequired` on a given prop validator.\n */\nvar createChainableTypeChecker = function createChainableTypeChecker(validate) {\n  // `checkType` is borrowed heavily from the `prop-types` package\n  var checkType = function checkType(isRequired, props, propName, componentName, location) {\n    if (props[propName] == null) {\n      if (isRequired) {\n        if (props[propName] === null) {\n          return new Error(\"The \".concat(location, \" `\").concat(propName, \"` is marked as required in \") + \"\".concat(componentName, \", but its value is `null`.\"));\n        }\n\n        return new Error(\"The \".concat(location, \" `\").concat(propName, \"` is marked as required in \") + \"\".concat(componentName, \", but its value is `undefined`.\"));\n      }\n\n      return null;\n    } else {\n      return validate(props, propName, componentName, location);\n    }\n  }; // By default, the validator will have `isRequired` set to false. However, we\n  // also define the `isRequired` property on the validtor so that consumers can\n  // chain their prop validator and assert that the property is required.\n\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n  return chainedCheckType;\n};\n\nexport default createChainableTypeChecker;","map":null,"metadata":{},"sourceType":"module"}