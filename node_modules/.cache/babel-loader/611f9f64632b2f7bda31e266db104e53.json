{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport eventedState from '../../globals/js/mixins/evented-state';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar ContentSwitcher =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(ContentSwitcher, _mixin);\n\n  /**\n   * Set of content switcher buttons.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends EventedState\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  function ContentSwitcher(element, options) {\n    var _this;\n\n    _classCallCheck(this, ContentSwitcher);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContentSwitcher).call(this, element, options));\n\n    _this.manage(on(_this.element, 'click', function (event) {\n      _this._handleClick(event);\n    }));\n\n    return _this;\n  }\n  /**\n   * Handles click on content switcher button set.\n   * If the click is on a content switcher button, activates it.\n   * @param {Event} event The event triggering this method.\n   */\n\n\n  _createClass(ContentSwitcher, [{\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      var button = eventMatches(event, this.options.selectorButton);\n\n      if (button) {\n        this.changeState({\n          group: 'selected',\n          item: button,\n          launchingEvent: event\n        });\n      }\n    }\n    /**\n     * Internal method of {@linkcode ContentSwitcher#setActive .setActive()}, to select a content switcher button.\n     * @private\n     * @param {Object} detail The detail of the event trigging this action.\n     * @param {HTMLElement} detail.item The button to be selected.\n     * @param {Function} callback Callback called when change in state completes.\n     */\n\n  }, {\n    key: \"_changeState\",\n    value: function _changeState(detail, callback) {\n      var _this2 = this;\n\n      var item = detail.item; // `options.selectorLink` is not defined in this class itself, code here primary is for inherited classes\n\n      var itemLink = item.querySelector(this.options.selectorLink);\n\n      if (itemLink) {\n        _toConsumableArray(this.element.querySelectorAll(this.options.selectorLink)).forEach(function (link) {\n          if (link !== itemLink) {\n            link.setAttribute('aria-selected', 'false');\n          }\n        });\n\n        itemLink.setAttribute('aria-selected', 'true');\n      }\n\n      var selectorButtons = _toConsumableArray(this.element.querySelectorAll(this.options.selectorButton));\n\n      selectorButtons.forEach(function (button) {\n        if (button !== item) {\n          button.setAttribute('aria-selected', false);\n          button.classList.toggle(_this2.options.classActive, false);\n\n          _toConsumableArray(button.ownerDocument.querySelectorAll(button.dataset.target)).forEach(function (element) {\n            element.setAttribute('hidden', '');\n            element.setAttribute('aria-hidden', 'true');\n          });\n        }\n      });\n      item.classList.toggle(this.options.classActive, true);\n      item.setAttribute('aria-selected', true);\n\n      _toConsumableArray(item.ownerDocument.querySelectorAll(item.dataset.target)).forEach(function (element) {\n        element.removeAttribute('hidden');\n        element.setAttribute('aria-hidden', 'false');\n      });\n\n      if (callback) {\n        callback();\n      }\n    }\n    /**\n     * Selects a content switcher button.\n     * If the selected button has `data-target` attribute, DOM elements it points to as a CSS selector will be shown.\n     * DOM elements associated with unselected buttons in the same way will be hidden.\n     * @param {HTMLElement} item The button to be selected.\n     * @param {ChangeState~callback} callback The callback is called once selection is finished\n     * or is canceled. Will only invoke callback if it's passed in.\n     */\n\n  }, {\n    key: \"setActive\",\n    value: function setActive(item, callback) {\n      this.changeState({\n        group: 'selected',\n        item: item\n      }, function (error) {\n        if (error) {\n          if (callback) {\n            callback(Object.assign(error, {\n              item: item\n            }));\n          }\n        } else if (callback) {\n          callback(null, item);\n        }\n      });\n    }\n    /**\n     * The map associating DOM element and content switcher set instance.\n     * @member ContentSwitcher.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor,\n     * {@linkcode ContentSwitcher.create .create()}, or {@linkcode ContentSwitcher.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode ContentSwitcher.init .init()} works.\n     * @member ContentSwitcher.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find content switcher button set.\n     * @property {string} [selectorButton] The CSS selector to find switcher buttons.\n     * @property {string} [selectorButtonSelected] The CSS selector to find the selected switcher button.\n     * @property {string} [classActive] The CSS class for switcher button's selected state.\n     * @property {string} [eventBeforeSelected]\n     *   The name of the custom event fired before a switcher button is selected.\n     *   Cancellation of this event stops selection of content switcher button.\n     * @property {string} [eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-content-switcher]',\n        selectorButton: \"input[type=\\\"radio\\\"], .\".concat(prefix, \"--content-switcher-btn\"),\n        classActive: \"\".concat(prefix, \"--content-switcher--selected\"),\n        eventBeforeSelected: 'content-switcher-beingselected',\n        eventAfterSelected: 'content-switcher-selected'\n      };\n    }\n  }]);\n\n  return ContentSwitcher;\n}(mixin(createComponent, initComponentBySearch, eventedState, handles));\n\nContentSwitcher.components = new WeakMap();\nexport default ContentSwitcher;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/content-switcher/content-switcher.js"],"names":["settings","mixin","createComponent","initComponentBySearch","eventedState","handles","eventMatches","on","ContentSwitcher","element","options","manage","event","_handleClick","button","selectorButton","changeState","group","item","launchingEvent","detail","callback","itemLink","querySelector","selectorLink","querySelectorAll","forEach","link","setAttribute","selectorButtons","classList","toggle","classActive","ownerDocument","dataset","target","removeAttribute","error","Object","assign","prefix","selectorInit","eventBeforeSelected","eventAfterSelected","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport eventedState from '../../globals/js/mixins/evented-state';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nclass ContentSwitcher extends mixin(createComponent, initComponentBySearch, eventedState, handles) {\n  /**\n   * Set of content switcher buttons.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends EventedState\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  constructor(element, options) {\n    super(element, options);\n    this.manage(\n      on(this.element, 'click', event => {\n        this._handleClick(event);\n      })\n    );\n  }\n\n  /**\n   * Handles click on content switcher button set.\n   * If the click is on a content switcher button, activates it.\n   * @param {Event} event The event triggering this method.\n   */\n  _handleClick(event) {\n    const button = eventMatches(event, this.options.selectorButton);\n\n    if (button) {\n      this.changeState({\n        group: 'selected',\n        item: button,\n        launchingEvent: event,\n      });\n    }\n  }\n\n  /**\n   * Internal method of {@linkcode ContentSwitcher#setActive .setActive()}, to select a content switcher button.\n   * @private\n   * @param {Object} detail The detail of the event trigging this action.\n   * @param {HTMLElement} detail.item The button to be selected.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n  _changeState(detail, callback) {\n    const item = detail.item;\n    // `options.selectorLink` is not defined in this class itself, code here primary is for inherited classes\n    const itemLink = item.querySelector(this.options.selectorLink);\n    if (itemLink) {\n      [...this.element.querySelectorAll(this.options.selectorLink)].forEach(link => {\n        if (link !== itemLink) {\n          link.setAttribute('aria-selected', 'false');\n        }\n      });\n      itemLink.setAttribute('aria-selected', 'true');\n    }\n\n    const selectorButtons = [...this.element.querySelectorAll(this.options.selectorButton)];\n\n    selectorButtons.forEach(button => {\n      if (button !== item) {\n        button.setAttribute('aria-selected', false);\n        button.classList.toggle(this.options.classActive, false);\n        [...button.ownerDocument.querySelectorAll(button.dataset.target)].forEach(element => {\n          element.setAttribute('hidden', '');\n          element.setAttribute('aria-hidden', 'true');\n        });\n      }\n    });\n\n    item.classList.toggle(this.options.classActive, true);\n    item.setAttribute('aria-selected', true);\n    [...item.ownerDocument.querySelectorAll(item.dataset.target)].forEach(element => {\n      element.removeAttribute('hidden');\n      element.setAttribute('aria-hidden', 'false');\n    });\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  /**\n   * Selects a content switcher button.\n   * If the selected button has `data-target` attribute, DOM elements it points to as a CSS selector will be shown.\n   * DOM elements associated with unselected buttons in the same way will be hidden.\n   * @param {HTMLElement} item The button to be selected.\n   * @param {ChangeState~callback} callback The callback is called once selection is finished\n   * or is canceled. Will only invoke callback if it's passed in.\n   */\n  setActive(item, callback) {\n    this.changeState(\n      {\n        group: 'selected',\n        item,\n      },\n      error => {\n        if (error) {\n          if (callback) {\n            callback(Object.assign(error, { item }));\n          }\n        } else if (callback) {\n          callback(null, item);\n        }\n      }\n    );\n  }\n\n  /**\n   * The map associating DOM element and content switcher set instance.\n   * @member ContentSwitcher.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor,\n   * {@linkcode ContentSwitcher.create .create()}, or {@linkcode ContentSwitcher.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode ContentSwitcher.init .init()} works.\n   * @member ContentSwitcher.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS selector to find content switcher button set.\n   * @property {string} [selectorButton] The CSS selector to find switcher buttons.\n   * @property {string} [selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @property {string} [classActive] The CSS class for switcher button's selected state.\n   * @property {string} [eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @property {string} [eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-content-switcher]',\n      selectorButton: `input[type=\"radio\"], .${prefix}--content-switcher-btn`,\n      classActive: `${prefix}--content-switcher--selected`,\n      eventBeforeSelected: 'content-switcher-beingselected',\n      eventAfterSelected: 'content-switcher-selected',\n    };\n  }\n}\n\nexport default ContentSwitcher;\n"]},"metadata":{},"sourceType":"module"}