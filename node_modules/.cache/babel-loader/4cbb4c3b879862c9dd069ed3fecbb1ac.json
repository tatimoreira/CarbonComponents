{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport toggleAttribute from '../../globals/js/misc/toggle-attribute';\n\nvar InlineLoading =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(InlineLoading, _mixin);\n\n  /**\n   * Spinner indicating loading state.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a spinner.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.initialState] The initial state, should be `inactive`, `active` or `finished`.\n   */\n  function InlineLoading(element, options) {\n    var _this;\n\n    _classCallCheck(this, InlineLoading);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InlineLoading).call(this, element, options)); // Sets the initial state\n\n    var initialState = _this.options.initialState;\n\n    if (initialState) {\n      _this.setState(initialState);\n    }\n\n    return _this;\n  }\n  /**\n   * Sets active/inactive state.\n   * @param {string} state The new state, should be `inactive`, `active` or `finished`.\n   */\n\n\n  _createClass(InlineLoading, [{\n    key: \"setState\",\n    value: function setState(state) {\n      var states = this.constructor.states;\n      var values = Object.keys(states).map(function (key) {\n        return states[key];\n      });\n\n      if (values.indexOf(state) < 0) {\n        throw new Error(\"One of the following value should be given as the state: \".concat(values.join(', ')));\n      }\n\n      var elem = this.element;\n      var _this$options = this.options,\n          selectorSpinner = _this$options.selectorSpinner,\n          selectorFinished = _this$options.selectorFinished,\n          selectorTextActive = _this$options.selectorTextActive,\n          selectorTextFinished = _this$options.selectorTextFinished;\n      var spinner = elem.querySelector(selectorSpinner);\n      var finished = elem.querySelector(selectorFinished);\n      var textActive = elem.querySelector(selectorTextActive);\n      var textFinished = elem.querySelector(selectorTextFinished);\n\n      if (spinner) {\n        spinner.classList.toggle(this.options.classLoadingStop, state !== states.ACTIVE);\n        toggleAttribute(spinner, 'hidden', state === states.FINISHED);\n      }\n\n      if (finished) {\n        toggleAttribute(finished, 'hidden', state !== states.FINISHED);\n      }\n\n      if (textActive) {\n        toggleAttribute(textActive, 'hidden', state !== states.ACTIVE);\n      }\n\n      if (textFinished) {\n        toggleAttribute(textFinished, 'hidden', state !== states.FINISHED);\n      }\n\n      return this;\n    }\n    /**\n     * The list of states.\n     * @type {Object<string, string>}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode InlineLoading.create .create()},\n     * or {@linkcode InlineLoading.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode InlineLoading.init .init()} works.\n     * @member InlineLoading.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find inline loading components.\n     * @property {string} selectorSpinner The CSS selector to find the spinner.\n     * @property {string} selectorFinished The CSS selector to find the \"finished\" icon.\n     * @property {string} selectorTextActive The CSS selector to find the text describing the active state.\n     * @property {string} selectorTextFinished The CSS selector to find the text describing the finished state.\n     * @property {string} classLoadingStop The CSS class for spinner's stopped state.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-inline-loading]',\n        selectorSpinner: '[data-inline-loading-spinner]',\n        selectorFinished: '[data-inline-loading-finished]',\n        selectorTextActive: '[data-inline-loading-text-active]',\n        selectorTextFinished: '[data-inline-loading-text-finished]',\n        classLoadingStop: \"\".concat(prefix, \"--loading--stop\")\n      };\n    }\n  }]);\n\n  return InlineLoading;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nInlineLoading.states = {\n  INACTIVE: 'inactive',\n  ACTIVE: 'active',\n  FINISHED: 'finished'\n};\nInlineLoading.components = new WeakMap();\nexport default InlineLoading;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/inline-loading/inline-loading.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","toggleAttribute","InlineLoading","element","options","initialState","setState","state","states","constructor","values","Object","keys","map","key","indexOf","Error","join","elem","selectorSpinner","selectorFinished","selectorTextActive","selectorTextFinished","spinner","querySelector","finished","textActive","textFinished","classList","toggle","classLoadingStop","ACTIVE","FINISHED","prefix","selectorInit","INACTIVE","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport toggleAttribute from '../../globals/js/misc/toggle-attribute';\n\nclass InlineLoading extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Spinner indicating loading state.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a spinner.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.initialState] The initial state, should be `inactive`, `active` or `finished`.\n   */\n  constructor(element, options) {\n    super(element, options);\n    // Sets the initial state\n    const initialState = this.options.initialState;\n    if (initialState) {\n      this.setState(initialState);\n    }\n  }\n\n  /**\n   * Sets active/inactive state.\n   * @param {string} state The new state, should be `inactive`, `active` or `finished`.\n   */\n  setState(state) {\n    const states = this.constructor.states;\n    const values = Object.keys(states).map(key => states[key]);\n    if (values.indexOf(state) < 0) {\n      throw new Error(`One of the following value should be given as the state: ${values.join(', ')}`);\n    }\n\n    const elem = this.element;\n    const { selectorSpinner, selectorFinished, selectorTextActive, selectorTextFinished } = this.options;\n    const spinner = elem.querySelector(selectorSpinner);\n    const finished = elem.querySelector(selectorFinished);\n    const textActive = elem.querySelector(selectorTextActive);\n    const textFinished = elem.querySelector(selectorTextFinished);\n\n    if (spinner) {\n      spinner.classList.toggle(this.options.classLoadingStop, state !== states.ACTIVE);\n      toggleAttribute(spinner, 'hidden', state === states.FINISHED);\n    }\n\n    if (finished) {\n      toggleAttribute(finished, 'hidden', state !== states.FINISHED);\n    }\n\n    if (textActive) {\n      toggleAttribute(textActive, 'hidden', state !== states.ACTIVE);\n    }\n\n    if (textFinished) {\n      toggleAttribute(textFinished, 'hidden', state !== states.FINISHED);\n    }\n\n    return this;\n  }\n\n  /**\n   * The list of states.\n   * @type {Object<string, string>}\n   */\n  static states = {\n    INACTIVE: 'inactive',\n    ACTIVE: 'active',\n    FINISHED: 'finished',\n  };\n\n  /**\n   * The map associating DOM element and spinner instance.\n   * @member InlineLoading.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor, {@linkcode InlineLoading.create .create()},\n   * or {@linkcode InlineLoading.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode InlineLoading.init .init()} works.\n   * @member InlineLoading.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS selector to find inline loading components.\n   * @property {string} selectorSpinner The CSS selector to find the spinner.\n   * @property {string} selectorFinished The CSS selector to find the \"finished\" icon.\n   * @property {string} selectorTextActive The CSS selector to find the text describing the active state.\n   * @property {string} selectorTextFinished The CSS selector to find the text describing the finished state.\n   * @property {string} classLoadingStop The CSS class for spinner's stopped state.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-inline-loading]',\n      selectorSpinner: '[data-inline-loading-spinner]',\n      selectorFinished: '[data-inline-loading-finished]',\n      selectorTextActive: '[data-inline-loading-text-active]',\n      selectorTextFinished: '[data-inline-loading-text-finished]',\n      classLoadingStop: `${prefix}--loading--stop`,\n    };\n  }\n}\n\nexport default InlineLoading;\n"]},"metadata":{},"sourceType":"module"}