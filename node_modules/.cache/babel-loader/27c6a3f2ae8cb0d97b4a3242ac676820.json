{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar SkeletonText = function SkeletonText(_ref) {\n  var paragraph = _ref.paragraph,\n      lineCount = _ref.lineCount,\n      width = _ref.width,\n      heading = _ref.heading,\n      className = _ref.className,\n      other = _objectWithoutProperties(_ref, [\"paragraph\", \"lineCount\", \"width\", \"heading\", \"className\"]);\n\n  var skeletonTextClasses = classNames(_defineProperty({\n    'bx--skeleton__text': true,\n    'bx--skeleton__heading': heading\n  }, className, className));\n  var widthNum = parseInt(width, 10);\n  var widthPx = width.includes('px');\n  var widthPercent = width.includes('%');\n\n  function getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  if (widthPercent & paragraph) {\n    var lines = [];\n\n    for (var i = 0; i < lineCount; i++) {\n      var randomWidth = getRandomInt(0, 75) + 'px';\n      lines.push(React.createElement(\"p\", _extends({\n        className: skeletonTextClasses,\n        style: {\n          width: \"calc(\".concat(width, \" - \").concat(randomWidth, \")\")\n        },\n        key: i\n      }, other)));\n    }\n\n    return React.createElement(\"div\", null, lines);\n  }\n\n  if (widthPx & paragraph) {\n    var _lines = [];\n\n    for (var j = 0; j < lineCount; j++) {\n      var _randomWidth = getRandomInt(widthNum - 75, widthNum) + 'px';\n\n      _lines.push(React.createElement(\"p\", _extends({\n        className: skeletonTextClasses,\n        style: {\n          width: _randomWidth\n        },\n        key: j\n      }, other)));\n    }\n\n    return React.createElement(\"div\", null, _lines);\n  }\n\n  return React.createElement(\"p\", _extends({\n    className: skeletonTextClasses,\n    style: {\n      width: width\n    }\n  }, other));\n};\n\nSkeletonText.propTypes = {\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * the number of lines in a paragraph\n   */\n  lineCount: PropTypes.number,\n\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: PropTypes.string,\n\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: PropTypes.bool,\n  className: PropTypes.string\n};\nSkeletonText.defaultProps = {\n  paragraph: false,\n  width: '100%',\n  heading: false,\n  lineCount: 3\n};\nexport default SkeletonText;","map":null,"metadata":{},"sourceType":"module"}