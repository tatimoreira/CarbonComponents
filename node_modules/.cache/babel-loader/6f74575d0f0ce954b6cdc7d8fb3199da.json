{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nvar ProfileSwitcher =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(ProfileSwitcher, _mixin);\n\n  /**\n   * Profile Switcher.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a profile switcher.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorProfileSwitcher] The data attribute selector for the profile switcher.\n   * @param {string} [options.selectorAccount]\n   *   The data attribute selector for the element containing the account name in the profile switcher.\n   * @param {string} [options.selectorOrg]\n   *   The data attribute selector for the element containing the organization name in the profile switcher.\n   * @param {string} [options.selectorSpace]\n   *   The data attribute selector for the element containing the space name in the profile switcher.\n   * @param {string} [options.selectorAccountDropdown]\n   *   The data attribute selector for the dropdown item containing the current account name.\n   * @param {string} [options.selectorOrgDropdown]\n   *   The data attribute selector for the dropdown item containing the current organization name.\n   * @param {string} [options.selectorSpaceDropdown]\n   *   The data attribute selector for the dropdown item containing the current space name.\n   */\n  function ProfileSwitcher(element, options) {\n    var _this;\n\n    _classCallCheck(this, ProfileSwitcher);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ProfileSwitcher).call(this, element, options));\n\n    _this.manage(on(_this.element.ownerDocument, 'click', function (evt) {\n      _this.handleDocumentClick(evt);\n    }));\n\n    _this.manage(on(_this.element, 'dropdown-beingselected', function (event) {\n      if (event.target.querySelector(_this.options.selectorAccountDropdown) !== null) {\n        var linkedIconNode = event.detail.item.querySelector(_this.options.classLinkedIcon);\n        _this.element.isLinked = !!linkedIconNode;\n        _this.element.linkedIcon = linkedIconNode && linkedIconNode.cloneNode(true);\n        var linkedAccountNode = event.detail.item.querySelector(_this.options.selectorAccountSlLinked);\n        _this.element.linkedAccount = linkedAccountNode && linkedAccountNode.cloneNode(true);\n      }\n    }));\n\n    var toggleNode = _this.element.querySelector(_this.options.selectorToggle);\n\n    if (toggleNode) {\n      _this.manage(on(toggleNode, 'keydown', function (event) {\n        _this.toggle(event);\n      }));\n\n      _this.manage(on(toggleNode, 'mouseenter', function (event) {\n        _this.getLinkedData(event);\n\n        _this.determineSwitcherValues(true);\n      }));\n\n      _this.manage(on(toggleNode, 'mouseleave', function (event) {\n        _this.getLinkedData(event);\n\n        _this.determineSwitcherValues(false);\n      }));\n    }\n\n    _this.manage(on(_this.element.ownerDocument, 'keyup', function () {\n      return _this.handleBlur();\n    }));\n\n    return _this;\n  }\n  /**\n   * Opens and closes the menu.\n   * @param {Event} event The event triggering this method.\n   */\n\n\n  _createClass(ProfileSwitcher, [{\n    key: \"toggle\",\n    value: function toggle(event) {\n      var isOfSelf = this.element.contains(event.target);\n\n      if (event.which === 13 || event.which === 32) {\n        if (isOfSelf) {\n          this.element.classList.toggle(this.options.classSwitcherOpen);\n        } else if (!isOfSelf && this.element.classList.contains(this.options.classSwitcherOpen)) {\n          this.element.classList.remove(this.options.classSwitcherOpen);\n        }\n      }\n    }\n  }, {\n    key: \"getLinkedData\",\n    value: function getLinkedData(event) {\n      if (event.target.querySelector(this.options.selectorLinkedAccount) !== null) {\n        if (event.target.querySelector(this.options.selectorLinkedAccount).textContent.length > 1) {\n          this.element.isLinked = true;\n        } else {\n          this.element.isLinked = false;\n        }\n      }\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur() {\n      if (!this.element.contains(document.activeElement)) {\n        this.element.classList.remove(this.options.classSwitcherOpen);\n      }\n    }\n    /**\n     * Handles click on the document.\n     * Closes the profile switcherwhen document is clicked outside the left navigation or\n     * the user clicks the profile switcher while it is open.\n     * @param {Event} evt The event triggering this method.\n     */\n\n  }, {\n    key: \"handleDocumentClick\",\n    value: function handleDocumentClick(evt) {\n      var clickTarget = evt.target;\n      var isOfSelf = this.element.contains(clickTarget);\n      var isToggle = eventMatches(evt, this.options.selectorToggle);\n      var isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\n      if (isOfSelf) {\n        if (isToggle && isOpen) {\n          this.element.classList.remove(this.options.classSwitcherOpen);\n        } else if (isOpen) {\n          this.determineSwitcherValues();\n        } else {\n          this.element.classList.add(this.options.classSwitcherOpen);\n        }\n      } else {\n        this.element.classList.remove(this.options.classSwitcherOpen);\n      }\n    }\n    /**\n     * Handles logic to determine what text to display in profile switcher.\n     * If the text is over 25 characters long, truncate and add ellipses.\n     * Also adds logic to change the switcher width based on the width of the hovered\n     * profile switcher\n     * @param {boolean} isHovered boolean value passed by the event listener on bx--toggle.\n     */\n\n  }, {\n    key: \"determineSwitcherValues\",\n    value: function determineSwitcherValues(isHovered) {\n      var linkedElement = this.element.querySelector(this.options.selectorLinkedAccount);\n      var nameElement = this.element.querySelector(this.options.selectorAccount);\n      var regionElement = this.element.querySelector(this.options.selectorRegion);\n      var orgElement = this.element.querySelector(this.options.selectorOrg);\n      var spaceElement = this.element.querySelector(this.options.selectorSpace);\n      var menuElement = this.element.querySelector(this.options.selectorMenu);\n      var isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\n      if (linkedElement) {\n        if (this.element.isLinked) {\n          if (this.element.linkedAccount) {\n            if (linkedElement.textContent.length) {\n              linkedElement.querySelector(this.options.selectorAccountSlLinked).textContent = this.element.linkedAccount.textContent;\n            } else {\n              linkedElement.appendChild(this.element.linkedAccount);\n\n              if (this.element.linkedIcon) {\n                linkedElement.appendChild(this.element.linkedIcon);\n              }\n            }\n          }\n        } else {\n          linkedElement.textContent = '';\n        }\n      }\n\n      var nameDropdownValue = '';\n\n      if (this.element.querySelector(this.options.selectorAccountDropdown)) {\n        if (this.element.isLinked) {\n          nameDropdownValue = this.element.querySelector(this.options.selectorAccountLinked).textContent;\n        } else {\n          nameDropdownValue = this.element.querySelector(this.options.selectorAccountDropdown).textContent;\n        }\n      }\n\n      var regionDropdownValue = '';\n\n      if (this.element.querySelector(this.options.selectorRegionDropdown)) {\n        regionDropdownValue = this.element.querySelector(this.options.selectorRegionDropdown).textContent;\n      }\n\n      var orgDropdownValue = '';\n\n      if (this.element.querySelector(this.options.selectorOrgDropdown)) {\n        orgDropdownValue = this.element.querySelector(this.options.selectorOrgDropdown).textContent;\n      }\n\n      var spaceDropdownValue = '';\n\n      if (this.element.querySelector(this.options.selectorSpaceDropdown)) {\n        spaceDropdownValue = this.element.querySelector(this.options.selectorSpaceDropdown).textContent;\n      }\n\n      var nameShort;\n      var orgShort;\n      var spaceShort;\n\n      if (isHovered && !isOpen) {\n        if (nameElement) {\n          nameElement.textContent = nameDropdownValue;\n        }\n\n        if (orgElement) {\n          orgElement.textContent = orgDropdownValue;\n        }\n\n        if (spaceElement) {\n          spaceElement.textContent = spaceDropdownValue;\n        }\n\n        if (regionElement) {\n          regionElement.textContent = regionDropdownValue;\n        }\n\n        if (menuElement) {\n          menuElement.style.width = \"\".concat(this.element.getBoundingClientRect().width, \"px\");\n        }\n      } else {\n        if (nameElement) {\n          if (nameDropdownValue.length > 25) {\n            nameShort = \"\".concat(nameDropdownValue.substr(0, 25), \"...\");\n            nameElement.textContent = nameShort;\n          } else {\n            nameElement.textContent = nameDropdownValue;\n          }\n        }\n\n        if (orgElement) {\n          if (orgDropdownValue.length > 25) {\n            orgShort = \"\".concat(orgDropdownValue.slice(0, 12), \"...\").concat(orgDropdownValue.slice(-13));\n            orgElement.textContent = orgShort;\n          } else {\n            orgElement.textContent = orgDropdownValue;\n          }\n        }\n\n        if (spaceElement) {\n          if (spaceDropdownValue.length > 25) {\n            spaceShort = \"\".concat(spaceDropdownValue.substr(0, 25), \"...\");\n            spaceElement.textContent = spaceShort;\n          } else {\n            spaceElement.textContent = spaceDropdownValue;\n          }\n        }\n\n        if (regionElement) {\n          regionElement.textContent = regionDropdownValue;\n        }\n\n        if (menuElement) {\n          menuElement.style.width = \"\".concat(this.element.getBoundingClientRect().width, \"px\");\n        }\n      }\n    }\n    /**\n     * The component options.\n     * @member ProfileSwitcher.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find profile switchers.\n     * @property {string} [selectorProfileSwitcher] The data attribute selector for the profile switcher.\n     * @property {string} [selectorAccount]\n     *   The data attribute selector for the element containing the account name in the profile switcher.\n     * @property {string} [selectorOrg]\n     *   The data attribute selector for the element containing the organization name in the profile switcher.\n     * @property {string} [selectorSpace]\n     *   The data attribute selector for the element containing the space name in the profile switcher.\n     * @property {string} [selectorAccountDropdown]\n     *   The data attribute selector for the dropdown item containing the current account name.\n     * @property {string} [selectorOrgDropdown]\n     *   The data attribute selector for the dropdown item containing the current organization name.\n     * @property {string} [selectorSpaceDropdown]\n     *   The data attribute selector for the dropdown item containing the current space name.\n     */\n\n  }], [{\n    key: \"options\",\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-profile-switcher]',\n        // Data Attribute selectors\n        selectorProfileSwitcher: '[data-profile-switcher]',\n        selectorToggle: '[data-profile-switcher-toggle]',\n        selectorMenu: '[data-switcher-menu]',\n        selectorLinkedAccount: '[data-switcher-account-sl]',\n        selectorAccount: '[data-switcher-account]',\n        selectorRegion: '[data-switcher-region]',\n        selectorOrg: '[data-switcher-org]',\n        selectorSpace: '[data-switcher-space]',\n        selectorDropdown: '[data-dropdown]',\n        selectorAccountDropdown: '[data-dropdown-account]',\n        selectorAccountSlDropdown: '[data-dropdown-account-sl]',\n        selectorAccountLinked: '[data-dropdown-account-linked]',\n        selectorAccountSlLinked: '[data-dropdown-account-sl-linked]',\n        selectorRegionDropdown: '[data-dropdown-region]',\n        selectorOrgDropdown: '[data-dropdown-org]',\n        selectorSpaceDropdown: '[data-dropdown-space]',\n        classSwitcherOpen: \"\".concat(prefix, \"--account-switcher--open\"),\n        classLinkedIcon: \".\".concat(prefix, \"--account-switcher__linked-icon\")\n      };\n    }\n    /**\n     * The map associating DOM element and profile switcher instance.\n     * @member ProfileSwitcher.components\n     * @type {WeakMap}\n     */\n\n  }]);\n\n  return ProfileSwitcher;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nProfileSwitcher.components = new WeakMap();\nexport default ProfileSwitcher;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/unified-header/profile-switcher.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","eventMatches","on","ProfileSwitcher","element","options","manage","ownerDocument","evt","handleDocumentClick","event","target","querySelector","selectorAccountDropdown","linkedIconNode","detail","item","classLinkedIcon","isLinked","linkedIcon","cloneNode","linkedAccountNode","selectorAccountSlLinked","linkedAccount","toggleNode","selectorToggle","toggle","getLinkedData","determineSwitcherValues","handleBlur","isOfSelf","contains","which","classList","classSwitcherOpen","remove","selectorLinkedAccount","textContent","length","document","activeElement","clickTarget","isToggle","isOpen","add","isHovered","linkedElement","nameElement","selectorAccount","regionElement","selectorRegion","orgElement","selectorOrg","spaceElement","selectorSpace","menuElement","selectorMenu","appendChild","nameDropdownValue","selectorAccountLinked","regionDropdownValue","selectorRegionDropdown","orgDropdownValue","selectorOrgDropdown","spaceDropdownValue","selectorSpaceDropdown","nameShort","orgShort","spaceShort","style","width","getBoundingClientRect","substr","slice","prefix","selectorInit","selectorProfileSwitcher","selectorDropdown","selectorAccountSlDropdown","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport on from '../../globals/js/misc/on';\n\nclass ProfileSwitcher extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Profile Switcher.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a profile switcher.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorProfileSwitcher] The data attribute selector for the profile switcher.\n   * @param {string} [options.selectorAccount]\n   *   The data attribute selector for the element containing the account name in the profile switcher.\n   * @param {string} [options.selectorOrg]\n   *   The data attribute selector for the element containing the organization name in the profile switcher.\n   * @param {string} [options.selectorSpace]\n   *   The data attribute selector for the element containing the space name in the profile switcher.\n   * @param {string} [options.selectorAccountDropdown]\n   *   The data attribute selector for the dropdown item containing the current account name.\n   * @param {string} [options.selectorOrgDropdown]\n   *   The data attribute selector for the dropdown item containing the current organization name.\n   * @param {string} [options.selectorSpaceDropdown]\n   *   The data attribute selector for the dropdown item containing the current space name.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    this.manage(\n      on(this.element.ownerDocument, 'click', evt => {\n        this.handleDocumentClick(evt);\n      })\n    );\n\n    this.manage(\n      on(this.element, 'dropdown-beingselected', event => {\n        if (event.target.querySelector(this.options.selectorAccountDropdown) !== null) {\n          const linkedIconNode = event.detail.item.querySelector(this.options.classLinkedIcon);\n          this.element.isLinked = !!linkedIconNode;\n          this.element.linkedIcon = linkedIconNode && linkedIconNode.cloneNode(true);\n          const linkedAccountNode = event.detail.item.querySelector(this.options.selectorAccountSlLinked);\n          this.element.linkedAccount = linkedAccountNode && linkedAccountNode.cloneNode(true);\n        }\n      })\n    );\n\n    const toggleNode = this.element.querySelector(this.options.selectorToggle);\n    if (toggleNode) {\n      this.manage(\n        on(toggleNode, 'keydown', event => {\n          this.toggle(event);\n        })\n      );\n\n      this.manage(\n        on(toggleNode, 'mouseenter', event => {\n          this.getLinkedData(event);\n          this.determineSwitcherValues(true);\n        })\n      );\n\n      this.manage(\n        on(toggleNode, 'mouseleave', event => {\n          this.getLinkedData(event);\n          this.determineSwitcherValues(false);\n        })\n      );\n    }\n\n    this.manage(on(this.element.ownerDocument, 'keyup', () => this.handleBlur()));\n  }\n\n  /**\n   * Opens and closes the menu.\n   * @param {Event} event The event triggering this method.\n   */\n  toggle(event) {\n    const isOfSelf = this.element.contains(event.target);\n    if (event.which === 13 || event.which === 32) {\n      if (isOfSelf) {\n        this.element.classList.toggle(this.options.classSwitcherOpen);\n      } else if (!isOfSelf && this.element.classList.contains(this.options.classSwitcherOpen)) {\n        this.element.classList.remove(this.options.classSwitcherOpen);\n      }\n    }\n  }\n\n  getLinkedData(event) {\n    if (event.target.querySelector(this.options.selectorLinkedAccount) !== null) {\n      if (event.target.querySelector(this.options.selectorLinkedAccount).textContent.length > 1) {\n        this.element.isLinked = true;\n      } else {\n        this.element.isLinked = false;\n      }\n    }\n  }\n\n  handleBlur() {\n    if (!this.element.contains(document.activeElement)) {\n      this.element.classList.remove(this.options.classSwitcherOpen);\n    }\n  }\n\n  /**\n   * Handles click on the document.\n   * Closes the profile switcherwhen document is clicked outside the left navigation or\n   * the user clicks the profile switcher while it is open.\n   * @param {Event} evt The event triggering this method.\n   */\n  handleDocumentClick(evt) {\n    const clickTarget = evt.target;\n    const isOfSelf = this.element.contains(clickTarget);\n    const isToggle = eventMatches(evt, this.options.selectorToggle);\n    const isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\n    if (isOfSelf) {\n      if (isToggle && isOpen) {\n        this.element.classList.remove(this.options.classSwitcherOpen);\n      } else if (isOpen) {\n        this.determineSwitcherValues();\n      } else {\n        this.element.classList.add(this.options.classSwitcherOpen);\n      }\n    } else {\n      this.element.classList.remove(this.options.classSwitcherOpen);\n    }\n  }\n\n  /**\n   * Handles logic to determine what text to display in profile switcher.\n   * If the text is over 25 characters long, truncate and add ellipses.\n   * Also adds logic to change the switcher width based on the width of the hovered\n   * profile switcher\n   * @param {boolean} isHovered boolean value passed by the event listener on bx--toggle.\n   */\n  determineSwitcherValues(isHovered) {\n    const linkedElement = this.element.querySelector(this.options.selectorLinkedAccount);\n    const nameElement = this.element.querySelector(this.options.selectorAccount);\n    const regionElement = this.element.querySelector(this.options.selectorRegion);\n    const orgElement = this.element.querySelector(this.options.selectorOrg);\n    const spaceElement = this.element.querySelector(this.options.selectorSpace);\n    const menuElement = this.element.querySelector(this.options.selectorMenu);\n    const isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\n    if (linkedElement) {\n      if (this.element.isLinked) {\n        if (this.element.linkedAccount) {\n          if (linkedElement.textContent.length) {\n            linkedElement.querySelector(\n              this.options.selectorAccountSlLinked\n            ).textContent = this.element.linkedAccount.textContent;\n          } else {\n            linkedElement.appendChild(this.element.linkedAccount);\n            if (this.element.linkedIcon) {\n              linkedElement.appendChild(this.element.linkedIcon);\n            }\n          }\n        }\n      } else {\n        linkedElement.textContent = '';\n      }\n    }\n\n    let nameDropdownValue = '';\n    if (this.element.querySelector(this.options.selectorAccountDropdown)) {\n      if (this.element.isLinked) {\n        nameDropdownValue = this.element.querySelector(this.options.selectorAccountLinked).textContent;\n      } else {\n        nameDropdownValue = this.element.querySelector(this.options.selectorAccountDropdown).textContent;\n      }\n    }\n\n    let regionDropdownValue = '';\n    if (this.element.querySelector(this.options.selectorRegionDropdown)) {\n      regionDropdownValue = this.element.querySelector(this.options.selectorRegionDropdown).textContent;\n    }\n\n    let orgDropdownValue = '';\n    if (this.element.querySelector(this.options.selectorOrgDropdown)) {\n      orgDropdownValue = this.element.querySelector(this.options.selectorOrgDropdown).textContent;\n    }\n\n    let spaceDropdownValue = '';\n    if (this.element.querySelector(this.options.selectorSpaceDropdown)) {\n      spaceDropdownValue = this.element.querySelector(this.options.selectorSpaceDropdown).textContent;\n    }\n\n    let nameShort;\n    let orgShort;\n    let spaceShort;\n\n    if (isHovered && !isOpen) {\n      if (nameElement) {\n        nameElement.textContent = nameDropdownValue;\n      }\n      if (orgElement) {\n        orgElement.textContent = orgDropdownValue;\n      }\n      if (spaceElement) {\n        spaceElement.textContent = spaceDropdownValue;\n      }\n      if (regionElement) {\n        regionElement.textContent = regionDropdownValue;\n      }\n      if (menuElement) {\n        menuElement.style.width = `${this.element.getBoundingClientRect().width}px`;\n      }\n    } else {\n      if (nameElement) {\n        if (nameDropdownValue.length > 25) {\n          nameShort = `${nameDropdownValue.substr(0, 25)}...`;\n          nameElement.textContent = nameShort;\n        } else {\n          nameElement.textContent = nameDropdownValue;\n        }\n      }\n\n      if (orgElement) {\n        if (orgDropdownValue.length > 25) {\n          orgShort = `${orgDropdownValue.slice(0, 12)}...${orgDropdownValue.slice(-13)}`;\n          orgElement.textContent = orgShort;\n        } else {\n          orgElement.textContent = orgDropdownValue;\n        }\n      }\n\n      if (spaceElement) {\n        if (spaceDropdownValue.length > 25) {\n          spaceShort = `${spaceDropdownValue.substr(0, 25)}...`;\n          spaceElement.textContent = spaceShort;\n        } else {\n          spaceElement.textContent = spaceDropdownValue;\n        }\n      }\n\n      if (regionElement) {\n        regionElement.textContent = regionDropdownValue;\n      }\n\n      if (menuElement) {\n        menuElement.style.width = `${this.element.getBoundingClientRect().width}px`;\n      }\n    }\n  }\n\n  /**\n   * The component options.\n   * @member ProfileSwitcher.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS selector to find profile switchers.\n   * @property {string} [selectorProfileSwitcher] The data attribute selector for the profile switcher.\n   * @property {string} [selectorAccount]\n   *   The data attribute selector for the element containing the account name in the profile switcher.\n   * @property {string} [selectorOrg]\n   *   The data attribute selector for the element containing the organization name in the profile switcher.\n   * @property {string} [selectorSpace]\n   *   The data attribute selector for the element containing the space name in the profile switcher.\n   * @property {string} [selectorAccountDropdown]\n   *   The data attribute selector for the dropdown item containing the current account name.\n   * @property {string} [selectorOrgDropdown]\n   *   The data attribute selector for the dropdown item containing the current organization name.\n   * @property {string} [selectorSpaceDropdown]\n   *   The data attribute selector for the dropdown item containing the current space name.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-profile-switcher]',\n      // Data Attribute selectors\n      selectorProfileSwitcher: '[data-profile-switcher]',\n      selectorToggle: '[data-profile-switcher-toggle]',\n      selectorMenu: '[data-switcher-menu]',\n      selectorLinkedAccount: '[data-switcher-account-sl]',\n      selectorAccount: '[data-switcher-account]',\n      selectorRegion: '[data-switcher-region]',\n      selectorOrg: '[data-switcher-org]',\n      selectorSpace: '[data-switcher-space]',\n      selectorDropdown: '[data-dropdown]',\n      selectorAccountDropdown: '[data-dropdown-account]',\n      selectorAccountSlDropdown: '[data-dropdown-account-sl]',\n      selectorAccountLinked: '[data-dropdown-account-linked]',\n      selectorAccountSlLinked: '[data-dropdown-account-sl-linked]',\n      selectorRegionDropdown: '[data-dropdown-region]',\n      selectorOrgDropdown: '[data-dropdown-org]',\n      selectorSpaceDropdown: '[data-dropdown-space]',\n      classSwitcherOpen: `${prefix}--account-switcher--open`,\n      classLinkedIcon: `.${prefix}--account-switcher__linked-icon`,\n    };\n  }\n\n  /**\n   * The map associating DOM element and profile switcher instance.\n   * @member ProfileSwitcher.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n}\n\nexport default ProfileSwitcher;\n"]},"metadata":{},"sourceType":"module"}