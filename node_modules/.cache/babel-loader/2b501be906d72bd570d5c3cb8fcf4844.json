{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nexport default function (ToMix) {\n  /**\n   * Mix-in class to manage handles in component.\n   * Managed handles are automatically released when the component with this class mixed in is released.\n   * @class Handles\n   * @implements Handle\n   */\n  var Handles =\n  /*#__PURE__*/\n  function (_ToMix) {\n    _inherits(Handles, _ToMix);\n\n    function Handles() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, Handles);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Handles)).call.apply(_getPrototypeOf2, [this].concat(args)));\n      _this.handles = new Set();\n      return _this;\n    }\n\n    _createClass(Handles, [{\n      key: \"manage\",\n\n      /**\n       * Manages the given handle.\n       * @param {Handle} handle The handle to manage.\n       * @returns {Handle} The given handle.\n       */\n      value: function manage(handle) {\n        this.handles.add(handle);\n        return handle;\n      }\n      /**\n       * Stop managing the given handle.\n       * @param {Handle} handle The handle to stop managing.\n       * @returns {Handle} The given handle.\n       */\n\n    }, {\n      key: \"unmanage\",\n      value: function unmanage(handle) {\n        this.handles.delete(handle);\n        return handle;\n      }\n    }, {\n      key: \"release\",\n      value: function release() {\n        var _this2 = this;\n\n        this.handles.forEach(function (handle) {\n          handle.release();\n\n          _this2.handles.delete(handle);\n        });\n        return _get(_getPrototypeOf(Handles.prototype), \"release\", this).call(this);\n      }\n    }]);\n\n    return Handles;\n  }(ToMix);\n\n  return Handles;\n}","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/globals/js/mixins/handles.js"],"names":["ToMix","Handles","handles","Set","handle","add","delete","forEach","release"],"mappings":";;;;;;AAAA,eAAe,UAASA,KAAT,EAAgB;AAC7B;;;;;;AAD6B,MAOvBC,OAPuB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,YAa3BC,OAb2B,GAajB,IAAIC,GAAJ,EAbiB;AAAA;AAAA;;AAAA;AAAA;;AAe3B;;;;;AAf2B,6BAoBpBC,MApBoB,EAoBZ;AACb,aAAKF,OAAL,CAAaG,GAAb,CAAiBD,MAAjB;AACA,eAAOA,MAAP;AACD;AAED;;;;;;AAzB2B;AAAA;AAAA,+BA8BlBA,MA9BkB,EA8BV;AACf,aAAKF,OAAL,CAAaI,MAAb,CAAoBF,MAApB;AACA,eAAOA,MAAP;AACD;AAjC0B;AAAA;AAAA,gCAmCjB;AAAA;;AACR,aAAKF,OAAL,CAAaK,OAAb,CAAqB,UAAAH,MAAM,EAAI;AAC7BA,UAAAA,MAAM,CAACI,OAAP;;AACA,UAAA,MAAI,CAACN,OAAL,CAAaI,MAAb,CAAoBF,MAApB;AACD,SAHD;AAIA;AACD;AAzC0B;;AAAA;AAAA,IAOPJ,KAPO;;AA2C7B,SAAOC,OAAP;AACD","sourcesContent":["export default function(ToMix) {\n  /**\n   * Mix-in class to manage handles in component.\n   * Managed handles are automatically released when the component with this class mixed in is released.\n   * @class Handles\n   * @implements Handle\n   */\n  class Handles extends ToMix {\n    /**\n     * The handled managed by this component.\n     * Releasing this component releases the handles.\n     * @type {Set<Handle>}\n     */\n    handles = new Set();\n\n    /**\n     * Manages the given handle.\n     * @param {Handle} handle The handle to manage.\n     * @returns {Handle} The given handle.\n     */\n    manage(handle) {\n      this.handles.add(handle);\n      return handle;\n    }\n\n    /**\n     * Stop managing the given handle.\n     * @param {Handle} handle The handle to stop managing.\n     * @returns {Handle} The given handle.\n     */\n    unmanage(handle) {\n      this.handles.delete(handle);\n      return handle;\n    }\n\n    release() {\n      this.handles.forEach(handle => {\n        handle.release();\n        this.handles.delete(handle);\n      });\n      return super.release();\n    }\n  }\n  return Handles;\n}\n"]},"metadata":{},"sourceType":"module"}