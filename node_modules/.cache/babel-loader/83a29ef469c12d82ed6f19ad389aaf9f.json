{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar Checkbox = function Checkbox(_ref) {\n  var className = _ref.className,\n      id = _ref.id,\n      labelText = _ref.labelText,\n      _onChange = _ref.onChange,\n      indeterminate = _ref.indeterminate,\n      hideLabel = _ref.hideLabel,\n      wrapperClassName = _ref.wrapperClassName,\n      _ref$title = _ref.title,\n      title = _ref$title === void 0 ? '' : _ref$title,\n      other = _objectWithoutProperties(_ref, [\"className\", \"id\", \"labelText\", \"onChange\", \"indeterminate\", \"hideLabel\", \"wrapperClassName\", \"title\"]);\n\n  var input;\n  var labelClasses = classNames('bx--checkbox-label', className);\n  var innerLabelClasses = classNames({\n    'bx--visually-hidden': hideLabel\n  });\n  var wrapperClasses = classNames('bx--form-item', 'bx--checkbox-wrapper', wrapperClassName);\n  return React.createElement(\"div\", {\n    className: wrapperClasses\n  }, React.createElement(\"input\", _extends({}, other, {\n    type: \"checkbox\",\n    onChange: function onChange(evt) {\n      _onChange(input.checked, id, evt);\n    },\n    className: \"bx--checkbox\",\n    id: id,\n    ref: function ref(el) {\n      input = el;\n\n      if (input) {\n        input.indeterminate = indeterminate;\n      }\n    }\n  })), React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses,\n    title: title || null\n  }, React.createElement(\"span\", {\n    className: innerLabelClasses\n  }, labelText)));\n};\n\nCheckbox.propTypes = {\n  /**\n   * Specify whether the underlying input should be checked\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Specify whether the underlying input should be checked by default\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * Specify whether the Checkbox is in an indeterminate state\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * Specify an optional className to be applied to the <label> node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Specify whether the Checkbox should be disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Provide an `id` to uniquely identify the Checkbox input\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Provide a label to provide a description of the Checkbox input that you are\n   * exposing to the user\n   */\n  labelText: PropTypes.node.isRequired,\n\n  /**\n   * Specify whether the label should be hidden, or not\n   */\n  hideLabel: PropTypes.bool,\n\n  /**\n   * Receives three arguments: true/false, the checkbox's id, and the dom event.\n   * `(value, id, event) => console.log({value, id, event})`\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Specify a title for the <label> node for the Checkbox\n   */\n  title: PropTypes.string,\n\n  /**\n   * The CSS class name to be placed on the wrapping element\n   */\n  wrapperClassName: PropTypes.string\n};\nCheckbox.defaultProps = {\n  onChange: function onChange() {},\n  indeterminate: false\n};\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}