{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { iconCaretDown } from 'carbon-icons';\nimport Icon from '../Icon';\n\nvar Select = function Select(_ref) {\n  var className = _ref.className,\n      id = _ref.id,\n      inline = _ref.inline,\n      labelText = _ref.labelText,\n      disabled = _ref.disabled,\n      children = _ref.children,\n      iconDescription = _ref.iconDescription,\n      hideLabel = _ref.hideLabel,\n      invalid = _ref.invalid,\n      invalidText = _ref.invalidText,\n      helperText = _ref.helperText,\n      light = _ref.light,\n      other = _objectWithoutProperties(_ref, [\"className\", \"id\", \"inline\", \"labelText\", \"disabled\", \"children\", \"iconDescription\", \"hideLabel\", \"invalid\", \"invalidText\", \"helperText\", \"light\"]);\n\n  var selectClasses = classNames(_defineProperty({\n    'bx--select': true,\n    'bx--select--inline': inline,\n    'bx--select--light': light\n  }, className, className));\n  var labelClasses = classNames('bx--label', {\n    'bx--visually-hidden': hideLabel\n  });\n  var errorId = \"\".concat(id, \"-error-msg\");\n  var error = invalid ? React.createElement(\"div\", {\n    className: \"bx--form-requirement\",\n    id: errorId\n  }, invalidText) : null;\n  var helper = helperText ? React.createElement(\"div\", {\n    className: \"bx--form__helper-text\"\n  }, helperText) : null;\n  var ariaProps = {};\n\n  if (invalid) {\n    ariaProps['aria-describedby'] = errorId;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"bx--form-item\"\n  }, React.createElement(\"div\", {\n    className: selectClasses\n  }, React.createElement(\"label\", {\n    htmlFor: id,\n    className: labelClasses\n  }, labelText), React.createElement(\"select\", _extends({}, other, ariaProps, {\n    id: id,\n    className: \"bx--select-input\",\n    disabled: disabled || undefined,\n    \"data-invalid\": invalid || undefined,\n    \"aria-invalid\": invalid || undefined\n  }), children), React.createElement(Icon, {\n    icon: iconCaretDown,\n    className: \"bx--select__arrow\",\n    description: iconDescription\n  }), helper, error));\n};\n\nSelect.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  inline: PropTypes.bool,\n  labelText: PropTypes.node,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n  defaultValue: PropTypes.any,\n  iconDescription: PropTypes.string.isRequired,\n  hideLabel: PropTypes.bool,\n  invalid: PropTypes.bool,\n  invalidText: PropTypes.string,\n  helperText: PropTypes.node,\n  light: PropTypes.bool\n};\nSelect.defaultProps = {\n  disabled: false,\n  labelText: 'Select',\n  inline: false,\n  iconDescription: 'open list of options',\n  invalid: false,\n  invalidText: '',\n  helperText: '',\n  light: false\n};\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}