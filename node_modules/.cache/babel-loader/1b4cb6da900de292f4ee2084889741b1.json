{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nvar DataTableSkeleton = function DataTableSkeleton(_ref) {\n  var rowCount = _ref.rowCount,\n      zebra = _ref.zebra,\n      compact = _ref.compact,\n      other = _objectWithoutProperties(_ref, [\"rowCount\", \"zebra\", \"compact\"]);\n\n  var dataTableSkeletonClasses = classNames({\n    'bx--skeleton': true,\n    'bx--data-table-v2': true,\n    'bx--data-table-v2--zebra': zebra,\n    'bx--data-table-v2--compact': compact\n  });\n  var rows = [];\n  var rowRepeat = rowCount - 1;\n\n  for (var i = 0; i < rowRepeat; i++) {\n    rows.push(React.createElement(\"tr\", {\n      key: i\n    }, React.createElement(\"td\", null), React.createElement(\"td\", null), React.createElement(\"td\", null), React.createElement(\"td\", null), React.createElement(\"td\", null)));\n  }\n\n  return React.createElement(\"table\", _extends({\n    className: dataTableSkeletonClasses\n  }, other), React.createElement(\"thead\", null, React.createElement(\"tr\", null, React.createElement(\"th\", null), React.createElement(\"th\", null), React.createElement(\"th\", null), React.createElement(\"th\", null), React.createElement(\"th\", null))), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, React.createElement(\"td\", null, React.createElement(\"span\", null)), React.createElement(\"td\", null, React.createElement(\"span\", null)), React.createElement(\"td\", null, React.createElement(\"span\", null)), React.createElement(\"td\", null, React.createElement(\"span\", null)), React.createElement(\"td\", null, React.createElement(\"span\", null))), rows));\n};\n\nDataTableSkeleton.propTypes = {\n  /**\n   * Specify the number of rows that you want to render in the skeleton state\n   */\n  rowCount: PropTypes.number,\n\n  /**\n   * Optionally specify whether you want the DataTable to be zebra striped\n   */\n  zebra: PropTypes.bool,\n\n  /**\n   * Optionally specify whether you want the Skeleton to be rendered as a\n   * compact DataTable\n   */\n  compact: PropTypes.bool\n};\nDataTableSkeleton.defaultProps = {\n  rowCount: 5,\n  zebra: false,\n  compact: false\n};\nexport default DataTableSkeleton;","map":null,"metadata":{},"sourceType":"module"}