{"ast":null,"code":"import { getCellId } from './cells';\nimport { sortStates } from '../state/sorting';\n/**\n * Compare two primitives to determine which comes first. Initially, this method\n * will try and figure out if both entries are the same type. If so, it will\n * apply the default sort algorithm for those types. Otherwise, it defaults to a\n * string conversion.\n *\n * @param {number|string} a\n * @param {number|string} b\n * @param {string} locale\n * @returns {number}\n */\n\nexport var compare = function compare(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n\n  if (typeof a === 'string' && typeof b === 'string') {\n    return compareStrings(a, b, locale);\n  }\n\n  return compareStrings('' + a, '' + b, locale);\n};\n/**\n * Use the built-in `localeCompare` function available on strings to compare two\n * srints.\n *\n * @param {string} a\n * @param {string} b\n * @param {string} locale\n * @returns {number}\n */\n\nexport var compareStrings = function compareStrings(a, b) {\n  var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';\n  return a.localeCompare(b, locale, {\n    numeric: true\n  });\n};\n/**\n * Default implementation of how we sort rows internally. The idea behind this\n * implementation is to use the given list of row ids to look up the cells in\n * the row by the given key. We then use the value of these cells and pipe them\n * into our local `compareStrings` method, including the locale where\n * appropriate.\n *\n * @param {Object} config\n * @param {Array[string]} config.rowIds array of all the row ids in the table\n * @param {Object} config.cellsById object containing a mapping of cell id to\n * cell\n * @param {string} config.direction the sort direction used to determine the\n * order the comparison is called in\n * @param {string} config.key the header key that we use to lookup the cell\n * @param {string} [config.locale] optional locale used in the comparison\n * function\n * @returns {Array[string]} array of sorted rowIds\n */\n\nexport var sortRows = function sortRows(_ref) {\n  var rowIds = _ref.rowIds,\n      cellsById = _ref.cellsById,\n      sortDirection = _ref.sortDirection,\n      key = _ref.key,\n      locale = _ref.locale,\n      sortRow = _ref.sortRow;\n  return rowIds.slice().sort(function (a, b) {\n    var cellA = cellsById[getCellId(a, key)];\n    var cellB = cellsById[getCellId(b, key)];\n    return sortRow(cellA.value, cellB.value, {\n      key: key,\n      sortDirection: sortDirection,\n      locale: locale,\n      sortStates: sortStates,\n      compare: compare\n    });\n  });\n};\nexport var defaultSortRow = function defaultSortRow(cellA, cellB, _ref2) {\n  var sortDirection = _ref2.sortDirection,\n      sortStates = _ref2.sortStates,\n      locale = _ref2.locale;\n\n  if (sortDirection === sortStates.ASC) {\n    return compare(cellB, cellA, locale);\n  }\n\n  return compare(cellA, cellB, locale);\n};","map":null,"metadata":{},"sourceType":"module"}