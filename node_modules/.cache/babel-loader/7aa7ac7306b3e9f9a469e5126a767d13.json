{"ast":null,"code":"import _toConsumableArray from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport ContentSwitcher from '../content-switcher/content-switcher';\nimport on from '../../globals/js/misc/on';\n\nvar Tab =\n/*#__PURE__*/\nfunction (_ContentSwitcher) {\n  _inherits(Tab, _ContentSwitcher);\n\n  /**\n   * Container of tabs.\n   * @extends ContentSwitcher\n   * @param {HTMLElement} element The element working as a container of tabs.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTriggerText]\n   *   The CSS selector to find the element used in narrow mode showing the selected tab item.\n   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n   * @param {string} [options.classActive] The CSS class for tab's selected state.\n   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a tab is selected.\n   *   Cancellation of this event stops selection of tab.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n   */\n  function Tab(element, options) {\n    var _this;\n\n    _classCallCheck(this, Tab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tab).call(this, element, options));\n\n    _this.manage(on(_this.element, 'keydown', function (event) {\n      _this._handleKeyDown(event);\n    }));\n\n    var selected = _this.element.querySelector(_this.options.selectorButtonSelected);\n\n    if (selected) {\n      _this._updateTriggerText(selected);\n    }\n\n    return _this;\n  }\n  /**\n   * Internal method of {@linkcode Tab#setActive .setActive()}, to select a tab item.\n   * @private\n   * @param {Object} detail The detail of the event trigging this action.\n   * @param {HTMLElement} detail.item The tab item to be selected.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n\n\n  _createClass(Tab, [{\n    key: \"_changeState\",\n    value: function _changeState(detail, callback) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(Tab.prototype), \"_changeState\", this).call(this, detail, function (error) {\n        if (!error) {\n          _this2._updateTriggerText(detail.item);\n        }\n\n        for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          data[_key - 1] = arguments[_key];\n        }\n\n        callback.apply(void 0, [error].concat(data));\n      });\n    }\n    /**\n     * Handles click on tab container.\n     * * If the click is on a tab, activates it.\n     * * If the click is on the button to open the drop down menu, does so.\n     * @param {Event} event The event triggering this method.\n     */\n\n  }, {\n    key: \"_handleClick\",\n    value: function _handleClick(event) {\n      var button = eventMatches(event, this.options.selectorButton);\n      var trigger = eventMatches(event, this.options.selectorTrigger);\n\n      if (button) {\n        _get(_getPrototypeOf(Tab.prototype), \"_handleClick\", this).call(this, event);\n\n        this._updateMenuState(false);\n      }\n\n      if (trigger) {\n        this._updateMenuState();\n      }\n    }\n    /**\n     * Handles arrow keys on tab container.\n     * * Left keys are used to go to previous tab.\n     * * Right keys are used to go to next tab.\n     * @param {Event} event The event triggering this method.\n     */\n\n  }, {\n    key: \"_handleKeyDown\",\n    value: function _handleKeyDown(event) {\n      var _this3 = this;\n\n      var triggerNode = eventMatches(event, this.options.selectorTrigger);\n\n      if (triggerNode) {\n        if (event.which === 13) {\n          this._updateMenuState();\n        }\n\n        return;\n      }\n\n      var direction = {\n        37: this.constructor.NAVIGATE.BACKWARD,\n        39: this.constructor.NAVIGATE.FORWARD\n      }[event.which];\n\n      if (direction) {\n        var buttons = _toConsumableArray(this.element.querySelectorAll(this.options.selectorButton));\n\n        var button = this.element.querySelector(this.options.selectorButtonSelected);\n        var nextIndex = Math.max(buttons.indexOf(button) + direction, -1\n        /* For `button` not found in `buttons` */\n        );\n        var nextIndexLooped = nextIndex >= 0 && nextIndex < buttons.length ? nextIndex : nextIndex - Math.sign(nextIndex) * buttons.length;\n        this.setActive(buttons[nextIndexLooped], function (error, item) {\n          if (item) {\n            var link = item.querySelector(_this3.options.selectorLink);\n\n            if (link) {\n              link.focus();\n            }\n          }\n        });\n        event.preventDefault();\n      }\n    }\n    /**\n     * Shows/hides the drop down menu used in narrow mode.\n     * @param {boolean} [force] `true` to show the menu, `false` to hide the menu, otherwise toggles the menu.\n     */\n\n  }, {\n    key: \"_updateMenuState\",\n    value: function _updateMenuState(force) {\n      var menu = this.element.querySelector(this.options.selectorMenu);\n\n      if (menu) {\n        menu.classList.toggle(this.options.classHidden, typeof force === 'undefined' ? force : !force);\n      }\n    }\n    /**\n     * Updates the text indicating the currently selected tab item.\n     * @param {HTMLElement} target The newly selected tab item.\n     */\n\n  }, {\n    key: \"_updateTriggerText\",\n    value: function _updateTriggerText(target) {\n      var triggerText = this.element.querySelector(this.options.selectorTriggerText);\n\n      if (triggerText) {\n        triggerText.textContent = target.textContent;\n      }\n    }\n    /**\n     * The map associating DOM element and tab container instance.\n     * @member Tab.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode ContentSwitcher.create .create()}, or {@linkcode Tab.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode Tab.init .init()} works.\n     * @member Tab.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find tab containers.\n     * @property {string} [selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n     * @property {string} [selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n     * @property {string} [selectorTriggerText]\n     *   The CSS selector to find the element used in narrow mode showing the selected tab item.\n     * @property {string} [selectorButton] The CSS selector to find tab containers.\n     * @property {string} [selectorButtonSelected] The CSS selector to find the selected tab.\n     * @property {string} [selectorLink] The CSS selector to find the links in tabs.\n     * @property {string} [classActive] The CSS class for tab's selected state.\n     * @property {string} [classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n     * @property {string} [eventBeforeSelected]\n     *   The name of the custom event fired before a tab is selected.\n     *   Cancellation of this event stops selection of tab.\n     * @property {string} [eventAfterSelected] The name of the custom event fired after a tab is selected.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return Object.assign(Object.create(ContentSwitcher.options), {\n        selectorInit: '[data-tabs]',\n        selectorMenu: \".\".concat(prefix, \"--tabs__nav\"),\n        selectorTrigger: \".\".concat(prefix, \"--tabs-trigger\"),\n        selectorTriggerText: \".\".concat(prefix, \"--tabs-trigger-text\"),\n        selectorButton: \".\".concat(prefix, \"--tabs__nav-item\"),\n        selectorButtonSelected: \".\".concat(prefix, \"--tabs__nav-item--selected\"),\n        selectorLink: \".\".concat(prefix, \"--tabs__nav-link\"),\n        classActive: \"\".concat(prefix, \"--tabs__nav-item--selected\"),\n        classHidden: \"\".concat(prefix, \"--tabs__nav--hidden\"),\n        eventBeforeSelected: 'tab-beingselected',\n        eventAfterSelected: 'tab-selected'\n      });\n    }\n    /**\n     * Enum for navigating backward/forward.\n     * @readonly\n     * @member Tab.NAVIGATE\n     * @type {Object}\n     * @property {number} BACKWARD Navigating backward.\n     * @property {number} FORWARD Navigating forward.\n     */\n\n  }]);\n\n  return Tab;\n}(ContentSwitcher);\n\nTab.components = new WeakMap();\nTab.NAVIGATE = {\n  BACKWARD: -1,\n  FORWARD: 1\n};\nexport default Tab;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/tabs/tabs.js"],"names":["settings","eventMatches","ContentSwitcher","on","Tab","element","options","manage","event","_handleKeyDown","selected","querySelector","selectorButtonSelected","_updateTriggerText","detail","callback","error","item","data","button","selectorButton","trigger","selectorTrigger","_updateMenuState","triggerNode","which","direction","constructor","NAVIGATE","BACKWARD","FORWARD","buttons","querySelectorAll","nextIndex","Math","max","indexOf","nextIndexLooped","length","sign","setActive","link","selectorLink","focus","preventDefault","force","menu","selectorMenu","classList","toggle","classHidden","target","triggerText","selectorTriggerText","textContent","prefix","Object","assign","create","selectorInit","classActive","eventBeforeSelected","eventAfterSelected","components","WeakMap"],"mappings":"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","sourcesContent":["import settings from '../../globals/js/settings';\nimport eventMatches from '../../globals/js/misc/event-matches';\nimport ContentSwitcher from '../content-switcher/content-switcher';\nimport on from '../../globals/js/misc/on';\n\nclass Tab extends ContentSwitcher {\n  /**\n   * Container of tabs.\n   * @extends ContentSwitcher\n   * @param {HTMLElement} element The element working as a container of tabs.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTriggerText]\n   *   The CSS selector to find the element used in narrow mode showing the selected tab item.\n   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n   * @param {string} [options.classActive] The CSS class for tab's selected state.\n   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a tab is selected.\n   *   Cancellation of this event stops selection of tab.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    this.manage(\n      on(this.element, 'keydown', event => {\n        this._handleKeyDown(event);\n      })\n    );\n\n    const selected = this.element.querySelector(this.options.selectorButtonSelected);\n    if (selected) {\n      this._updateTriggerText(selected);\n    }\n  }\n\n  /**\n   * Internal method of {@linkcode Tab#setActive .setActive()}, to select a tab item.\n   * @private\n   * @param {Object} detail The detail of the event trigging this action.\n   * @param {HTMLElement} detail.item The tab item to be selected.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n  _changeState(detail, callback) {\n    super._changeState(detail, (error, ...data) => {\n      if (!error) {\n        this._updateTriggerText(detail.item);\n      }\n      callback(error, ...data);\n    });\n  }\n\n  /**\n   * Handles click on tab container.\n   * * If the click is on a tab, activates it.\n   * * If the click is on the button to open the drop down menu, does so.\n   * @param {Event} event The event triggering this method.\n   */\n  _handleClick(event) {\n    const button = eventMatches(event, this.options.selectorButton);\n    const trigger = eventMatches(event, this.options.selectorTrigger);\n    if (button) {\n      super._handleClick(event);\n      this._updateMenuState(false);\n    }\n    if (trigger) {\n      this._updateMenuState();\n    }\n  }\n\n  /**\n   * Handles arrow keys on tab container.\n   * * Left keys are used to go to previous tab.\n   * * Right keys are used to go to next tab.\n   * @param {Event} event The event triggering this method.\n   */\n  _handleKeyDown(event) {\n    const triggerNode = eventMatches(event, this.options.selectorTrigger);\n    if (triggerNode) {\n      if (event.which === 13) {\n        this._updateMenuState();\n      }\n      return;\n    }\n\n    const direction = {\n      37: this.constructor.NAVIGATE.BACKWARD,\n      39: this.constructor.NAVIGATE.FORWARD,\n    }[event.which];\n\n    if (direction) {\n      const buttons = [...this.element.querySelectorAll(this.options.selectorButton)];\n      const button = this.element.querySelector(this.options.selectorButtonSelected);\n      const nextIndex = Math.max(buttons.indexOf(button) + direction, -1 /* For `button` not found in `buttons` */);\n      const nextIndexLooped =\n        nextIndex >= 0 && nextIndex < buttons.length ? nextIndex : nextIndex - Math.sign(nextIndex) * buttons.length;\n      this.setActive(buttons[nextIndexLooped], (error, item) => {\n        if (item) {\n          const link = item.querySelector(this.options.selectorLink);\n          if (link) {\n            link.focus();\n          }\n        }\n      });\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Shows/hides the drop down menu used in narrow mode.\n   * @param {boolean} [force] `true` to show the menu, `false` to hide the menu, otherwise toggles the menu.\n   */\n  _updateMenuState(force) {\n    const menu = this.element.querySelector(this.options.selectorMenu);\n    if (menu) {\n      menu.classList.toggle(this.options.classHidden, typeof force === 'undefined' ? force : !force);\n    }\n  }\n\n  /**\n   * Updates the text indicating the currently selected tab item.\n   * @param {HTMLElement} target The newly selected tab item.\n   */\n  _updateTriggerText(target) {\n    const triggerText = this.element.querySelector(this.options.selectorTriggerText);\n    if (triggerText) {\n      triggerText.textContent = target.textContent;\n    }\n  }\n\n  /**\n   * The map associating DOM element and tab container instance.\n   * @member Tab.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor, {@linkcode ContentSwitcher.create .create()}, or {@linkcode Tab.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode Tab.init .init()} works.\n   * @member Tab.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS selector to find tab containers.\n   * @property {string} [selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n   * @property {string} [selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n   * @property {string} [selectorTriggerText]\n   *   The CSS selector to find the element used in narrow mode showing the selected tab item.\n   * @property {string} [selectorButton] The CSS selector to find tab containers.\n   * @property {string} [selectorButtonSelected] The CSS selector to find the selected tab.\n   * @property {string} [selectorLink] The CSS selector to find the links in tabs.\n   * @property {string} [classActive] The CSS class for tab's selected state.\n   * @property {string} [classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n   * @property {string} [eventBeforeSelected]\n   *   The name of the custom event fired before a tab is selected.\n   *   Cancellation of this event stops selection of tab.\n   * @property {string} [eventAfterSelected] The name of the custom event fired after a tab is selected.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return Object.assign(Object.create(ContentSwitcher.options), {\n      selectorInit: '[data-tabs]',\n      selectorMenu: `.${prefix}--tabs__nav`,\n      selectorTrigger: `.${prefix}--tabs-trigger`,\n      selectorTriggerText: `.${prefix}--tabs-trigger-text`,\n      selectorButton: `.${prefix}--tabs__nav-item`,\n      selectorButtonSelected: `.${prefix}--tabs__nav-item--selected`,\n      selectorLink: `.${prefix}--tabs__nav-link`,\n      classActive: `${prefix}--tabs__nav-item--selected`,\n      classHidden: `${prefix}--tabs__nav--hidden`,\n      eventBeforeSelected: 'tab-beingselected',\n      eventAfterSelected: 'tab-selected',\n    });\n  }\n\n  /**\n   * Enum for navigating backward/forward.\n   * @readonly\n   * @member Tab.NAVIGATE\n   * @type {Object}\n   * @property {number} BACKWARD Navigating backward.\n   * @property {number} FORWARD Navigating forward.\n   */\n  static NAVIGATE = {\n    BACKWARD: -1,\n    FORWARD: 1,\n  };\n}\n\nexport default Tab;\n"]},"metadata":{},"sourceType":"module"}