{"ast":null,"code":"import _typeof2 from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/typeof\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport isEqual from 'lodash.isequal';\nimport TextInput from '../TextInput';\n\nvar defaultFormatLabel = function defaultFormatLabel(value, label) {\n  return typeof label === 'function' ? label(value) : \"\".concat(value).concat(label);\n};\n\nvar Slider =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Slider, _PureComponent);\n\n  function Slider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Slider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      dragging: false,\n      value: _this.props.value,\n      left: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updatePosition\", function (evt) {\n      if (evt && _this.props.disabled) {\n        return;\n      }\n\n      if (evt && evt.dispatchConfig) {\n        evt.persist();\n      }\n\n      if (_this.state.dragging) {\n        return;\n      }\n\n      _this.setState({\n        dragging: true\n      });\n\n      requestAnimationFrame(function () {\n        _this.setState(function (prevState, props) {\n          // Note: In FF, `evt.target` of `mousemove` event can be `HTMLDocument` which doesn't have `classList`.\n          // One example is dragging out of browser viewport.\n          var fromInput = evt && evt.target && evt.target.classList && evt.target.classList.contains('bx-slider-text-input');\n\n          var _this$calcValue = _this.calcValue(evt, prevState, props),\n              left = _this$calcValue.left,\n              newSliderValue = _this$calcValue.newValue;\n\n          var newValue = fromInput ? Number(evt.target.value) : newSliderValue;\n\n          if (prevState.left === left && prevState.value === newValue) {\n            return {\n              dragging: false\n            };\n          }\n\n          if (typeof props.onChange === 'function') {\n            props.onChange({\n              value: newValue\n            });\n          }\n\n          return {\n            dragging: false,\n            left: left,\n            value: newValue\n          };\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"calcValue\", function (evt, prevState, props) {\n      var min = props.min,\n          max = props.max,\n          step = props.step,\n          stepMuliplier = props.stepMuliplier;\n      var value = prevState.value;\n      var range = max - min;\n      var valuePercentage = (value - min) / range * 100;\n      var left;\n      var newValue;\n      left = valuePercentage;\n      newValue = value;\n\n      if (evt) {\n        var type = evt.type;\n\n        if (type === 'keydown') {\n          var direction = {\n            40: -1,\n            // decreasing\n            37: -1,\n            // decreasing\n            38: 1,\n            // increasing\n            39: 1 // increasing\n\n          }[evt.which];\n\n          if (direction !== undefined) {\n            var multiplier = evt.shiftKey === true ? range / step / stepMuliplier : 1;\n            var stepMultiplied = step * multiplier;\n            var stepSize = stepMultiplied / range * 100;\n            left = valuePercentage + stepSize * direction;\n            newValue = Number(value) + stepMultiplied * direction;\n          }\n        }\n\n        if (type === 'mousemove' || type === 'click' || type === 'touchmove') {\n          var clientX = evt.touches ? evt.touches[0].clientX : evt.clientX;\n\n          var track = _this.track.getBoundingClientRect();\n\n          var ratio = (clientX - track.left) / track.width;\n          var rounded = min + Math.round(range * ratio / step) * step;\n          left = (rounded - min) / range * 100;\n          newValue = rounded;\n        }\n      }\n\n      if (newValue <= Number(min)) {\n        left = 0;\n        newValue = min;\n      }\n\n      if (newValue >= Number(max)) {\n        left = 100;\n        newValue = max;\n      }\n\n      return {\n        left: left,\n        newValue: newValue\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseStart\", function () {\n      _this.element.ownerDocument.addEventListener('mousemove', _this.updatePosition);\n\n      _this.element.ownerDocument.addEventListener('mouseup', _this.handleMouseEnd);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleMouseEnd\", function () {\n      _this.element.ownerDocument.removeEventListener('mousemove', _this.updatePosition);\n\n      _this.element.ownerDocument.removeEventListener('mouseup', _this.handleMouseEnd);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchStart\", function () {\n      _this.element.ownerDocument.addEventListener('touchmove', _this.updatePosition);\n\n      _this.element.ownerDocument.addEventListener('touchup', _this.handleTouchEnd);\n\n      _this.element.ownerDocument.addEventListener('touchend', _this.handleTouchEnd);\n\n      _this.element.ownerDocument.addEventListener('touchcancel', _this.handleTouchEnd);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTouchEnd\", function () {\n      _this.element.ownerDocument.removeEventListener('touchmove', _this.updatePosition);\n\n      _this.element.ownerDocument.removeEventListener('touchup', _this.handleTouchEnd);\n\n      _this.element.ownerDocument.removeEventListener('touchend', _this.handleTouchEnd);\n\n      _this.element.ownerDocument.removeEventListener('touchcancel', _this.handleTouchEnd);\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleChange\", function (evt) {\n      _this.setState({\n        value: evt.target.value\n      });\n\n      _this.updatePosition(evt);\n    });\n\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updatePosition();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!isEqual(nextProps, this.props)) {\n        this.updatePosition();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          ariaLabelInput = _this$props.ariaLabelInput,\n          className = _this$props.className,\n          hideTextInput = _this$props.hideTextInput,\n          _this$props$id = _this$props.id,\n          id = _this$props$id === void 0 ? this.inputId = this.inputId || \"__carbon-slider_\".concat(Math.random().toString(36).substr(2)) : _this$props$id,\n          min = _this$props.min,\n          minLabel = _this$props.minLabel,\n          max = _this$props.max,\n          maxLabel = _this$props.maxLabel,\n          _this$props$formatLab = _this$props.formatLabel,\n          formatLabel = _this$props$formatLab === void 0 ? defaultFormatLabel : _this$props$formatLab,\n          labelText = _this$props.labelText,\n          step = _this$props.step,\n          stepMuliplier = _this$props.stepMuliplier,\n          inputType = _this$props.inputType,\n          required = _this$props.required,\n          disabled = _this$props.disabled,\n          name = _this$props.name,\n          light = _this$props.light,\n          other = _objectWithoutProperties(_this$props, [\"ariaLabelInput\", \"className\", \"hideTextInput\", \"id\", \"min\", \"minLabel\", \"max\", \"maxLabel\", \"formatLabel\", \"labelText\", \"step\", \"stepMuliplier\", \"inputType\", \"required\", \"disabled\", \"name\", \"light\"]);\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          left = _this$state.left;\n      var sliderClasses = classNames('bx--slider', {\n        'bx--slider--disabled': disabled\n      }, className);\n      var inputClasses = classNames('bx-slider-text-input', {\n        'bx--text-input--light': light\n      });\n      var filledTrackStyle = {\n        transform: \"translate(0%, -50%) scaleX(\".concat(left / 100, \")\")\n      };\n      var thumbStyle = {\n        left: \"\".concat(left, \"%\")\n      };\n      return React.createElement(\"div\", {\n        className: \"bx--form-item\"\n      }, React.createElement(\"label\", {\n        htmlFor: id,\n        className: \"bx--label\"\n      }, labelText), React.createElement(\"div\", {\n        className: \"bx--slider-container\"\n      }, React.createElement(\"span\", {\n        className: \"bx--slider__range-label\"\n      }, formatLabel(min, minLabel)), React.createElement(\"div\", _extends({\n        className: sliderClasses,\n        ref: function ref(node) {\n          _this2.element = node;\n        },\n        onClick: this.updatePosition,\n        onKeyPress: this.updatePosition,\n        role: \"presentation\",\n        tabIndex: -1\n      }, other), React.createElement(\"div\", {\n        className: \"bx--slider__track\",\n        ref: function ref(node) {\n          _this2.track = node;\n        }\n      }), React.createElement(\"div\", {\n        className: \"bx--slider__filled-track\",\n        style: filledTrackStyle\n      }), React.createElement(\"div\", {\n        className: \"bx--slider__thumb\",\n        role: \"slider\",\n        id: id,\n        tabIndex: 0,\n        \"aria-valuemax\": max,\n        \"aria-valuemin\": min,\n        \"aria-valuenow\": value,\n        style: thumbStyle,\n        onMouseDown: this.handleMouseStart,\n        onTouchStart: this.handleTouchStart,\n        onKeyDown: this.updatePosition\n      }), React.createElement(\"input\", {\n        type: \"hidden\",\n        name: name,\n        value: value,\n        required: required,\n        min: min,\n        max: max,\n        step: step,\n        onChange: this.handleChange\n      })), React.createElement(\"span\", {\n        className: \"bx--slider__range-label\"\n      }, formatLabel(max, maxLabel)), !hideTextInput && React.createElement(TextInput, {\n        type: inputType,\n        id: \"input-for-slider\",\n        className: inputClasses,\n        value: value,\n        onChange: this.handleChange,\n        labelText: \"\",\n        \"aria-label\": ariaLabelInput\n      })));\n    }\n  }]);\n\n  return Slider;\n}(PureComponent);\n\n_defineProperty(Slider, \"propTypes\", {\n  /**\n   * The CSS class name for the slider.\n   */\n  className: PropTypes.string,\n\n  /**\n   * `true` to hide the number input box.\n   */\n  hideTextInput: PropTypes.bool,\n\n  /**\n   * The ID of the `<input>`.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The callback to get notified of change in value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The value.\n   */\n  value: PropTypes.number.isRequired,\n\n  /**\n   * The minimum value.\n   */\n  min: PropTypes.number.isRequired,\n\n  /**\n   * The label associated with the minimum value.\n   */\n  minLabel: PropTypes.string,\n\n  /**\n   * The maximum value.\n   */\n  max: PropTypes.number.isRequired,\n\n  /**\n   * The label associated with the maximum value.\n   */\n  maxLabel: PropTypes.string,\n\n  /**\n   * The callback to format the label associated with the minimum/maximum value.\n   */\n  formatLabel: PropTypes.func,\n\n  /**\n   * The label for the slider.\n   */\n  labelText: PropTypes.node,\n\n  /**\n   * A value determining how much the value should increase/decrease by moving the thumb by mouse.\n   */\n  step: PropTypes.number,\n\n  /**\n   * A value determining how much the value should increase/decrease by Shift+arrow keys,\n   * which will be `(max - min) / stepMuliplier`.\n   */\n  stepMuliplier: PropTypes.number,\n\n  /**\n   * The child nodes.\n   */\n  children: PropTypes.node,\n\n  /**\n   * `true` to disable this slider.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The `name` attribute of the `<input>`.\n   */\n  name: PropTypes.bool,\n\n  /**\n   * The `type` attribute of the `<input>`.\n   */\n  inputType: PropTypes.string,\n\n  /**\n   * The `ariaLabel` for the `<input>`.\n   */\n  ariaLabelInput: PropTypes.string,\n\n  /**\n   * `true` to use the light version.\n   */\n  light: PropTypes.bool\n});\n\n_defineProperty(Slider, \"defaultProps\", {\n  hideTextInput: false,\n  step: 1,\n  stepMuliplier: 4,\n  disabled: false,\n  minLabel: '',\n  maxLabel: '',\n  inputType: 'number',\n  ariaLabelInput: 'Slider number input',\n  light: false\n});\n\nexport { Slider as default };","map":null,"metadata":{},"sourceType":"module"}