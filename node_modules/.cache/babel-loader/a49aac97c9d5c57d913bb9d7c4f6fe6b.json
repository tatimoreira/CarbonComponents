{"ast":null,"code":"import _classCallCheck from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\n\nvar Loading =\n/*#__PURE__*/\nfunction (_mixin) {\n  _inherits(Loading, _mixin);\n\n  /**\n   * Spinner indicating loading state.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a spinner.\n   * @param {Object} [options] The component options.\n   * @param {boolean} [options.active] `true` if this spinner should roll.\n   */\n  function Loading(element, options) {\n    var _this;\n\n    _classCallCheck(this, Loading);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Loading).call(this, element, options));\n    _this.active = _this.options.active; // Initialize spinner\n\n    _this.set(_this.active);\n\n    return _this;\n  }\n  /**\n   * Sets active/inactive state.\n   * @param {boolean} active `true` if this spinner should roll.\n   */\n\n\n  _createClass(Loading, [{\n    key: \"set\",\n    value: function set(active) {\n      if (typeof active !== 'boolean') {\n        throw new TypeError('set expects a boolean.');\n      }\n\n      this.active = active;\n      this.element.classList.toggle(this.options.classLoadingStop, !this.active);\n      /**\n       * If overlay is the parentNode then toggle it too.\n       */\n\n      var parentNode = this.element.parentNode;\n\n      if (parentNode && parentNode.classList.contains(this.options.classLoadingOverlay)) {\n        parentNode.classList.toggle(this.options.classLoadingOverlayStop, !this.active);\n      }\n\n      return this;\n    }\n    /**\n     * Toggles active/inactive state.\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      return this.set(!this.active);\n    }\n    /**\n     * @returns {boolean} `true` if this spinner is rolling.\n     */\n\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n    /**\n     * Sets state to inactive and deletes the loading element.\n     */\n\n  }, {\n    key: \"end\",\n    value: function end() {\n      var _this2 = this;\n\n      this.set(false);\n      var handleAnimationEnd = this.manage(on(this.element, 'animationend', function (evt) {\n        if (handleAnimationEnd) {\n          handleAnimationEnd = _this2.unmanage(handleAnimationEnd).release();\n        }\n\n        if (evt.animationName === 'rotate-end-p2') {\n          _this2._deleteElement();\n        }\n      }));\n    }\n    /**\n     * Delete component from the DOM.\n     */\n\n  }, {\n    key: \"_deleteElement\",\n    value: function _deleteElement() {\n      var parentNode = this.element.parentNode;\n      parentNode.removeChild(this.element);\n\n      if (parentNode.classList.contains(this.options.selectorLoadingOverlay)) {\n        parentNode.remove();\n      }\n    }\n    /**\n     * The map associating DOM element and spinner instance.\n     * @member Loading.components\n     * @type {WeakMap}\n     */\n\n  }], [{\n    key: \"options\",\n\n    /**\n     * The component options.\n     * If `options` is specified in the constructor, {@linkcode Loading.create .create()}, or {@linkcode Loading.init .init()},\n     * properties in this object are overriden for the instance being create and how {@linkcode Loading.init .init()} works.\n     * @member Loading.options\n     * @type {Object}\n     * @property {string} selectorInit The CSS selector to find spinners.\n     */\n    get: function get() {\n      var prefix = settings.prefix;\n      return {\n        selectorInit: '[data-loading]',\n        selectorLoadingOverlay: \".\".concat(prefix, \"--loading-overlay\"),\n        classLoadingOverlay: \"\".concat(prefix, \"--loading-overlay\"),\n        classLoadingStop: \"\".concat(prefix, \"--loading--stop\"),\n        classLoadingOverlayStop: \"\".concat(prefix, \"--loading-overlay--stop\"),\n        active: true\n      };\n    }\n  }]);\n\n  return Loading;\n}(mixin(createComponent, initComponentBySearch, handles));\n\nLoading.components = new WeakMap();\nexport default Loading;","map":{"version":3,"sources":["/Users/tatianamoreira/Documents/testTech/react/carbon-design-react-test/src/components/loading/loading.js"],"names":["settings","mixin","createComponent","initComponentBySearch","handles","on","Loading","element","options","active","set","TypeError","classList","toggle","classLoadingStop","parentNode","contains","classLoadingOverlay","classLoadingOverlayStop","handleAnimationEnd","manage","evt","unmanage","release","animationName","_deleteElement","removeChild","selectorLoadingOverlay","remove","prefix","selectorInit","components","WeakMap"],"mappings":";;;;;AAAA,OAAOA,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,eAAP,MAA4B,0CAA5B;AACA,OAAOC,qBAAP,MAAkC,kDAAlC;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,EAAP,MAAe,0BAAf;;IAEMC,O;;;;;AACJ;;;;;;;;;AASA,mBAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAAA;;AAC5B,iFAAMD,OAAN,EAAeC,OAAf;AAEA,UAAKC,MAAL,GAAc,MAAKD,OAAL,CAAaC,MAA3B,CAH4B,CAK5B;;AACA,UAAKC,GAAL,CAAS,MAAKD,MAAd;;AAN4B;AAO7B;AAED;;;;;;;;wBAIIA,M,EAAQ;AACV,UAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,cAAM,IAAIE,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAED,WAAKF,MAAL,GAAcA,MAAd;AACA,WAAKF,OAAL,CAAaK,SAAb,CAAuBC,MAAvB,CAA8B,KAAKL,OAAL,CAAaM,gBAA3C,EAA6D,CAAC,KAAKL,MAAnE;AAEA;;;;AAGA,UAAMM,UAAU,GAAG,KAAKR,OAAL,CAAaQ,UAAhC;;AAEA,UAAIA,UAAU,IAAIA,UAAU,CAACH,SAAX,CAAqBI,QAArB,CAA8B,KAAKR,OAAL,CAAaS,mBAA3C,CAAlB,EAAmF;AACjFF,QAAAA,UAAU,CAACH,SAAX,CAAqBC,MAArB,CAA4B,KAAKL,OAAL,CAAaU,uBAAzC,EAAkE,CAAC,KAAKT,MAAxE;AACD;;AAED,aAAO,IAAP;AACD;AAED;;;;;;6BAGS;AACP,aAAO,KAAKC,GAAL,CAAS,CAAC,KAAKD,MAAf,CAAP;AACD;AAED;;;;;;+BAGW;AACT,aAAO,KAAKA,MAAZ;AACD;AAED;;;;;;0BAGM;AAAA;;AACJ,WAAKC,GAAL,CAAS,KAAT;AACA,UAAIS,kBAAkB,GAAG,KAAKC,MAAL,CACvBf,EAAE,CAAC,KAAKE,OAAN,EAAe,cAAf,EAA+B,UAAAc,GAAG,EAAI;AACtC,YAAIF,kBAAJ,EAAwB;AACtBA,UAAAA,kBAAkB,GAAG,MAAI,CAACG,QAAL,CAAcH,kBAAd,EAAkCI,OAAlC,EAArB;AACD;;AACD,YAAIF,GAAG,CAACG,aAAJ,KAAsB,eAA1B,EAA2C;AACzC,UAAA,MAAI,CAACC,cAAL;AACD;AACF,OAPC,CADqB,CAAzB;AAUD;AAED;;;;;;qCAGiB;AACf,UAAMV,UAAU,GAAG,KAAKR,OAAL,CAAaQ,UAAhC;AAEAA,MAAAA,UAAU,CAACW,WAAX,CAAuB,KAAKnB,OAA5B;;AAEA,UAAIQ,UAAU,CAACH,SAAX,CAAqBI,QAArB,CAA8B,KAAKR,OAAL,CAAamB,sBAA3C,CAAJ,EAAwE;AACtEZ,QAAAA,UAAU,CAACa,MAAX;AACD;AACF;AAED;;;;;;;;;AAOA;;;;;;;;wBAQqB;AAAA,UACXC,MADW,GACA7B,QADA,CACX6B,MADW;AAEnB,aAAO;AACLC,QAAAA,YAAY,EAAE,gBADT;AAELH,QAAAA,sBAAsB,aAAME,MAAN,sBAFjB;AAGLZ,QAAAA,mBAAmB,YAAKY,MAAL,sBAHd;AAILf,QAAAA,gBAAgB,YAAKe,MAAL,oBAJX;AAKLX,QAAAA,uBAAuB,YAAKW,MAAL,4BALlB;AAMLpB,QAAAA,MAAM,EAAE;AANH,OAAP;AAQD;;;;EAhHmBR,KAAK,CAACC,eAAD,EAAkBC,qBAAlB,EAAyCC,OAAzC,C;;AAArBE,O,CA4FGyB,U,GAAa,IAAIC,OAAJ,E;AAuBtB,eAAe1B,OAAf","sourcesContent":["import settings from '../../globals/js/settings';\nimport mixin from '../../globals/js/misc/mixin';\nimport createComponent from '../../globals/js/mixins/create-component';\nimport initComponentBySearch from '../../globals/js/mixins/init-component-by-search';\nimport handles from '../../globals/js/mixins/handles';\nimport on from '../../globals/js/misc/on';\n\nclass Loading extends mixin(createComponent, initComponentBySearch, handles) {\n  /**\n   * Spinner indicating loading state.\n   * @extends CreateComponent\n   * @extends InitComponentBySearch\n   * @extends Handles\n   * @param {HTMLElement} element The element working as a spinner.\n   * @param {Object} [options] The component options.\n   * @param {boolean} [options.active] `true` if this spinner should roll.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    this.active = this.options.active;\n\n    // Initialize spinner\n    this.set(this.active);\n  }\n\n  /**\n   * Sets active/inactive state.\n   * @param {boolean} active `true` if this spinner should roll.\n   */\n  set(active) {\n    if (typeof active !== 'boolean') {\n      throw new TypeError('set expects a boolean.');\n    }\n\n    this.active = active;\n    this.element.classList.toggle(this.options.classLoadingStop, !this.active);\n\n    /**\n     * If overlay is the parentNode then toggle it too.\n     */\n    const parentNode = this.element.parentNode;\n\n    if (parentNode && parentNode.classList.contains(this.options.classLoadingOverlay)) {\n      parentNode.classList.toggle(this.options.classLoadingOverlayStop, !this.active);\n    }\n\n    return this;\n  }\n\n  /**\n   * Toggles active/inactive state.\n   */\n  toggle() {\n    return this.set(!this.active);\n  }\n\n  /**\n   * @returns {boolean} `true` if this spinner is rolling.\n   */\n  isActive() {\n    return this.active;\n  }\n\n  /**\n   * Sets state to inactive and deletes the loading element.\n   */\n  end() {\n    this.set(false);\n    let handleAnimationEnd = this.manage(\n      on(this.element, 'animationend', evt => {\n        if (handleAnimationEnd) {\n          handleAnimationEnd = this.unmanage(handleAnimationEnd).release();\n        }\n        if (evt.animationName === 'rotate-end-p2') {\n          this._deleteElement();\n        }\n      })\n    );\n  }\n\n  /**\n   * Delete component from the DOM.\n   */\n  _deleteElement() {\n    const parentNode = this.element.parentNode;\n\n    parentNode.removeChild(this.element);\n\n    if (parentNode.classList.contains(this.options.selectorLoadingOverlay)) {\n      parentNode.remove();\n    }\n  }\n\n  /**\n   * The map associating DOM element and spinner instance.\n   * @member Loading.components\n   * @type {WeakMap}\n   */\n  static components = new WeakMap();\n\n  /**\n   * The component options.\n   * If `options` is specified in the constructor, {@linkcode Loading.create .create()}, or {@linkcode Loading.init .init()},\n   * properties in this object are overriden for the instance being create and how {@linkcode Loading.init .init()} works.\n   * @member Loading.options\n   * @type {Object}\n   * @property {string} selectorInit The CSS selector to find spinners.\n   */\n  static get options() {\n    const { prefix } = settings;\n    return {\n      selectorInit: '[data-loading]',\n      selectorLoadingOverlay: `.${prefix}--loading-overlay`,\n      classLoadingOverlay: `${prefix}--loading-overlay`,\n      classLoadingStop: `${prefix}--loading--stop`,\n      classLoadingOverlayStop: `${prefix}--loading-overlay--stop`,\n      active: true,\n    };\n  }\n}\n\nexport default Loading;\n"]},"metadata":{},"sourceType":"module"}